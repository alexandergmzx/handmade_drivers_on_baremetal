
final.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080001d8 l    d  .text	00000000 .text
080028a0 l    d  .rodata	00000000 .rodata
08002914 l    d  .ARM.extab	00000000 .ARM.extab
08002914 l    d  .ARM	00000000 .ARM
08002914 l    d  .preinit_array	00000000 .preinit_array
08002914 l    d  .init_array	00000000 .init_array
08002918 l    d  .fini_array	00000000 .fini_array
20000000 l    d  .data	00000000 .data
2000007c l    d  .bss	00000000 .bss
200000d0 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .stab	00000000 .stab
00000000 l    d  .stabstr	00000000 .stabstr
00000000 l    df *ABS*	00000000 startup_stm32f413zhtx.o
08001ebc l       .text	00000000 LoopCopyDataInit
08001eb6 l       .text	00000000 CopyDataInit
08001ece l       .text	00000000 LoopFillZerobss
08001eca l       .text	00000000 FillZerobss
08001ede l       .text	00000000 LoopForever
08001ef8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 crtstuff.c
08002888 l     O .text	00000000 __EH_FRAME_BEGIN__
080001d8 l     F .text	00000000 deregister_tm_clones
080001f8 l     F .text	00000000 register_tm_clones
0800021c l     F .text	00000000 __do_global_dtors_aux
2000007c l       .bss	00000000 completed.6266
08002918 l     O .fini_array	00000000 __do_global_dtors_aux_fini_array_entry
08000244 l     F .text	00000000 frame_dummy
20000080 l       .bss	00000000 object.6271
08002914 l     O .init_array	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 stm32f413xx_rcc_driver.c
00000000 l    df *ABS*	00000000 stm32f4xx_usart_driver.c
20000099 l       .bss	00000000 rx_char.5898
00000000 l    df *ABS*	00000000 stm32f413xx_gpio_driver.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08002340 l     F .text	00000048 std.isra.0
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 close.c
00000000 l    df *ABS*	00000000 fstat.c
00000000 l    df *ABS*	00000000 isatty.c
00000000 l    df *ABS*	00000000 lseek.c
00000000 l    df *ABS*	00000000 read.c
00000000 l    df *ABS*	00000000 sbrk.c
200000a4 l     O .bss	00000004 heap_end.4079
00000000 l    df *ABS*	00000000 write.c
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crti.o
00000000 l    df *ABS*	00000000 /usr/lib/gcc/arm-none-eabi/4.9.3/armv7e-m/fpu/crtn.o
00000000 l    df *ABS*	00000000 impure.c
20000018 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00000000 l    df *ABS*	00000000 
0800291c l       .fini_array	00000000 __fini_array_end
00000000 l       *UND*	00000000 malloc
2000007c l       .bss	00000000 __bss_start__
200000d0 l       .bss	00000000 __bss_end__
00000000 l       *UND*	00000000 software_init_hook
08002918 l       .fini_array	00000000 __fini_array_start
08002918 l       .init_array	00000000 __init_array_end
00000000 l       *UND*	00000000 hardware_init_hook
08002914 l       .preinit_array	00000000 __preinit_array_end
00000000 l       *UND*	00000000 __stack
08002914 l       .init_array	00000000 __init_array_start
08002914 l       .preinit_array	00000000 __preinit_array_start
00000000 l       *UND*	00000000 free
08001ef8  w    F .text	00000002 EXTI2_IRQHandler
08000a20 g     F .text	0000004c USART_rxIT
08001ef8  w    F .text	00000002 TIM8_CC_IRQHandler
080027a4 g     F .text	00000020 _isatty_r
08001ba0 g     F .text	00000054 GPIO_IRQpriorityconfig
08001f58 g     F .text	000000f0 _puts_r
080027c4 g     F .text	00000024 _lseek_r
08001ef8  w    F .text	00000002 DebugMon_Handler
08001ef8  w    F .text	00000002 SPI4_IRQHandler
08001ef8  w    F .text	00000002 I2C2_EVT_IRQHandler
08001ef8  w    F .text	00000002 I2C1_ERR_IRQHandler
08001ef8  w    F .text	00000002 TIM1_CC_IRQHandler
08001ef8  w    F .text	00000002 QuadSPI_IRQHandler
0800270e g     F .text	00000024 __sseek
080023b4 g     F .text	00000060 __sinit
08001ef8  w    F .text	00000002 DMA2_Stream5_IRQHandler
08002058 g     F .text	000000a8 __swbuf_r
08001ef8  w    F .text	00000002 HardFault_Handler
08002388 g     F .text	0000002c __sfmoreglue
08001d4c g     F .text	00000088 delay_debounce
08001ef8  w    F .text	00000002 DMA1_Stream5_IRQHandler
00000400 g       *ABS*	00000000 _Min_Stack_Size
08001ef8  w    F .text	00000002 SysTick_Handler
08001ef8  w    F .text	00000002 CAN3_RX1_IRQHandler
08001ef8  w    F .text	00000002 PVD_IRQHandler
08001ef8  w    F .text	00000002 SDIO_IRQHandler
08001ef8  w    F .text	00000002 TAMP_STAMP_IRQHandler
0800291c g       *ABS*	00000000 _sidata
080005f0 g     F .text	0000010a USART_init
08001ef8  w    F .text	00000002 PendSV_Handler
08001ef8  w    F .text	00000002 NMI_Handler
08002914 g       .ARM	00000000 __exidx_end
08001ef8  w    F .text	00000002 CAN2_RX1_IRQHandler
08001ef8  w    F .text	00000002 EXTI3_IRQHandler
08001ef8  w    F .text	00000002 TIM8_TRG_COM_TIM14_IRQHandler
08001ef8  w    F .text	00000002 DFSDM1_FLT1_IRQHandler
08001ef8  w    F .text	00000002 TIM1_UP_TIM10_IRQHandler
08001104 g     F .text	0000003e USART_GetFlagStatus
08002780 g     F .text	00000024 _fstat_r
200000cc g     O .bss	00000004 errno
080028a0 g       .text	00000000 _etext
2000007c g       .bss	00000000 _sbss
080009c4 g     F .text	0000005c USART_txIT
080012cc g     F .text	00000040 USART_ApplicationEventCallback
08001ef8  w    F .text	00000002 TIM8_UP_TIM13_IRQHandler
08001ef8  w    F .text	00000002 I2C3_ER_IRQHandler
20000000 g     O .data	00000012 AHB_Prescaler
080003ec g     F .text	00000204 USART_clk
2000007c g     O .data	00000000 .hidden __TMC_END__
08001ef8  w    F .text	00000002 USART8_IRQHandler
08002334 g     F .text	0000000c _cleanup_r
08001a0c g     F .text	0000001c GPIO_toggleport
08001ef8  w    F .text	00000002 EXTI0_IRQHandler
08002048 g     F .text	00000010 puts
08001ef8  w    F .text	00000002 DMA1_Stream2_IRQHandler
08001ef8  w    F .text	00000002 CAN1_RX0_IRQHandler
08001ef8  w    F .text	00000002 FPU_IRQHandler
08000c38 g     F .text	00000398 USART_IRQHandling
08001ef8  w    F .text	00000002 CAN3_SCE_IRQHandler
080011b8 g     F .text	0000006c USART6_initUSART
0800281c g     F .text	00000010 _fstat
08001ef8  w    F .text	00000002 UsageFault_Handler
08001ef8  w    F .text	00000002 CAN2_SCE_IRQHandler
08001ef8  w    F .text	00000002 DMA2_Stream2_IRQHandler
200000a8 g     O .bss	00000024 USART6Handle
20000000 g       .data	00000000 _sdata
08001ef8  w    F .text	00000002 SPI1_IRQHandler
08002694 g     F .text	00000020 _sbrk_r
08001a28 g     F .text	00000178 GPIO_IRQconfig
08001dd4 g     F .text	00000038 digitalWrite
080027e8 g     F .text	00000024 _read_r
08001ef8  w    F .text	00000002 TIM1_BRK_TIM9_IRQHandler
08001ef8  w    F .text	00000002 CAN2_RX0_IRQHandler
08000a6c g     F .text	00000178 USART_IRQconfig
08002914 g       .ARM	00000000 __exidx_start
08001ef8  w    F .text	00000002 DMA2_Stream3_IRQHandler
0800282c g     F .text	00000010 _isatty
080028b0 g     O .rodata	00000004 _global_impure_ptr
08001efc g     F .text	0000004c __libc_init_array
08001ef8  w    F .text	00000002 USART7_IRQHandler
0800285c g     F .text	0000001c _sbrk
080017e4 g     F .text	00000144 GPIO_deinit
080012bc g     F .text	00000010 USART6_IRQHandler
08002888 g     F .text	00000000 _init
08001ef8  w    F .text	00000002 CAN3_RX0_IRQHandler
080019c8 g     F .text	0000001c GPIO_writeport
08001ef8  w    F .text	00000002 USART3_IRQHandler
200000d0 g       .bss	00000000 _ebss
08001ea8  w    F .text	00000038 Reset_Handler
08001ef8  w    F .text	00000002 CAN1_RX1_IRQHandler
08001ef8  w    F .text	00000002 UART5_IRQHandler
08001958 g     F .text	00000020 GPIO_readport
08001ef8  w    F .text	00000002 DMA2_Stream0_IRQHandler
080010c8 g     F .text	0000003c USART_peripheral_control
08001ef8  w    F .text	00000002 TIM4_IRQHandler
20000014 g     O .data	00000004 APBx_Prescaler
080028f4 g     O .rodata	00000020 __sf_fake_stderr
00000000  w      *UND*	00000000 __deregister_frame_info
200000d0 g       ._user_heap_stack	00000000 end
0800124c g     F .text	0000003c get_char_usart
08001ef8  w    F .text	00000002 DMA1_Stream6_IRQHandler
08001ef8  w    F .text	00000002 USART4_IRQHandler
0800130c g     F .text	000001a4 GPIO_clk
00000000  w      *UND*	00000000 _ITM_registerTMCloneTable
08001ef8  w    F .text	00000002 DFSDM2_FILTER3_IRQHandler
08001ef8  w    F .text	00000002 DMA1_Stream1_IRQHandler
08002560 g     F .text	00000088 _free_r
08001ef8  w    F .text	00000002 TIM3_IRQHandler
08001ef8  w    F .text	00000002 RCC_IRQHandler
08001ef8  w    F .text	00000002 UART9_IRQHandler
08001ef8  w    F .text	00000002 TIM8_BRK_TIM12_IRQHandler
0800116c g     F .text	0000004c USART6_GPIO_init
00000200 g       *ABS*	00000000 _Min_Heap_Size
08001ef8 g       .text	00000002 Default_Handler
20000098 g     O .bss	00000001 rxComplete
08001224 g     F .text	00000028 put_char_usart
0800283c g     F .text	00000010 _lseek
08001ef8  w    F .text	00000002 lptim1_OR_it_eit_23_IRQHandler
08001ef8  w    F .text	00000002 EXTI15_10_IRQHandler
08001ef8  w    F .text	00000002 ADC_IRQHandler
08001ef8  w    F .text	00000002 DMA1_Stream7_IRQHandler
08001ef8  w    F .text	00000002 SPI5_IRQHandler
08001928 g     F .text	00000030 GPIO_readpin
08001ef8  w    F .text	00000002 TIM7_IRQHandler
08002760 g     F .text	00000020 _close_r
08001ef8  w    F .text	00000002 CAN2_TX_IRQHandler
08001ef8  w    F .text	00000002 TIM5_IRQHandler
08001ef8  w    F .text	00000002 DMA2_Stream7_IRQHandler
08001ef8  w    F .text	00000002 I2C3_EV_IRQHandler
080014b0 g     F .text	00000334 GPIO_init
08002100 g     F .text	000000d8 __swsetup_r
08001ef8  w    F .text	00000002 EXTI9_5_IRQHandler
08002414 g     F .text	00000074 __sfp
08001ef8  w    F .text	00000002 RTC_WKUP_IRQHandler
080026b4 g     F .text	00000022 __sread
00000000  w      *UND*	00000000 _ITM_deregisterTMCloneTable
080022e0 g     F .text	00000054 _fflush_r
08001ef8  w    F .text	00000002 SPI2_IRQHandler
080028b4 g     O .rodata	00000020 __sf_fake_stdin
08001f48 g     F .text	00000010 memset
08001ef8  w    F .text	00000002 MemManage_Handler
08001e0c g     F .text	0000009c main
08001ef8  w    F .text	00000002 DMA1_Stream0_IRQHandler
08001ef8  w    F .text	00000002 CAN1_TX_IRQHandler
08001ef8  w    F .text	00000002 SVC_Handler
08002732 g     F .text	00000008 __sclose
08001cd4 g     F .text	00000048 GPIO_BoardButtonInit
080025e8 g     F .text	000000ac _malloc_r
0800027c g     F .text	000000b0 RCC_GetPCLK1Value
080019e4 g     F .text	00000028 GPIO_togglepin
08001ef8  w    F .text	00000002 EXTI4_IRQHandler
0800032c g     F .text	000000b0 RCC_GetPCLK2Value
08001144 g     F .text	00000028 USART_ClearFlag
00000000  w      *UND*	00000000 SystemInit
08001ef8  w    F .text	00000002 RNG_IRQHandler
08001d1c g     F .text	0000002e delay
08002894 g     F .text	00000000 _fini
0800088c g     F .text	00000090 USART_transmit
0800273c g     F .text	00000024 _write_r
08001ef8  w    F .text	00000002 I2C1_EVT_IRQHandler
08001ef8  w    F .text	00000002 FSMC_IRQHandler
20000078 g     O .data	00000004 _impure_ptr
08001ef8  w    F .text	00000002 CRYPTO_IRQHandler
080021d8 g     F .text	00000108 __sflush_r
08001ef8  w    F .text	00000002 CAN3_TX_IRQHandler
08001ef8  w    F .text	00000002 DFSDM2_FILTER2_IRQHandler
08001ef8  w    F .text	00000002 TIM2_IRQHandler
08001978 g     F .text	0000004e GPIO_writepin
08001ef8  w    F .text	00000002 TIM1_TRG_COM_TIM11_IRQHandler
08001ef8  w    F .text	00000002 DFSDM2_FILTER4_IRQHandler
20050000 g       .isr_vector	00000000 _estack
08001ef8  w    F .text	00000002 I2CFMP1event_IRQHandler
08001ef8  w    F .text	00000002 EXTI1_IRQHandler
08002878 g     F .text	00000010 _write
2000007c g       .data	00000000 _edata
080006fc g     F .text	00000190 USART_deinit
08001ef8  w    F .text	00000002 TIM6_GLB_IT_DAC1_DAC2_IRQHandler
08001ef8  w    F .text	00000002 EXTI17_RTC_Alarm_IRQHandler
08001c30 g     F .text	000000a4 GPIO_BoardLEDSInit
08001ef8  w    F .text	00000002 USART2_IRQHandler
080026d6 g     F .text	00000038 __swrite
08001ef8  w    F .text	00000002 DFSDM2_FILTER1_IRQHandler
08001ef8  w    F .text	00000002 DFSDM1_FLT0_IRQHandler
0800091c g     F .text	000000a6 USART_receive
08000000 g     O .isr_vector	00000000 g_pfnVectors
08002488 g     F .text	0000003c _fwalk_reent
08000fd0 g     F .text	000000f8 USART_SetBaudRate
080028d4 g     O .rodata	00000020 __sf_fake_stdout
08001ef8  w    F .text	00000002 DMA2_Stream1_IRQHandler
0800284c g     F .text	00000010 _read
08001ef8  w    F .text	00000002 CAN1_SCE_IRQHandler
08001ef8  w    F .text	00000002 FLASH_IRQHandler
080003dc g     F .text	00000010 RCC_GetPLLOutputClock
08001ef8  w    F .text	00000002 I2C2_ERR_IRQHandler
08001ef8  w    F .text	00000002 DMA2_Stream4_IRQHandler
08001ef8  w    F .text	00000002 BusFault_Handler
08001ef8  w    F .text	00000002 USART1_IRQHandler
080024c4 g     F .text	0000009c __smakebuf_r
08001bf4 g     F .text	0000003c GPIO_IRQhandling
08001ef8  w    F .text	00000002 SPI3_IRQHandler
08001ef8  w    F .text	00000002 DMA1_Stream4_IRQHandler
2000009c g     O .bss	00000004 __malloc_sbrk_start
08000be4 g     F .text	00000054 USART_IRQpriorityconfig
200000a0 g     O .bss	00000004 __malloc_free_list
00000000  w      *UND*	00000000 _Jv_RegisterClasses
08001ef8  w    F .text	00000002 I2CFMP1error_IRQHandler
08001288 g     F .text	00000034 setUsartBaud
00000000  w      *UND*	00000000 __register_frame_info
08001ef8  w    F .text	00000002 DMA2_Stream6_IRQHandler
08001ef8  w    F .text	00000002 UART10_IRQHandler
08001ef8  w    F .text	00000002 SAI1_IRQHandler
08001ef8  w    F .text	00000002 DMA1_Stream3_IRQHandler
0800280c g     F .text	00000010 _close



Disassembly of section .text:

080001d8 <deregister_tm_clones>:
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <deregister_tm_clones+0x14>)
 80001da:	4805      	ldr	r0, [pc, #20]	; (80001f0 <deregister_tm_clones+0x18>)
 80001dc:	1a1b      	subs	r3, r3, r0
 80001de:	2b06      	cmp	r3, #6
 80001e0:	d902      	bls.n	80001e8 <deregister_tm_clones+0x10>
 80001e2:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <deregister_tm_clones+0x1c>)
 80001e4:	b103      	cbz	r3, 80001e8 <deregister_tm_clones+0x10>
 80001e6:	4718      	bx	r3
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	2000007f 	.word	0x2000007f
 80001f0:	2000007c 	.word	0x2000007c
 80001f4:	00000000 	.word	0x00000000

080001f8 <register_tm_clones>:
 80001f8:	4905      	ldr	r1, [pc, #20]	; (8000210 <register_tm_clones+0x18>)
 80001fa:	4806      	ldr	r0, [pc, #24]	; (8000214 <register_tm_clones+0x1c>)
 80001fc:	1a09      	subs	r1, r1, r0
 80001fe:	1089      	asrs	r1, r1, #2
 8000200:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000204:	1049      	asrs	r1, r1, #1
 8000206:	d002      	beq.n	800020e <register_tm_clones+0x16>
 8000208:	4b03      	ldr	r3, [pc, #12]	; (8000218 <register_tm_clones+0x20>)
 800020a:	b103      	cbz	r3, 800020e <register_tm_clones+0x16>
 800020c:	4718      	bx	r3
 800020e:	4770      	bx	lr
 8000210:	2000007c 	.word	0x2000007c
 8000214:	2000007c 	.word	0x2000007c
 8000218:	00000000 	.word	0x00000000

0800021c <__do_global_dtors_aux>:
 800021c:	b510      	push	{r4, lr}
 800021e:	4c06      	ldr	r4, [pc, #24]	; (8000238 <__do_global_dtors_aux+0x1c>)
 8000220:	7823      	ldrb	r3, [r4, #0]
 8000222:	b943      	cbnz	r3, 8000236 <__do_global_dtors_aux+0x1a>
 8000224:	f7ff ffd8 	bl	80001d8 <deregister_tm_clones>
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <__do_global_dtors_aux+0x20>)
 800022a:	b113      	cbz	r3, 8000232 <__do_global_dtors_aux+0x16>
 800022c:	4804      	ldr	r0, [pc, #16]	; (8000240 <__do_global_dtors_aux+0x24>)
 800022e:	f3af 8000 	nop.w
 8000232:	2301      	movs	r3, #1
 8000234:	7023      	strb	r3, [r4, #0]
 8000236:	bd10      	pop	{r4, pc}
 8000238:	2000007c 	.word	0x2000007c
 800023c:	00000000 	.word	0x00000000
 8000240:	08002888 	.word	0x08002888

08000244 <frame_dummy>:
 8000244:	b508      	push	{r3, lr}
 8000246:	4b08      	ldr	r3, [pc, #32]	; (8000268 <frame_dummy+0x24>)
 8000248:	b11b      	cbz	r3, 8000252 <frame_dummy+0xe>
 800024a:	4808      	ldr	r0, [pc, #32]	; (800026c <frame_dummy+0x28>)
 800024c:	4908      	ldr	r1, [pc, #32]	; (8000270 <frame_dummy+0x2c>)
 800024e:	f3af 8000 	nop.w
 8000252:	4808      	ldr	r0, [pc, #32]	; (8000274 <frame_dummy+0x30>)
 8000254:	6803      	ldr	r3, [r0, #0]
 8000256:	b913      	cbnz	r3, 800025e <frame_dummy+0x1a>
 8000258:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800025c:	e7cc      	b.n	80001f8 <register_tm_clones>
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <frame_dummy+0x34>)
 8000260:	2b00      	cmp	r3, #0
 8000262:	d0f9      	beq.n	8000258 <frame_dummy+0x14>
 8000264:	4798      	blx	r3
 8000266:	e7f7      	b.n	8000258 <frame_dummy+0x14>
 8000268:	00000000 	.word	0x00000000
 800026c:	08002888 	.word	0x08002888
 8000270:	20000080 	.word	0x20000080
 8000274:	2000007c 	.word	0x2000007c
 8000278:	00000000 	.word	0x00000000

0800027c <RCC_GetPCLK1Value>:
 * @brief	- This function returns PClock 1 value
 *
 * @return	- PClock 1 value
 *****************************************************************/
uint32_t RCC_GetPCLK1Value(void)
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b084      	sub	sp, #16
 8000280:	af00      	add	r7, sp, #0
	uint32_t pclk1, SystemClk;
	uint8_t clksrc, temp, ahbp, apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000282:	4b25      	ldr	r3, [pc, #148]	; (8000318 <RCC_GetPCLK1Value+0x9c>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	089b      	lsrs	r3, r3, #2
 8000288:	b2db      	uxtb	r3, r3
 800028a:	f003 0303 	and.w	r3, r3, #3
 800028e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0){
 8000290:	7a7b      	ldrb	r3, [r7, #9]
 8000292:	2b00      	cmp	r3, #0
 8000294:	d102      	bne.n	800029c <RCC_GetPCLK1Value+0x20>
		SystemClk = 16000000;
 8000296:	4b21      	ldr	r3, [pc, #132]	; (800031c <RCC_GetPCLK1Value+0xa0>)
 8000298:	60fb      	str	r3, [r7, #12]
 800029a:	e00b      	b.n	80002b4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1){
 800029c:	7a7b      	ldrb	r3, [r7, #9]
 800029e:	2b01      	cmp	r3, #1
 80002a0:	d102      	bne.n	80002a8 <RCC_GetPCLK1Value+0x2c>
		SystemClk = 8000000;
 80002a2:	4b1f      	ldr	r3, [pc, #124]	; (8000320 <RCC_GetPCLK1Value+0xa4>)
 80002a4:	60fb      	str	r3, [r7, #12]
 80002a6:	e005      	b.n	80002b4 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2){
 80002a8:	7a7b      	ldrb	r3, [r7, #9]
 80002aa:	2b02      	cmp	r3, #2
 80002ac:	d102      	bne.n	80002b4 <RCC_GetPCLK1Value+0x38>
		SystemClk = RCC_GetPLLOutputClock();
 80002ae:	f000 f895 	bl	80003dc <RCC_GetPLLOutputClock>
 80002b2:	60f8      	str	r0, [r7, #12]
	}

	/* AHB */
	temp = ((RCC->CFGR >> 4) & 0xF);
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <RCC_GetPCLK1Value+0x9c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	b2db      	uxtb	r3, r3
 80002bc:	f003 030f 	and.w	r3, r3, #15
 80002c0:	723b      	strb	r3, [r7, #8]

	if(temp < 8){
 80002c2:	7a3b      	ldrb	r3, [r7, #8]
 80002c4:	2b07      	cmp	r3, #7
 80002c6:	d802      	bhi.n	80002ce <RCC_GetPCLK1Value+0x52>
		ahbp = 1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	72fb      	strb	r3, [r7, #11]
 80002cc:	e005      	b.n	80002da <RCC_GetPCLK1Value+0x5e>
	}else{
		ahbp = AHB_Prescaler[temp-8];
 80002ce:	7a3b      	ldrb	r3, [r7, #8]
 80002d0:	3b08      	subs	r3, #8
 80002d2:	4a14      	ldr	r2, [pc, #80]	; (8000324 <RCC_GetPCLK1Value+0xa8>)
 80002d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d8:	72fb      	strb	r3, [r7, #11]
	}

	/* APB1 */
	temp = ((RCC->CFGR >> 10) & 0x7);
 80002da:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <RCC_GetPCLK1Value+0x9c>)
 80002dc:	689b      	ldr	r3, [r3, #8]
 80002de:	0a9b      	lsrs	r3, r3, #10
 80002e0:	b2db      	uxtb	r3, r3
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	723b      	strb	r3, [r7, #8]

	if(temp < 4){
 80002e8:	7a3b      	ldrb	r3, [r7, #8]
 80002ea:	2b03      	cmp	r3, #3
 80002ec:	d802      	bhi.n	80002f4 <RCC_GetPCLK1Value+0x78>
		apb1p = 1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	72bb      	strb	r3, [r7, #10]
 80002f2:	e004      	b.n	80002fe <RCC_GetPCLK1Value+0x82>
	}else{
		apb1p = APBx_Prescaler[temp-4];
 80002f4:	7a3b      	ldrb	r3, [r7, #8]
 80002f6:	3b04      	subs	r3, #4
 80002f8:	4a0b      	ldr	r2, [pc, #44]	; (8000328 <RCC_GetPCLK1Value+0xac>)
 80002fa:	5cd3      	ldrb	r3, [r2, r3]
 80002fc:	72bb      	strb	r3, [r7, #10]
	}
	pclk1 = (SystemClk / ahbp) / apb1p;
 80002fe:	7afb      	ldrb	r3, [r7, #11]
 8000300:	68fa      	ldr	r2, [r7, #12]
 8000302:	fbb2 f2f3 	udiv	r2, r2, r3
 8000306:	7abb      	ldrb	r3, [r7, #10]
 8000308:	fbb2 f3f3 	udiv	r3, r2, r3
 800030c:	607b      	str	r3, [r7, #4]

	return pclk1;
 800030e:	687b      	ldr	r3, [r7, #4]
}
 8000310:	4618      	mov	r0, r3
 8000312:	3710      	adds	r7, #16
 8000314:	46bd      	mov	sp, r7
 8000316:	bd80      	pop	{r7, pc}
 8000318:	40023800 	.word	0x40023800
 800031c:	00f42400 	.word	0x00f42400
 8000320:	007a1200 	.word	0x007a1200
 8000324:	20000000 	.word	0x20000000
 8000328:	20000014 	.word	0x20000014

0800032c <RCC_GetPCLK2Value>:
 * @brief	- This function returns PClock 2 value
 *
 * @return	- PClock 2 value
 *****************************************************************/
uint32_t RCC_GetPCLK2Value(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b084      	sub	sp, #16
 8000330:	af00      	add	r7, sp, #0
	uint32_t SystemClk = 0, temp, pclk2;
 8000332:	2300      	movs	r3, #0
 8000334:	60fb      	str	r3, [r7, #12]

	uint8_t clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000336:	4b24      	ldr	r3, [pc, #144]	; (80003c8 <RCC_GetPCLK2Value+0x9c>)
 8000338:	689b      	ldr	r3, [r3, #8]
 800033a:	089b      	lsrs	r3, r3, #2
 800033c:	b2db      	uxtb	r3, r3
 800033e:	f003 0303 	and.w	r3, r3, #3
 8000342:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clksrc == 0){
 8000344:	7a7b      	ldrb	r3, [r7, #9]
 8000346:	2b00      	cmp	r3, #0
 8000348:	d102      	bne.n	8000350 <RCC_GetPCLK2Value+0x24>
		SystemClk = 16000000;
 800034a:	4b20      	ldr	r3, [pc, #128]	; (80003cc <RCC_GetPCLK2Value+0xa0>)
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	e00b      	b.n	8000368 <RCC_GetPCLK2Value+0x3c>
	}else if(clksrc == 1){
 8000350:	7a7b      	ldrb	r3, [r7, #9]
 8000352:	2b01      	cmp	r3, #1
 8000354:	d102      	bne.n	800035c <RCC_GetPCLK2Value+0x30>
		SystemClk = 8000000;
 8000356:	4b1e      	ldr	r3, [pc, #120]	; (80003d0 <RCC_GetPCLK2Value+0xa4>)
 8000358:	60fb      	str	r3, [r7, #12]
 800035a:	e005      	b.n	8000368 <RCC_GetPCLK2Value+0x3c>
	}else if(clksrc == 2){
 800035c:	7a7b      	ldrb	r3, [r7, #9]
 800035e:	2b02      	cmp	r3, #2
 8000360:	d102      	bne.n	8000368 <RCC_GetPCLK2Value+0x3c>
		SystemClk = RCC_GetPLLOutputClock();
 8000362:	f000 f83b 	bl	80003dc <RCC_GetPLLOutputClock>
 8000366:	60f8      	str	r0, [r7, #12]
	}

	/* AHBP */
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <RCC_GetPCLK2Value+0x9c>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	091b      	lsrs	r3, r3, #4
 800036e:	f003 030f 	and.w	r3, r3, #15
 8000372:	607b      	str	r3, [r7, #4]

	if(temp < 8){
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	2b07      	cmp	r3, #7
 8000378:	d802      	bhi.n	8000380 <RCC_GetPCLK2Value+0x54>
		ahbp = 1;
 800037a:	2301      	movs	r3, #1
 800037c:	72fb      	strb	r3, [r7, #11]
 800037e:	e005      	b.n	800038c <RCC_GetPCLK2Value+0x60>
	}else{
		ahbp = AHB_Prescaler[temp-8];
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	3b08      	subs	r3, #8
 8000384:	4a13      	ldr	r2, [pc, #76]	; (80003d4 <RCC_GetPCLK2Value+0xa8>)
 8000386:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800038a:	72fb      	strb	r3, [r7, #11]
	}

	/* APB2 */
	temp = ((RCC->CFGR >> 13) & 0x7);
 800038c:	4b0e      	ldr	r3, [pc, #56]	; (80003c8 <RCC_GetPCLK2Value+0x9c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	0b5b      	lsrs	r3, r3, #13
 8000392:	f003 0307 	and.w	r3, r3, #7
 8000396:	607b      	str	r3, [r7, #4]

	if(temp < 4){
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	2b03      	cmp	r3, #3
 800039c:	d802      	bhi.n	80003a4 <RCC_GetPCLK2Value+0x78>
		apb2p = 1;
 800039e:	2301      	movs	r3, #1
 80003a0:	72bb      	strb	r3, [r7, #10]
 80003a2:	e004      	b.n	80003ae <RCC_GetPCLK2Value+0x82>
	}else{
		apb2p = APBx_Prescaler[temp-4];
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	3b04      	subs	r3, #4
 80003a8:	4a0b      	ldr	r2, [pc, #44]	; (80003d8 <RCC_GetPCLK2Value+0xac>)
 80003aa:	5cd3      	ldrb	r3, [r2, r3]
 80003ac:	72bb      	strb	r3, [r7, #10]
	}
	pclk2 = (SystemClk / ahbp) / apb2p;
 80003ae:	7afb      	ldrb	r3, [r7, #11]
 80003b0:	68fa      	ldr	r2, [r7, #12]
 80003b2:	fbb2 f2f3 	udiv	r2, r2, r3
 80003b6:	7abb      	ldrb	r3, [r7, #10]
 80003b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80003bc:	603b      	str	r3, [r7, #0]

	return pclk2;
 80003be:	683b      	ldr	r3, [r7, #0]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3710      	adds	r7, #16
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	40023800 	.word	0x40023800
 80003cc:	00f42400 	.word	0x00f42400
 80003d0:	007a1200 	.word	0x007a1200
 80003d4:	20000000 	.word	0x20000000
 80003d8:	20000014 	.word	0x20000014

080003dc <RCC_GetPLLOutputClock>:
 * @brief	- This function returns PLL output value
 *
 * @return	- PLL output value
 *****************************************************************/
uint32_t RCC_GetPLLOutputClock(void)
{	/* Not defined for now */
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
	return 0;
 80003e0:	2300      	movs	r3, #0
}
 80003e2:	4618      	mov	r0, r3
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <USART_clk>:
 * 			clock for the given USART port
 * @param[*pUSARTx] - Pointer to the Register Definition of the Specified USART
 * @param[enable_disable] - Macro to ENABLE or DISABLE the Clock (EnorDi)
 ****************************************************************************/
void USART_clk(USART_RegDef_t *pUSARTx, uint8_t enable_disable)
{
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	460b      	mov	r3, r1
 80003f6:	70fb      	strb	r3, [r7, #3]
	if (enable_disable == ENABLE) {
 80003f8:	78fb      	ldrb	r3, [r7, #3]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d16d      	bne.n	80004da <USART_clk+0xee>
		if(pUSARTx == USART1)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a70      	ldr	r2, [pc, #448]	; (80005c4 <USART_clk+0x1d8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <USART_clk+0x28>
		{
			USART1_PCLK_EN();
 8000406:	4a70      	ldr	r2, [pc, #448]	; (80005c8 <USART_clk+0x1dc>)
 8000408:	4b6f      	ldr	r3, [pc, #444]	; (80005c8 <USART_clk+0x1dc>)
 800040a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800040c:	f043 0310 	orr.w	r3, r3, #16
 8000410:	6453      	str	r3, [r2, #68]	; 0x44
 8000412:	e0d2      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART2)
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a6d      	ldr	r2, [pc, #436]	; (80005cc <USART_clk+0x1e0>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <USART_clk+0x3e>
		{
			USART2_PCLK_EN();
 800041c:	4a6a      	ldr	r2, [pc, #424]	; (80005c8 <USART_clk+0x1dc>)
 800041e:	4b6a      	ldr	r3, [pc, #424]	; (80005c8 <USART_clk+0x1dc>)
 8000420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000422:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000426:	6413      	str	r3, [r2, #64]	; 0x40
 8000428:	e0c7      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART3)
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a68      	ldr	r2, [pc, #416]	; (80005d0 <USART_clk+0x1e4>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <USART_clk+0x54>
		{
			USART3_PCLK_EN();
 8000432:	4a65      	ldr	r2, [pc, #404]	; (80005c8 <USART_clk+0x1dc>)
 8000434:	4b64      	ldr	r3, [pc, #400]	; (80005c8 <USART_clk+0x1dc>)
 8000436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000438:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800043c:	6413      	str	r3, [r2, #64]	; 0x40
 800043e:	e0bc      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART4)
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a64      	ldr	r2, [pc, #400]	; (80005d4 <USART_clk+0x1e8>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <USART_clk+0x6a>
		{
			UART4_PCLK_EN();
 8000448:	4a5f      	ldr	r2, [pc, #380]	; (80005c8 <USART_clk+0x1dc>)
 800044a:	4b5f      	ldr	r3, [pc, #380]	; (80005c8 <USART_clk+0x1dc>)
 800044c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800044e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000452:	6413      	str	r3, [r2, #64]	; 0x40
 8000454:	e0b1      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART5)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a5f      	ldr	r2, [pc, #380]	; (80005d8 <USART_clk+0x1ec>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <USART_clk+0x80>
		{
			UART5_PCLK_EN();
 800045e:	4a5a      	ldr	r2, [pc, #360]	; (80005c8 <USART_clk+0x1dc>)
 8000460:	4b59      	ldr	r3, [pc, #356]	; (80005c8 <USART_clk+0x1dc>)
 8000462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000464:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000468:	6413      	str	r3, [r2, #64]	; 0x40
 800046a:	e0a6      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART6)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a5b      	ldr	r2, [pc, #364]	; (80005dc <USART_clk+0x1f0>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d106      	bne.n	8000482 <USART_clk+0x96>
		{
			USART6_PCLK_EN();
 8000474:	4a54      	ldr	r2, [pc, #336]	; (80005c8 <USART_clk+0x1dc>)
 8000476:	4b54      	ldr	r3, [pc, #336]	; (80005c8 <USART_clk+0x1dc>)
 8000478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800047a:	f043 0320 	orr.w	r3, r3, #32
 800047e:	6453      	str	r3, [r2, #68]	; 0x44
 8000480:	e09b      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART7)
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	4a56      	ldr	r2, [pc, #344]	; (80005e0 <USART_clk+0x1f4>)
 8000486:	4293      	cmp	r3, r2
 8000488:	d106      	bne.n	8000498 <USART_clk+0xac>
		{
			UART7_PCLK_EN();
 800048a:	4a4f      	ldr	r2, [pc, #316]	; (80005c8 <USART_clk+0x1dc>)
 800048c:	4b4e      	ldr	r3, [pc, #312]	; (80005c8 <USART_clk+0x1dc>)
 800048e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000490:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000494:	6413      	str	r3, [r2, #64]	; 0x40
 8000496:	e090      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART8)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4a52      	ldr	r2, [pc, #328]	; (80005e4 <USART_clk+0x1f8>)
 800049c:	4293      	cmp	r3, r2
 800049e:	d106      	bne.n	80004ae <USART_clk+0xc2>
		{
			UART8_PCLK_EN();
 80004a0:	4a49      	ldr	r2, [pc, #292]	; (80005c8 <USART_clk+0x1dc>)
 80004a2:	4b49      	ldr	r3, [pc, #292]	; (80005c8 <USART_clk+0x1dc>)
 80004a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80004aa:	6413      	str	r3, [r2, #64]	; 0x40
 80004ac:	e085      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART9)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	4a4d      	ldr	r2, [pc, #308]	; (80005e8 <USART_clk+0x1fc>)
 80004b2:	4293      	cmp	r3, r2
 80004b4:	d106      	bne.n	80004c4 <USART_clk+0xd8>
		{
			UART9_PCLK_EN();
 80004b6:	4a44      	ldr	r2, [pc, #272]	; (80005c8 <USART_clk+0x1dc>)
 80004b8:	4b43      	ldr	r3, [pc, #268]	; (80005c8 <USART_clk+0x1dc>)
 80004ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004c0:	6453      	str	r3, [r2, #68]	; 0x44
 80004c2:	e07a      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART10)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4a49      	ldr	r2, [pc, #292]	; (80005ec <USART_clk+0x200>)
 80004c8:	4293      	cmp	r3, r2
 80004ca:	d176      	bne.n	80005ba <USART_clk+0x1ce>
		{
			UART10_PCLK_EN();
 80004cc:	4a3e      	ldr	r2, [pc, #248]	; (80005c8 <USART_clk+0x1dc>)
 80004ce:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <USART_clk+0x1dc>)
 80004d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80004d6:	6453      	str	r3, [r2, #68]	; 0x44
 80004d8:	e06f      	b.n	80005ba <USART_clk+0x1ce>
		}
	}else if(enable_disable == DISABLE){
 80004da:	78fb      	ldrb	r3, [r7, #3]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d16c      	bne.n	80005ba <USART_clk+0x1ce>
		if(pUSARTx == USART1)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a38      	ldr	r2, [pc, #224]	; (80005c4 <USART_clk+0x1d8>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <USART_clk+0x10a>
		{
			USART1_PCLK_DI();
 80004e8:	4a37      	ldr	r2, [pc, #220]	; (80005c8 <USART_clk+0x1dc>)
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <USART_clk+0x1dc>)
 80004ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004ee:	f023 0310 	bic.w	r3, r3, #16
 80004f2:	6453      	str	r3, [r2, #68]	; 0x44
 80004f4:	e061      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART2)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a34      	ldr	r2, [pc, #208]	; (80005cc <USART_clk+0x1e0>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <USART_clk+0x120>
		{
			USART2_PCLK_DI();
 80004fe:	4a32      	ldr	r2, [pc, #200]	; (80005c8 <USART_clk+0x1dc>)
 8000500:	4b31      	ldr	r3, [pc, #196]	; (80005c8 <USART_clk+0x1dc>)
 8000502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000504:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000508:	6413      	str	r3, [r2, #64]	; 0x40
 800050a:	e056      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART3)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a30      	ldr	r2, [pc, #192]	; (80005d0 <USART_clk+0x1e4>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d106      	bne.n	8000522 <USART_clk+0x136>
		{
			USART3_PCLK_DI();
 8000514:	4a2c      	ldr	r2, [pc, #176]	; (80005c8 <USART_clk+0x1dc>)
 8000516:	4b2c      	ldr	r3, [pc, #176]	; (80005c8 <USART_clk+0x1dc>)
 8000518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800051a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800051e:	6413      	str	r3, [r2, #64]	; 0x40
 8000520:	e04b      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART4)
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	4a2b      	ldr	r2, [pc, #172]	; (80005d4 <USART_clk+0x1e8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d106      	bne.n	8000538 <USART_clk+0x14c>
		{
			UART4_PCLK_DI();
 800052a:	4a27      	ldr	r2, [pc, #156]	; (80005c8 <USART_clk+0x1dc>)
 800052c:	4b26      	ldr	r3, [pc, #152]	; (80005c8 <USART_clk+0x1dc>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000530:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000534:	6413      	str	r3, [r2, #64]	; 0x40
 8000536:	e040      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART5)
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <USART_clk+0x1ec>)
 800053c:	4293      	cmp	r3, r2
 800053e:	d106      	bne.n	800054e <USART_clk+0x162>
		{
			UART5_PCLK_DI();
 8000540:	4a21      	ldr	r2, [pc, #132]	; (80005c8 <USART_clk+0x1dc>)
 8000542:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <USART_clk+0x1dc>)
 8000544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000546:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	e035      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == USART6)
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	4a22      	ldr	r2, [pc, #136]	; (80005dc <USART_clk+0x1f0>)
 8000552:	4293      	cmp	r3, r2
 8000554:	d106      	bne.n	8000564 <USART_clk+0x178>
		{
			USART6_PCLK_DI();
 8000556:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <USART_clk+0x1dc>)
 8000558:	4b1b      	ldr	r3, [pc, #108]	; (80005c8 <USART_clk+0x1dc>)
 800055a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800055c:	f023 0320 	bic.w	r3, r3, #32
 8000560:	6453      	str	r3, [r2, #68]	; 0x44
 8000562:	e02a      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART7)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	4a1e      	ldr	r2, [pc, #120]	; (80005e0 <USART_clk+0x1f4>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d106      	bne.n	800057a <USART_clk+0x18e>
		{
			UART7_PCLK_DI();
 800056c:	4a16      	ldr	r2, [pc, #88]	; (80005c8 <USART_clk+0x1dc>)
 800056e:	4b16      	ldr	r3, [pc, #88]	; (80005c8 <USART_clk+0x1dc>)
 8000570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000576:	6413      	str	r3, [r2, #64]	; 0x40
 8000578:	e01f      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART8)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	4a19      	ldr	r2, [pc, #100]	; (80005e4 <USART_clk+0x1f8>)
 800057e:	4293      	cmp	r3, r2
 8000580:	d106      	bne.n	8000590 <USART_clk+0x1a4>
		{
			UART8_PCLK_DI();
 8000582:	4a11      	ldr	r2, [pc, #68]	; (80005c8 <USART_clk+0x1dc>)
 8000584:	4b10      	ldr	r3, [pc, #64]	; (80005c8 <USART_clk+0x1dc>)
 8000586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800058c:	6413      	str	r3, [r2, #64]	; 0x40
 800058e:	e014      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART9)
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <USART_clk+0x1fc>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d106      	bne.n	80005a6 <USART_clk+0x1ba>
		{
			UART9_PCLK_DI();
 8000598:	4a0b      	ldr	r2, [pc, #44]	; (80005c8 <USART_clk+0x1dc>)
 800059a:	4b0b      	ldr	r3, [pc, #44]	; (80005c8 <USART_clk+0x1dc>)
 800059c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800059e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005a2:	6453      	str	r3, [r2, #68]	; 0x44
 80005a4:	e009      	b.n	80005ba <USART_clk+0x1ce>
		}else if (pUSARTx == UART10)
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a10      	ldr	r2, [pc, #64]	; (80005ec <USART_clk+0x200>)
 80005aa:	4293      	cmp	r3, r2
 80005ac:	d105      	bne.n	80005ba <USART_clk+0x1ce>
		{
			UART10_PCLK_DI();
 80005ae:	4a06      	ldr	r2, [pc, #24]	; (80005c8 <USART_clk+0x1dc>)
 80005b0:	4b05      	ldr	r3, [pc, #20]	; (80005c8 <USART_clk+0x1dc>)
 80005b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80005b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005b8:	6453      	str	r3, [r2, #68]	; 0x44
		}
	}
}
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c2:	4770      	bx	lr
 80005c4:	40011000 	.word	0x40011000
 80005c8:	40023800 	.word	0x40023800
 80005cc:	40004400 	.word	0x40004400
 80005d0:	40004800 	.word	0x40004800
 80005d4:	40004c00 	.word	0x40004c00
 80005d8:	40005000 	.word	0x40005000
 80005dc:	40011400 	.word	0x40011400
 80005e0:	40007800 	.word	0x40007800
 80005e4:	40007c00 	.word	0x40007c00
 80005e8:	40011800 	.word	0x40011800
 80005ec:	40011c00 	.word	0x40011c00

080005f0 <USART_init>:
 *
 * @brief	- This function initializes the given USART pin structure
 *
 * @param[pUSARTHandle] - Pointer to USART Handle structure
 *****************************************************************/
void USART_init(USART_Handle_t *pUSARTHandle){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b084      	sub	sp, #16
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	//START THE CLOCK, DONT LEAVE IT UN-INITIALIZED
	USART_clk(pUSARTHandle->pUSARTx, ENABLE);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4618      	mov	r0, r3
 80005fe:	2101      	movs	r1, #1
 8000600:	f7ff fef4 	bl	80003ec <USART_clk>

	//Temporary variable
	uint32_t tempreg = 0;
 8000604:	2300      	movs	r3, #0
 8000606:	60fb      	str	r3, [r7, #12]
/******************************** Configuration of CR1******************************************/
	//1. Set the mode in the TE and RE bits on the CR1
	//Enable USART Tx and Rx blocks according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	791b      	ldrb	r3, [r3, #4]
 800060c:	2b01      	cmp	r3, #1
 800060e:	d104      	bne.n	800061a <USART_init+0x2a>
	{//Enable the Receiver bit field
		tempreg |= ( 1 << USART_CR1_RE );
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	e010      	b.n	800063c <USART_init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	791b      	ldrb	r3, [r3, #4]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d104      	bne.n	800062c <USART_init+0x3c>
	{//Enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	f043 0308 	orr.w	r3, r3, #8
 8000628:	60fb      	str	r3, [r7, #12]
 800062a:	e007      	b.n	800063c <USART_init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	2b02      	cmp	r3, #2
 8000632:	d103      	bne.n	800063c <USART_init+0x4c>
	{//Enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	f043 030c 	orr.w	r3, r3, #12
 800063a:	60fb      	str	r3, [r7, #12]
	}
	//2. Set the parity bit with th parity bits at CR1
    //Configuration of Parity Control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	7b9b      	ldrb	r3, [r3, #14]
 8000640:	2b01      	cmp	r3, #1
 8000642:	d104      	bne.n	800064e <USART_init+0x5e>
	{//Enable the Parity Control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	e00b      	b.n	8000666 <USART_init+0x76>
		//EVEN Parity is Selected by default (0)
	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	7b9b      	ldrb	r3, [r3, #14]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d107      	bne.n	8000666 <USART_init+0x76>
	{//Enable the Parity Control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800065c:	60fb      	str	r3, [r7, #12]
	    //Select ODD Parity
	    tempreg |= ( 1 << USART_CR1_PS);
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000664:	60fb      	str	r3, [r7, #12]
	}

	//3. Set the word length with the M bit at CR1
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	7b5b      	ldrb	r3, [r3, #13]
 800066a:	031b      	lsls	r3, r3, #12
 800066c:	461a      	mov	r2, r3
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]

	//extra. set the oversampling mode over16=0, over8=1
	tempreg |= pUSARTHandle->USART_Config.USART_Oversampling << USART_CR1_OVER8;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	795b      	ldrb	r3, [r3, #5]
 8000678:	03db      	lsls	r3, r3, #15
 800067a:	461a      	mov	r2, r3
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	4313      	orrs	r3, r2
 8000680:	60fb      	str	r3, [r7, #12]

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	60da      	str	r2, [r3, #12]
/******************************** Configuration of CR2******************************************/
	tempreg = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]

	//4. Set the stop bits
	//Configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	7b1b      	ldrb	r3, [r3, #12]
 8000692:	02db      	lsls	r3, r3, #11
 8000694:	461a      	mov	r2, r3
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	4313      	orrs	r3, r2
 800069a:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	68fa      	ldr	r2, [r7, #12]
 80006a2:	611a      	str	r2, [r3, #16]
/******************************** Configuration of CR3******************************************/
	tempreg = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	7bdb      	ldrb	r3, [r3, #15]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d104      	bne.n	80006ba <USART_init+0xca>
	{//Enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	e010      	b.n	80006dc <USART_init+0xec>
	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7bdb      	ldrb	r3, [r3, #15]
 80006be:	2b02      	cmp	r3, #2
 80006c0:	d104      	bne.n	80006cc <USART_init+0xdc>
	{//Enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c8:	60fb      	str	r3, [r7, #12]
 80006ca:	e007      	b.n	80006dc <USART_init+0xec>
	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7bdb      	ldrb	r3, [r3, #15]
 80006d0:	2b03      	cmp	r3, #3
 80006d2:	d103      	bne.n	80006dc <USART_init+0xec>
	{//Enable both CTS and RTS Flow control
		tempreg |= ( ( 1 << USART_CR3_CTSE) | ( 1 << USART_CR3_RTSE) );
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80006da:	60fb      	str	r3, [r7, #12]
	}
	//Program the CR3 register
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	68fa      	ldr	r2, [r7, #12]
 80006e2:	615a      	str	r2, [r3, #20]
/******************************** Configuration of BRR(Baudrate register)******************************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681a      	ldr	r2, [r3, #0]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	689b      	ldr	r3, [r3, #8]
 80006ec:	4610      	mov	r0, r2
 80006ee:	4619      	mov	r1, r3
 80006f0:	f000 fc6e 	bl	8000fd0 <USART_SetBaudRate>
}
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop

080006fc <USART_deinit>:
 * @brief	- This function de-initialize the given USART peripheral
 *
 * @param[pUSARTx] - Base address of the USART peripheral
 *****************************************************************/
void USART_deinit(USART_RegDef_t *pUSARTx)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if(pUSARTx == USART1)
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	4a56      	ldr	r2, [pc, #344]	; (8000860 <USART_deinit+0x164>)
 8000708:	4293      	cmp	r3, r2
 800070a:	d10c      	bne.n	8000726 <USART_deinit+0x2a>
	{
		USART1_REG_RESET();
 800070c:	4a55      	ldr	r2, [pc, #340]	; (8000864 <USART_deinit+0x168>)
 800070e:	4b55      	ldr	r3, [pc, #340]	; (8000864 <USART_deinit+0x168>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	6253      	str	r3, [r2, #36]	; 0x24
 8000718:	4a52      	ldr	r2, [pc, #328]	; (8000864 <USART_deinit+0x168>)
 800071a:	4b52      	ldr	r3, [pc, #328]	; (8000864 <USART_deinit+0x168>)
 800071c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800071e:	f023 0310 	bic.w	r3, r3, #16
 8000722:	6253      	str	r3, [r2, #36]	; 0x24
 8000724:	e097      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == USART2)
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	4a4f      	ldr	r2, [pc, #316]	; (8000868 <USART_deinit+0x16c>)
 800072a:	4293      	cmp	r3, r2
 800072c:	d10c      	bne.n	8000748 <USART_deinit+0x4c>
	{
		USART2_REG_RESET();
 800072e:	4a4d      	ldr	r2, [pc, #308]	; (8000864 <USART_deinit+0x168>)
 8000730:	4b4c      	ldr	r3, [pc, #304]	; (8000864 <USART_deinit+0x168>)
 8000732:	6a1b      	ldr	r3, [r3, #32]
 8000734:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000738:	6213      	str	r3, [r2, #32]
 800073a:	4a4a      	ldr	r2, [pc, #296]	; (8000864 <USART_deinit+0x168>)
 800073c:	4b49      	ldr	r3, [pc, #292]	; (8000864 <USART_deinit+0x168>)
 800073e:	6a1b      	ldr	r3, [r3, #32]
 8000740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000744:	6213      	str	r3, [r2, #32]
 8000746:	e086      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == USART3)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	4a48      	ldr	r2, [pc, #288]	; (800086c <USART_deinit+0x170>)
 800074c:	4293      	cmp	r3, r2
 800074e:	d10c      	bne.n	800076a <USART_deinit+0x6e>
	{
		USART3_REG_RESET();
 8000750:	4a44      	ldr	r2, [pc, #272]	; (8000864 <USART_deinit+0x168>)
 8000752:	4b44      	ldr	r3, [pc, #272]	; (8000864 <USART_deinit+0x168>)
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800075a:	6213      	str	r3, [r2, #32]
 800075c:	4a41      	ldr	r2, [pc, #260]	; (8000864 <USART_deinit+0x168>)
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <USART_deinit+0x168>)
 8000760:	6a1b      	ldr	r3, [r3, #32]
 8000762:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000766:	6213      	str	r3, [r2, #32]
 8000768:	e075      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART4)
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4a40      	ldr	r2, [pc, #256]	; (8000870 <USART_deinit+0x174>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d10c      	bne.n	800078c <USART_deinit+0x90>
	{
		UART4_REG_RESET();
 8000772:	4a3c      	ldr	r2, [pc, #240]	; (8000864 <USART_deinit+0x168>)
 8000774:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <USART_deinit+0x168>)
 8000776:	6a1b      	ldr	r3, [r3, #32]
 8000778:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800077c:	6213      	str	r3, [r2, #32]
 800077e:	4a39      	ldr	r2, [pc, #228]	; (8000864 <USART_deinit+0x168>)
 8000780:	4b38      	ldr	r3, [pc, #224]	; (8000864 <USART_deinit+0x168>)
 8000782:	6a1b      	ldr	r3, [r3, #32]
 8000784:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000788:	6213      	str	r3, [r2, #32]
 800078a:	e064      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART5)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a39      	ldr	r2, [pc, #228]	; (8000874 <USART_deinit+0x178>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d10c      	bne.n	80007ae <USART_deinit+0xb2>
	{
		UART5_REG_RESET();
 8000794:	4a33      	ldr	r2, [pc, #204]	; (8000864 <USART_deinit+0x168>)
 8000796:	4b33      	ldr	r3, [pc, #204]	; (8000864 <USART_deinit+0x168>)
 8000798:	6a1b      	ldr	r3, [r3, #32]
 800079a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800079e:	6213      	str	r3, [r2, #32]
 80007a0:	4a30      	ldr	r2, [pc, #192]	; (8000864 <USART_deinit+0x168>)
 80007a2:	4b30      	ldr	r3, [pc, #192]	; (8000864 <USART_deinit+0x168>)
 80007a4:	6a1b      	ldr	r3, [r3, #32]
 80007a6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80007aa:	6213      	str	r3, [r2, #32]
 80007ac:	e053      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == USART6)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a31      	ldr	r2, [pc, #196]	; (8000878 <USART_deinit+0x17c>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d10c      	bne.n	80007d0 <USART_deinit+0xd4>
	{
		USART6_REG_RESET();
 80007b6:	4a2b      	ldr	r2, [pc, #172]	; (8000864 <USART_deinit+0x168>)
 80007b8:	4b2a      	ldr	r3, [pc, #168]	; (8000864 <USART_deinit+0x168>)
 80007ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007bc:	f043 0320 	orr.w	r3, r3, #32
 80007c0:	6253      	str	r3, [r2, #36]	; 0x24
 80007c2:	4a28      	ldr	r2, [pc, #160]	; (8000864 <USART_deinit+0x168>)
 80007c4:	4b27      	ldr	r3, [pc, #156]	; (8000864 <USART_deinit+0x168>)
 80007c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c8:	f023 0320 	bic.w	r3, r3, #32
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24
 80007ce:	e042      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART7)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4a2a      	ldr	r2, [pc, #168]	; (800087c <USART_deinit+0x180>)
 80007d4:	4293      	cmp	r3, r2
 80007d6:	d10c      	bne.n	80007f2 <USART_deinit+0xf6>
	{
		UART7_REG_RESET();
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <USART_deinit+0x168>)
 80007da:	4b22      	ldr	r3, [pc, #136]	; (8000864 <USART_deinit+0x168>)
 80007dc:	6a1b      	ldr	r3, [r3, #32]
 80007de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80007e2:	6213      	str	r3, [r2, #32]
 80007e4:	4a1f      	ldr	r2, [pc, #124]	; (8000864 <USART_deinit+0x168>)
 80007e6:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <USART_deinit+0x168>)
 80007e8:	6a1b      	ldr	r3, [r3, #32]
 80007ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80007ee:	6213      	str	r3, [r2, #32]
 80007f0:	e031      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART8)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a22      	ldr	r2, [pc, #136]	; (8000880 <USART_deinit+0x184>)
 80007f6:	4293      	cmp	r3, r2
 80007f8:	d10c      	bne.n	8000814 <USART_deinit+0x118>
	{
		UART8_REG_RESET();
 80007fa:	4a1a      	ldr	r2, [pc, #104]	; (8000864 <USART_deinit+0x168>)
 80007fc:	4b19      	ldr	r3, [pc, #100]	; (8000864 <USART_deinit+0x168>)
 80007fe:	6a1b      	ldr	r3, [r3, #32]
 8000800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000804:	6213      	str	r3, [r2, #32]
 8000806:	4a17      	ldr	r2, [pc, #92]	; (8000864 <USART_deinit+0x168>)
 8000808:	4b16      	ldr	r3, [pc, #88]	; (8000864 <USART_deinit+0x168>)
 800080a:	6a1b      	ldr	r3, [r3, #32]
 800080c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8000810:	6213      	str	r3, [r2, #32]
 8000812:	e020      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART9)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a1b      	ldr	r2, [pc, #108]	; (8000884 <USART_deinit+0x188>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d10c      	bne.n	8000836 <USART_deinit+0x13a>
	{
		UART9_REG_RESET();
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <USART_deinit+0x168>)
 800081e:	4b11      	ldr	r3, [pc, #68]	; (8000864 <USART_deinit+0x168>)
 8000820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000822:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000826:	6253      	str	r3, [r2, #36]	; 0x24
 8000828:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <USART_deinit+0x168>)
 800082a:	4b0e      	ldr	r3, [pc, #56]	; (8000864 <USART_deinit+0x168>)
 800082c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800082e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000832:	6253      	str	r3, [r2, #36]	; 0x24
 8000834:	e00f      	b.n	8000856 <USART_deinit+0x15a>
	}else if (pUSARTx == UART10)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a13      	ldr	r2, [pc, #76]	; (8000888 <USART_deinit+0x18c>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d10b      	bne.n	8000856 <USART_deinit+0x15a>
	{
		UART10_REG_RESET();
 800083e:	4a09      	ldr	r2, [pc, #36]	; (8000864 <USART_deinit+0x168>)
 8000840:	4b08      	ldr	r3, [pc, #32]	; (8000864 <USART_deinit+0x168>)
 8000842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000844:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000848:	6253      	str	r3, [r2, #36]	; 0x24
 800084a:	4a06      	ldr	r2, [pc, #24]	; (8000864 <USART_deinit+0x168>)
 800084c:	4b05      	ldr	r3, [pc, #20]	; (8000864 <USART_deinit+0x168>)
 800084e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000850:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000854:	6253      	str	r3, [r2, #36]	; 0x24
	}
}
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr
 8000860:	40011000 	.word	0x40011000
 8000864:	40023800 	.word	0x40023800
 8000868:	40004400 	.word	0x40004400
 800086c:	40004800 	.word	0x40004800
 8000870:	40004c00 	.word	0x40004c00
 8000874:	40005000 	.word	0x40005000
 8000878:	40011400 	.word	0x40011400
 800087c:	40007800 	.word	0x40007800
 8000880:	40007c00 	.word	0x40007c00
 8000884:	40011800 	.word	0x40011800
 8000888:	40011c00 	.word	0x40011c00

0800088c <USART_transmit>:
 *
 * @param[pUSARTHandle] - Base address of the USART peripheral
 * @param[pTxBuffer] - Transmit buffer
 * @param[len] - Length of transmit buffer
 *****************************************************************/
void USART_transmit(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len){
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	//Loop over until len number of bytes are transferred
	for(uint32_t i = 0 ; i < len; i++){
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]
 800089c:	e02d      	b.n	80008fa <USART_transmit+0x6e>
		//Wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TXE));
 800089e:	bf00      	nop
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4618      	mov	r0, r3
 80008a6:	2107      	movs	r1, #7
 80008a8:	f000 fc2c 	bl	8001104 <USART_GetFlagStatus>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d0f6      	beq.n	80008a0 <USART_transmit+0x14>
         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_ParityControl == USART_WORDLEN_9BITS)
 80008b2:	68fb      	ldr	r3, [r7, #12]
 80008b4:	7b9b      	ldrb	r3, [r3, #14]
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d114      	bne.n	80008e4 <USART_transmit+0x58>
		{//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	8812      	ldrh	r2, [r2, #0]
 80008c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008ca:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	7b9b      	ldrb	r3, [r3, #14]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d103      	bne.n	80008dc <USART_transmit+0x50>
			{//No parity is used in this transfer. so, 9bits of user data will be sent
				pTxBuffer+=2;//increment pTxBuffer twice
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	3302      	adds	r3, #2
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	e00b      	b.n	80008f4 <USART_transmit+0x68>
			}else
			{//Parity bit is used in this transfer . so , 8bits of user data will be sent
				pTxBuffer++;//The 9th bit will be replaced by parity bit by the hardware
 80008dc:	68bb      	ldr	r3, [r7, #8]
 80008de:	3301      	adds	r3, #1
 80008e0:	60bb      	str	r3, [r7, #8]
 80008e2:	e007      	b.n	80008f4 <USART_transmit+0x68>
			}
		}
		else{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	68ba      	ldr	r2, [r7, #8]
 80008ea:	7812      	ldrb	r2, [r2, #0]
 80008ec:	605a      	str	r2, [r3, #4]

			pTxBuffer++;//increment the buffer address
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	3301      	adds	r3, #1
 80008f2:	60bb      	str	r3, [r7, #8]
 * @param[len] - Length of transmit buffer
 *****************************************************************/
void USART_transmit(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len){
	uint16_t *pdata;
	//Loop over until len number of bytes are transferred
	for(uint32_t i = 0 ; i < len; i++){
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	3301      	adds	r3, #1
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	429a      	cmp	r2, r3
 8000900:	d3cd      	bcc.n	800089e <USART_transmit+0x12>

			pTxBuffer++;//increment the buffer address
		}
	}
	//Wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_TC));
 8000902:	bf00      	nop
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4618      	mov	r0, r3
 800090a:	2106      	movs	r1, #6
 800090c:	f000 fbfa 	bl	8001104 <USART_GetFlagStatus>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d0f6      	beq.n	8000904 <USART_transmit+0x78>
}
 8000916:	3718      	adds	r7, #24
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}

0800091c <USART_receive>:
 *
 * @param[pUSARTHandle] - Base address of the USART peripheral
 * @param[pRxBuffer] - Transmit buffer
 * @param[len] - Length of transmit buffer
 *****************************************************************/
void USART_receive(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t len){
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	60f8      	str	r0, [r7, #12]
 8000924:	60b9      	str	r1, [r7, #8]
 8000926:	607a      	str	r2, [r7, #4]
	   //Loop over until "len" number of bytes are transferred
		for(uint32_t i = 0 ; i < len; i++){
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	e042      	b.n	80009b4 <USART_receive+0x98>
			//Wait until RXNE flag is set in the SR
			while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_SR_RXNE));
 800092e:	bf00      	nop
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4618      	mov	r0, r3
 8000936:	2105      	movs	r1, #5
 8000938:	f000 fbe4 	bl	8001104 <USART_GetFlagStatus>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d0f6      	beq.n	8000930 <USART_receive+0x14>

			//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
			if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	7b5b      	ldrb	r3, [r3, #13]
 8000946:	2b01      	cmp	r3, #1
 8000948:	d11a      	bne.n	8000980 <USART_receive+0x64>
			{//We are going to receive 9bit data in a frame

				//check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	7b9b      	ldrb	r3, [r3, #14]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d10c      	bne.n	800096c <USART_receive+0x50>
				{//No parity is used. so, all 9bits will be of user data

					//read only first 9 bits. so, mask the DR with 0x01FF
					*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	b29b      	uxth	r3, r3
 800095a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800095e:	b29a      	uxth	r2, r3
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	801a      	strh	r2, [r3, #0]

					//Now increment the pRxBuffer two times
					pRxBuffer+=2;
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	3302      	adds	r3, #2
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	e020      	b.n	80009ae <USART_receive+0x92>
				}else{//Parity is used, so, 8bits will be of user data and 1 bit is parity
					*pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	b2da      	uxtb	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	701a      	strb	r2, [r3, #0]

					//Increment the pRxBuffer
					pRxBuffer++;
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	3301      	adds	r3, #1
 800097c:	60bb      	str	r3, [r7, #8]
 800097e:	e016      	b.n	80009ae <USART_receive+0x92>
				}
			}
			else{//We are going to receive 8bit data in a frame
				//check are we using USART_ParityControl control or not
				if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	7b9b      	ldrb	r3, [r3, #14]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d106      	bne.n	8000996 <USART_receive+0x7a>
				{
					//No parity is used , so all 8bits will be of user data
					//read 8 bits from DR
					*pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	685b      	ldr	r3, [r3, #4]
 800098e:	b2da      	uxtb	r2, r3
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	701a      	strb	r2, [r3, #0]
 8000994:	e008      	b.n	80009a8 <USART_receive+0x8c>
				}else{//Parity is used, so , 7 bits will be of user data and 1 bit is parity
					//read only 7 bits , hence mask the DR with 0X7F
					*pRxBuffer = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	b2db      	uxtb	r3, r3
 800099e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	701a      	strb	r2, [r3, #0]
				}
				//increment the pRxBuffer
				pRxBuffer++;
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	3301      	adds	r3, #1
 80009ac:	60bb      	str	r3, [r7, #8]
 * @param[pRxBuffer] - Transmit buffer
 * @param[len] - Length of transmit buffer
 *****************************************************************/
void USART_receive(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t len){
	   //Loop over until "len" number of bytes are transferred
		for(uint32_t i = 0 ; i < len; i++){
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	3301      	adds	r3, #1
 80009b2:	617b      	str	r3, [r7, #20]
 80009b4:	697a      	ldr	r2, [r7, #20]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3b8      	bcc.n	800092e <USART_receive+0x12>
				}
				//increment the pRxBuffer
				pRxBuffer++;
			}
		}
}
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop

080009c4 <USART_txIT>:
 * @param[pTxBuffer] - Transmit buffer
 * @param[len] - Length of transmit buffer
 *
 * @return	- Tx State
 *****************************************************************/
uint8_t USART_txIT(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t len){
 80009c4:	b480      	push	{r7}
 80009c6:	b087      	sub	sp, #28
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
	uint8_t txstate = pUSARTHandle->TxBusyState;
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80009d6:	75fb      	strb	r3, [r7, #23]

	if(txstate != USART_BUSY_IN_TX)	{
 80009d8:	7dfb      	ldrb	r3, [r7, #23]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	d019      	beq.n	8000a12 <USART_txIT+0x4e>
		//1. Save the Tx buffer address and Data Frame length in global variables(Handle structure)
		pUSARTHandle->pTxBuffer = pTxBuffer;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	68ba      	ldr	r2, [r7, #8]
 80009e2:	611a      	str	r2, [r3, #16]
		pUSARTHandle->TxLen = len;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	619a      	str	r2, [r3, #24]
		pUSARTHandle->TxBusyState = USART_BUSY_IN_TX;
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2202      	movs	r2, #2
 80009ee:	f883 2020 	strb.w	r2, [r3, #32]

		// Enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TXEIE);
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	6812      	ldr	r2, [r2, #0]
 80009fa:	68d2      	ldr	r2, [r2, #12]
 80009fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a00:	60da      	str	r2, [r3, #12]

		// Enable interrupt for TC
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TCIE);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	6812      	ldr	r2, [r2, #0]
 8000a0a:	68d2      	ldr	r2, [r2, #12]
 8000a0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000a10:	60da      	str	r2, [r3, #12]
	}
	return txstate;
 8000a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	371c      	adds	r7, #28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr

08000a20 <USART_rxIT>:
 * @param[pRxBuffer] - Transmit buffer
 * @param[len] - Length of transmit buffer
 *
 * @return	- Rx State
 *****************************************************************/
uint8_t USART_rxIT(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t len){
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	60f8      	str	r0, [r7, #12]
 8000a28:	60b9      	str	r1, [r7, #8]
 8000a2a:	607a      	str	r2, [r7, #4]
	uint8_t rxstate = pUSARTHandle->RxBusyState;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000a32:	75fb      	strb	r3, [r7, #23]

	if(rxstate != USART_BUSY_IN_RX){
 8000a34:	7dfb      	ldrb	r3, [r7, #23]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d011      	beq.n	8000a5e <USART_rxIT+0x3e>
		pUSARTHandle->RxLen = len;
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	687a      	ldr	r2, [r7, #4]
 8000a3e:	61da      	str	r2, [r3, #28]
		pUSARTHandle->pRxBuffer = pRxBuffer;
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	615a      	str	r2, [r3, #20]
		pUSARTHandle->RxBusyState = USART_BUSY_IN_RX;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

		// Enable interrupt for TXE
		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RXNEIE);
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68fa      	ldr	r2, [r7, #12]
 8000a54:	6812      	ldr	r2, [r2, #0]
 8000a56:	68d2      	ldr	r2, [r2, #12]
 8000a58:	f042 0220 	orr.w	r2, r2, #32
 8000a5c:	60da      	str	r2, [r3, #12]
	}
	return rxstate;
 8000a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	371c      	adds	r7, #28
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <USART_IRQconfig>:
 *
 * @param[IRQnumber] 		- IRQ Interrupt number
 * @param[enable_disable]	- Macro: Enable/Disable
 *****************************************************************/
void USART_IRQconfig(uint8_t IRQnumber, uint8_t enable_disable)
{
 8000a6c:	b490      	push	{r4, r7}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	460a      	mov	r2, r1
 8000a76:	71fb      	strb	r3, [r7, #7]
 8000a78:	4613      	mov	r3, r2
 8000a7a:	71bb      	strb	r3, [r7, #6]
	if (enable_disable == ENABLE)
 8000a7c:	79bb      	ldrb	r3, [r7, #6]
 8000a7e:	2b01      	cmp	r3, #1
 8000a80:	d14c      	bne.n	8000b1c <USART_IRQconfig+0xb0>
	{//Configure ISERx (Interrupt Set-Enable Registers)
		if (IRQnumber < 32) {//ISER0 register
 8000a82:	79fb      	ldrb	r3, [r7, #7]
 8000a84:	2b1f      	cmp	r3, #31
 8000a86:	d809      	bhi.n	8000a9c <USART_IRQconfig+0x30>
			*NVIC_ISER0 |= (1 << IRQnumber);
 8000a88:	494d      	ldr	r1, [pc, #308]	; (8000bc0 <USART_IRQconfig+0x154>)
 8000a8a:	4b4d      	ldr	r3, [pc, #308]	; (8000bc0 <USART_IRQconfig+0x154>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	79fa      	ldrb	r2, [r7, #7]
 8000a90:	2001      	movs	r0, #1
 8000a92:	fa00 f202 	lsl.w	r2, r0, r2
 8000a96:	4313      	orrs	r3, r2
 8000a98:	600b      	str	r3, [r1, #0]
 8000a9a:	e08d      	b.n	8000bb8 <USART_IRQconfig+0x14c>
		}else if (IRQnumber >= 32 && IRQnumber < 64) {//ISER1 register
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	2b1f      	cmp	r3, #31
 8000aa0:	d90e      	bls.n	8000ac0 <USART_IRQconfig+0x54>
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	2b3f      	cmp	r3, #63	; 0x3f
 8000aa6:	d80b      	bhi.n	8000ac0 <USART_IRQconfig+0x54>
			*NVIC_ISER1 |= (1 << IRQnumber%32);
 8000aa8:	4946      	ldr	r1, [pc, #280]	; (8000bc4 <USART_IRQconfig+0x158>)
 8000aaa:	4b46      	ldr	r3, [pc, #280]	; (8000bc4 <USART_IRQconfig+0x158>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	79fa      	ldrb	r2, [r7, #7]
 8000ab0:	f002 021f 	and.w	r2, r2, #31
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	4313      	orrs	r3, r2
 8000abc:	600b      	str	r3, [r1, #0]
 8000abe:	e02c      	b.n	8000b1a <USART_IRQconfig+0xae>
		}else if (IRQnumber >= 64 && IRQnumber < 96) {//ISER2 register
 8000ac0:	79fb      	ldrb	r3, [r7, #7]
 8000ac2:	2b3f      	cmp	r3, #63	; 0x3f
 8000ac4:	d90e      	bls.n	8000ae4 <USART_IRQconfig+0x78>
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	2b5f      	cmp	r3, #95	; 0x5f
 8000aca:	d80b      	bhi.n	8000ae4 <USART_IRQconfig+0x78>
			*NVIC_ISER2 |= (1 << IRQnumber%64);
 8000acc:	493e      	ldr	r1, [pc, #248]	; (8000bc8 <USART_IRQconfig+0x15c>)
 8000ace:	4b3e      	ldr	r3, [pc, #248]	; (8000bc8 <USART_IRQconfig+0x15c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	79fa      	ldrb	r2, [r7, #7]
 8000ad4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000ad8:	2001      	movs	r0, #1
 8000ada:	fa00 f202 	lsl.w	r2, r0, r2
 8000ade:	4313      	orrs	r3, r2
 8000ae0:	600b      	str	r3, [r1, #0]
 8000ae2:	e01a      	b.n	8000b1a <USART_IRQconfig+0xae>
		}else if (IRQnumber >= 96 && IRQnumber < 128) {//ISER3 register
 8000ae4:	79fb      	ldrb	r3, [r7, #7]
 8000ae6:	2b5f      	cmp	r3, #95	; 0x5f
 8000ae8:	d966      	bls.n	8000bb8 <USART_IRQconfig+0x14c>
 8000aea:	79fb      	ldrb	r3, [r7, #7]
 8000aec:	b25b      	sxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	db62      	blt.n	8000bb8 <USART_IRQconfig+0x14c>
			*NVIC_ISER3 |= (1 << IRQnumber%96);
 8000af2:	4c36      	ldr	r4, [pc, #216]	; (8000bcc <USART_IRQconfig+0x160>)
 8000af4:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <USART_IRQconfig+0x160>)
 8000af6:	6818      	ldr	r0, [r3, #0]
 8000af8:	79fa      	ldrb	r2, [r7, #7]
 8000afa:	4b35      	ldr	r3, [pc, #212]	; (8000bd0 <USART_IRQconfig+0x164>)
 8000afc:	fba3 1302 	umull	r1, r3, r3, r2
 8000b00:	0999      	lsrs	r1, r3, #6
 8000b02:	460b      	mov	r3, r1
 8000b04:	005b      	lsls	r3, r3, #1
 8000b06:	440b      	add	r3, r1
 8000b08:	015b      	lsls	r3, r3, #5
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	461a      	mov	r2, r3
 8000b10:	2301      	movs	r3, #1
 8000b12:	4093      	lsls	r3, r2
 8000b14:	4303      	orrs	r3, r0
 8000b16:	6023      	str	r3, [r4, #0]
 8000b18:	e04e      	b.n	8000bb8 <USART_IRQconfig+0x14c>
 8000b1a:	e04d      	b.n	8000bb8 <USART_IRQconfig+0x14c>
		}
	}else if (enable_disable == DISABLE)
 8000b1c:	79bb      	ldrb	r3, [r7, #6]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d14a      	bne.n	8000bb8 <USART_IRQconfig+0x14c>
	{//Configure ICERx (Interrupt Clear-Enable Registers)
		if (IRQnumber < 32) {//ICER0 register
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b1f      	cmp	r3, #31
 8000b26:	d809      	bhi.n	8000b3c <USART_IRQconfig+0xd0>
			*NVIC_ICER0 |= (1 << IRQnumber);
 8000b28:	492a      	ldr	r1, [pc, #168]	; (8000bd4 <USART_IRQconfig+0x168>)
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <USART_IRQconfig+0x168>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	79fa      	ldrb	r2, [r7, #7]
 8000b30:	2001      	movs	r0, #1
 8000b32:	fa00 f202 	lsl.w	r2, r0, r2
 8000b36:	4313      	orrs	r3, r2
 8000b38:	600b      	str	r3, [r1, #0]
 8000b3a:	e03d      	b.n	8000bb8 <USART_IRQconfig+0x14c>
		}else if (IRQnumber >= 32 && IRQnumber < 64) {//ICER1 register
 8000b3c:	79fb      	ldrb	r3, [r7, #7]
 8000b3e:	2b1f      	cmp	r3, #31
 8000b40:	d90e      	bls.n	8000b60 <USART_IRQconfig+0xf4>
 8000b42:	79fb      	ldrb	r3, [r7, #7]
 8000b44:	2b3f      	cmp	r3, #63	; 0x3f
 8000b46:	d80b      	bhi.n	8000b60 <USART_IRQconfig+0xf4>
			*NVIC_ICER1 |= (1 << IRQnumber%32);
 8000b48:	4923      	ldr	r1, [pc, #140]	; (8000bd8 <USART_IRQconfig+0x16c>)
 8000b4a:	4b23      	ldr	r3, [pc, #140]	; (8000bd8 <USART_IRQconfig+0x16c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	79fa      	ldrb	r2, [r7, #7]
 8000b50:	f002 021f 	and.w	r2, r2, #31
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	600b      	str	r3, [r1, #0]
 8000b5e:	e02b      	b.n	8000bb8 <USART_IRQconfig+0x14c>
		}else if (IRQnumber >= 64 && IRQnumber < 96) {//ICER2 register
 8000b60:	79fb      	ldrb	r3, [r7, #7]
 8000b62:	2b3f      	cmp	r3, #63	; 0x3f
 8000b64:	d90e      	bls.n	8000b84 <USART_IRQconfig+0x118>
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b5f      	cmp	r3, #95	; 0x5f
 8000b6a:	d80b      	bhi.n	8000b84 <USART_IRQconfig+0x118>
			*NVIC_ICER2 |= (1 << IRQnumber%64);
 8000b6c:	491b      	ldr	r1, [pc, #108]	; (8000bdc <USART_IRQconfig+0x170>)
 8000b6e:	4b1b      	ldr	r3, [pc, #108]	; (8000bdc <USART_IRQconfig+0x170>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	79fa      	ldrb	r2, [r7, #7]
 8000b74:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000b78:	2001      	movs	r0, #1
 8000b7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	600b      	str	r3, [r1, #0]
 8000b82:	e019      	b.n	8000bb8 <USART_IRQconfig+0x14c>
		}else if (IRQnumber >= 96 && IRQnumber < 128) {//ICER3 register
 8000b84:	79fb      	ldrb	r3, [r7, #7]
 8000b86:	2b5f      	cmp	r3, #95	; 0x5f
 8000b88:	d916      	bls.n	8000bb8 <USART_IRQconfig+0x14c>
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	b25b      	sxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	db12      	blt.n	8000bb8 <USART_IRQconfig+0x14c>
			*NVIC_ICER3 |= (1 << IRQnumber%96);
 8000b92:	4c13      	ldr	r4, [pc, #76]	; (8000be0 <USART_IRQconfig+0x174>)
 8000b94:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <USART_IRQconfig+0x174>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	79fa      	ldrb	r2, [r7, #7]
 8000b9a:	4b0d      	ldr	r3, [pc, #52]	; (8000bd0 <USART_IRQconfig+0x164>)
 8000b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000ba0:	0999      	lsrs	r1, r3, #6
 8000ba2:	460b      	mov	r3, r1
 8000ba4:	005b      	lsls	r3, r3, #1
 8000ba6:	440b      	add	r3, r1
 8000ba8:	015b      	lsls	r3, r3, #5
 8000baa:	1ad3      	subs	r3, r2, r3
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	461a      	mov	r2, r3
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	4093      	lsls	r3, r2
 8000bb4:	4303      	orrs	r3, r0
 8000bb6:	6023      	str	r3, [r4, #0]
		}
	}
}
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc90      	pop	{r4, r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	e000e100 	.word	0xe000e100
 8000bc4:	e000e104 	.word	0xe000e104
 8000bc8:	e000e108 	.word	0xe000e108
 8000bcc:	e000e10c 	.word	0xe000e10c
 8000bd0:	aaaaaaab 	.word	0xaaaaaaab
 8000bd4:	e000e180 	.word	0xe000e180
 8000bd8:	e000e184 	.word	0xe000e184
 8000bdc:	e000e188 	.word	0xe000e188
 8000be0:	e000e18c 	.word	0xe000e18c

08000be4 <USART_IRQpriorityconfig>:
 *
 * @param[IRQNumber]	- IRQ Interrupt number
 * @param[IRQPriority]	- IRQ interrupt priority
 *****************************************************************/
void USART_IRQpriorityconfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b085      	sub	sp, #20
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
	//1. Find the Interrupt Priority Register
	uint8_t iprx = IRQNumber / 4;
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	089b      	lsrs	r3, r3, #2
 8000bf4:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8000bf6:	79fb      	ldrb	r3, [r7, #7]
 8000bf8:	f003 0303 	and.w	r3, r3, #3
 8000bfc:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_priority =  (8*iprx_section) + (8-IMPLEMENTED_PR_BITS);
 8000bfe:	7bbb      	ldrb	r3, [r7, #14]
 8000c00:	00db      	lsls	r3, r3, #3
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	3304      	adds	r3, #4
 8000c06:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_priority );
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
 8000c0a:	009b      	lsls	r3, r3, #2
 8000c0c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000c10:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000c14:	7bfa      	ldrb	r2, [r7, #15]
 8000c16:	0092      	lsls	r2, r2, #2
 8000c18:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8000c1c:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	7b7a      	ldrb	r2, [r7, #13]
 8000c24:	6838      	ldr	r0, [r7, #0]
 8000c26:	fa00 f202 	lsl.w	r2, r0, r2
 8000c2a:	430a      	orrs	r2, r1
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	3714      	adds	r7, #20
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <USART_IRQHandling>:
 *
 * @brief	- This function handles interrupts
 *
 * @param[pUSARTHandle] - Handle structure
 *****************************************************************/
void USART_IRQHandling(USART_Handle_t *pUSARTHandle){
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	uint32_t temp1, temp2, temp3;
	uint16_t *pdata;
/**************************************** Check for TC flag ********************************************/
	//Check the state of TC bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & (1 << USART_SR_TC);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c4a:	617b      	str	r3, [r7, #20]
	//Check the state of TCIE bit in the CR
	temp2 = pUSARTHandle->pUSARTx->CR1 & (1 << USART_CR1_TCIE);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	68db      	ldr	r3, [r3, #12]
 8000c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c56:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2){//Transmission Complete interrupt!
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d029      	beq.n	8000cb2 <USART_IRQHandling+0x7a>
 8000c5e:	693b      	ldr	r3, [r7, #16]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d026      	beq.n	8000cb2 <USART_IRQHandling+0x7a>
		//close transmission and call application callback if TxLen is zero
		if ( pUSARTHandle->TxBusyState == USART_BUSY_IN_TX)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c6a:	2b02      	cmp	r3, #2
 8000c6c:	d121      	bne.n	8000cb2 <USART_IRQHandling+0x7a>
		{
			//Check the TxLen . If it is zero then close the data transmission
			if(! pUSARTHandle->TxLen ){
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	699b      	ldr	r3, [r3, #24]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11d      	bne.n	8000cb2 <USART_IRQHandling+0x7a>
				//Clear the TC flag
				pUSARTHandle->pUSARTx->SR &= ~( 1 << USART_SR_TC);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	687a      	ldr	r2, [r7, #4]
 8000c7c:	6812      	ldr	r2, [r2, #0]
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c84:	601a      	str	r2, [r3, #0]
				//Clear the TCIE control bit
				pUSARTHandle->pUSARTx->CR1 &= ~(1 << USART_CR1_TCIE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	687a      	ldr	r2, [r7, #4]
 8000c8c:	6812      	ldr	r2, [r2, #0]
 8000c8e:	68d2      	ldr	r2, [r2, #12]
 8000c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000c94:	60da      	str	r2, [r3, #12]
				//Reset the application state
				pUSARTHandle->TxBusyState = USART_READY;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
				//Reset Buffer address to NULL
				pUSARTHandle->pTxBuffer = NULL;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	611a      	str	r2, [r3, #16]
				//Reset the length to zero
				pUSARTHandle->TxLen = 0;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	619a      	str	r2, [r3, #24]

				//Call the applicaton call back with event USART_EVENT_TX_CMPLT
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_TX_CMPLT);
 8000caa:	6878      	ldr	r0, [r7, #4]
 8000cac:	2100      	movs	r1, #0
 8000cae:	f000 fb0d 	bl	80012cc <USART_ApplicationEventCallback>
			}
		}
	}
/*************************Check for TXE flag ********************************************/
	//Check the state of TXE bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_TXE);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cbc:	617b      	str	r3, [r7, #20]
	//Check the state of TXEIE bit in CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_TXEIE);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc8:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2){//this interrupt is because of TXE
 8000cca:	697b      	ldr	r3, [r7, #20]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d04f      	beq.n	8000d70 <USART_IRQHandling+0x138>
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d04c      	beq.n	8000d70 <USART_IRQHandling+0x138>
		if(pUSARTHandle->TxBusyState == USART_BUSY_IN_TX){
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000cdc:	2b02      	cmp	r3, #2
 8000cde:	d147      	bne.n	8000d70 <USART_IRQHandling+0x138>
			//Keep sending data until Txlen reaches to zero
			if(pUSARTHandle->TxLen > 0){
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d037      	beq.n	8000d58 <USART_IRQHandling+0x120>
				//Check the USART_WordLength item for 9BIT or 8BIT in a frame
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	7b5b      	ldrb	r3, [r3, #13]
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	d123      	bne.n	8000d38 <USART_IRQHandling+0x100>
					//if 9BIT , load the DR with 2bytes masking the bits other than first 9 bits
					pdata = (uint16_t*) pUSARTHandle->pTxBuffer;
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	691b      	ldr	r3, [r3, #16]
 8000cf4:	60fb      	str	r3, [r7, #12]
					//loading only first 9 bits , so we have to mask with the value 0x01FF
					pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	68fa      	ldr	r2, [r7, #12]
 8000cfc:	8812      	ldrh	r2, [r2, #0]
 8000cfe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d02:	605a      	str	r2, [r3, #4]

					//check for USART_ParityControl
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7b9b      	ldrb	r3, [r3, #14]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d10a      	bne.n	8000d22 <USART_IRQHandling+0xea>
						//No parity is used in this transfer , so, 9bits of user data will be sent
						pUSARTHandle->pTxBuffer+=2;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	691b      	ldr	r3, [r3, #16]
 8000d10:	1c9a      	adds	r2, r3, #2
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen-=2;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	1e9a      	subs	r2, r3, #2
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	619a      	str	r2, [r3, #24]
 8000d20:	e01a      	b.n	8000d58 <USART_IRQHandling+0x120>
					}else{//Parity bit is used in this transfer . so , 8bits of user data will be sent
						//The 9th bit will be replaced by parity bit by the hardware
						pUSARTHandle->pTxBuffer++;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	691b      	ldr	r3, [r3, #16]
 8000d26:	1c5a      	adds	r2, r3, #1
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	611a      	str	r2, [r3, #16]
						pUSARTHandle->TxLen--;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	1e5a      	subs	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	619a      	str	r2, [r3, #24]
 8000d36:	e00f      	b.n	8000d58 <USART_IRQHandling+0x120>
					}
				}else{//This is 8bit data transfer
					pUSARTHandle->pUSARTx->DR = (*(pUSARTHandle->pTxBuffer)  & (uint8_t)0xFF);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	687a      	ldr	r2, [r7, #4]
 8000d3e:	6912      	ldr	r2, [r2, #16]
 8000d40:	7812      	ldrb	r2, [r2, #0]
 8000d42:	605a      	str	r2, [r3, #4]
					pUSARTHandle->pTxBuffer++;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	1c5a      	adds	r2, r3, #1
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	611a      	str	r2, [r3, #16]
					pUSARTHandle->TxLen--;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	699b      	ldr	r3, [r3, #24]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	619a      	str	r2, [r3, #24]
				}
			}
			if (pUSARTHandle->TxLen == 0){//TxLen is zero
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d107      	bne.n	8000d70 <USART_IRQHandling+0x138>
				//Clear the TXEIE bit (disable interrupt for TXE flag )
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_TXEIE);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	6812      	ldr	r2, [r2, #0]
 8000d68:	68d2      	ldr	r2, [r2, #12]
 8000d6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d6e:	60da      	str	r2, [r3, #12]
			}
		}
	}
/*************************Check for RXNE flag ********************************************/
	//Check the state of RXNE bit in SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_RXNE);
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0320 	and.w	r3, r3, #32
 8000d7a:	617b      	str	r3, [r7, #20]
	//Check the state of RXNEIE bit in CR
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_RXNEIE);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2){//this interrupt is because of rxne
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d06e      	beq.n	8000e6c <USART_IRQHandling+0x234>
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d06b      	beq.n	8000e6c <USART_IRQHandling+0x234>
		if(pUSARTHandle->RxBusyState == USART_BUSY_IN_RX){//RXE is set so send data
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d166      	bne.n	8000e6c <USART_IRQHandling+0x234>
			if(pUSARTHandle->RxLen > 0){
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	69db      	ldr	r3, [r3, #28]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d04e      	beq.n	8000e44 <USART_IRQHandling+0x20c>
				//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
				if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS){
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	7b5b      	ldrb	r3, [r3, #13]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d12a      	bne.n	8000e04 <USART_IRQHandling+0x1cc>
					//We are going to receive 9bit data in a frame
					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE){
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	7b9b      	ldrb	r3, [r3, #14]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d114      	bne.n	8000de0 <USART_IRQHandling+0x1a8>
						//No parity is used. so, all 9bits will be of user data
						//read only first 9 bits so mask the DR with 0x01FF
						*((uint16_t*) pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	695b      	ldr	r3, [r3, #20]
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	6812      	ldr	r2, [r2, #0]
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	b292      	uxth	r2, r2
 8000dc2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	801a      	strh	r2, [r3, #0]

						pUSARTHandle->pRxBuffer+=2;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	695b      	ldr	r3, [r3, #20]
 8000dce:	1c9a      	adds	r2, r3, #2
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	615a      	str	r2, [r3, #20]
						pUSARTHandle->RxLen-=2;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	69db      	ldr	r3, [r3, #28]
 8000dd8:	1e9a      	subs	r2, r3, #2
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	61da      	str	r2, [r3, #28]
 8000dde:	e031      	b.n	8000e44 <USART_IRQHandling+0x20c>
					}else{//Parity is used. so, 8bits will be of user data and 1 bit is parity
						 *(pUSARTHandle->pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	695b      	ldr	r3, [r3, #20]
 8000de4:	687a      	ldr	r2, [r7, #4]
 8000de6:	6812      	ldr	r2, [r2, #0]
 8000de8:	6852      	ldr	r2, [r2, #4]
 8000dea:	b2d2      	uxtb	r2, r2
 8000dec:	701a      	strb	r2, [r3, #0]

						 pUSARTHandle->pRxBuffer++;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	1c5a      	adds	r2, r3, #1
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	615a      	str	r2, [r3, #20]
						 pUSARTHandle->RxLen--;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69db      	ldr	r3, [r3, #28]
 8000dfc:	1e5a      	subs	r2, r3, #1
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	61da      	str	r2, [r3, #28]
 8000e02:	e01f      	b.n	8000e44 <USART_IRQHandling+0x20c>
					}

				}else{//We are going to receive 8bit data in a frame
					//Now, check are we using USART_ParityControl control or not
					if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	7b9b      	ldrb	r3, [r3, #14]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d107      	bne.n	8000e1c <USART_IRQHandling+0x1e4>
					{//No parity is used , so all 8bits will be of user data
						//read 8 bits from DR
						*(pUSARTHandle->pRxBuffer) = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	695b      	ldr	r3, [r3, #20]
 8000e10:	687a      	ldr	r2, [r7, #4]
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	6852      	ldr	r2, [r2, #4]
 8000e16:	b2d2      	uxtb	r2, r2
 8000e18:	701a      	strb	r2, [r3, #0]
 8000e1a:	e009      	b.n	8000e30 <USART_IRQHandling+0x1f8>
					}else{//Parity is used, so , 7 bits will be of user data and 1 bit is parity
						//read only 7 bits , hence mask the DR with 0X7F
						*(pUSARTHandle->pRxBuffer) = (uint8_t) (pUSARTHandle->pUSARTx->DR  & (uint8_t)0x7F);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	687a      	ldr	r2, [r7, #4]
 8000e22:	6812      	ldr	r2, [r2, #0]
 8000e24:	6852      	ldr	r2, [r2, #4]
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8000e2c:	b2d2      	uxtb	r2, r2
 8000e2e:	701a      	strb	r2, [r3, #0]
					}
					pUSARTHandle->pRxBuffer++;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	695b      	ldr	r3, [r3, #20]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	615a      	str	r2, [r3, #20]
					pUSARTHandle->RxLen--;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69db      	ldr	r3, [r3, #28]
 8000e3e:	1e5a      	subs	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	61da      	str	r2, [r3, #28]
				}
			}

			if(! pUSARTHandle->RxLen ){
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	69db      	ldr	r3, [r3, #28]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d10f      	bne.n	8000e6c <USART_IRQHandling+0x234>
				pUSARTHandle->pUSARTx->CR1 &= ~( 1 << USART_CR1_RXNEIE );
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	687a      	ldr	r2, [r7, #4]
 8000e52:	6812      	ldr	r2, [r2, #0]
 8000e54:	68d2      	ldr	r2, [r2, #12]
 8000e56:	f022 0220 	bic.w	r2, r2, #32
 8000e5a:	60da      	str	r2, [r3, #12]
				pUSARTHandle->RxBusyState = USART_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_RX_CMPLT);
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	2101      	movs	r1, #1
 8000e68:	f000 fa30 	bl	80012cc <USART_ApplicationEventCallback>
		}
	}
/*************************Check for CTS flag ********************************************/
//Note : CTS feature is not applicable for UART4 and UART5
	//Check the status of CTS bit in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_CTS);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e76:	617b      	str	r3, [r7, #20]
	//Check the state of CTSE bit in CR
	temp2 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSE);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	695b      	ldr	r3, [r3, #20]
 8000e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000e82:	613b      	str	r3, [r7, #16]
	//Check the state of CTSIE bit in CR (This bit is not available for UART4 & UART5.)
	temp3 = pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_CTSIE);
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e8e:	60bb      	str	r3, [r7, #8]

	if(temp1 && temp2 && temp3){//this interrupt is because of cts
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d011      	beq.n	8000eba <USART_IRQHandling+0x282>
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d00e      	beq.n	8000eba <USART_IRQHandling+0x282>
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d00b      	beq.n	8000eba <USART_IRQHandling+0x282>
		pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_CTS);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	687a      	ldr	r2, [r7, #4]
 8000ea8:	6812      	ldr	r2, [r2, #0]
 8000eaa:	6812      	ldr	r2, [r2, #0]
 8000eac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000eb0:	601a      	str	r2, [r3, #0]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_CTS);
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	2103      	movs	r1, #3
 8000eb6:	f000 fa09 	bl	80012cc <USART_ApplicationEventCallback>
	}
/*************************Check for IDLE detection flag ********************************************/
	//Check the state of IDLE bit in SR
	temp1 = pUSARTHandle->pUSARTx->SR & ( 1 << USART_SR_IDLE);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0310 	and.w	r3, r3, #16
 8000ec4:	617b      	str	r3, [r7, #20]
	//Check the state of IDLEIE bit in CR
	temp2 = pUSARTHandle->pUSARTx->CR1 & ( 1 << USART_CR1_IDLEIE);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	613b      	str	r3, [r7, #16]

	if(temp1 && temp2){//this interrupt is because of idle
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d00f      	beq.n	8000ef8 <USART_IRQHandling+0x2c0>
 8000ed8:	693b      	ldr	r3, [r7, #16]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d00c      	beq.n	8000ef8 <USART_IRQHandling+0x2c0>
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_IDLE);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f023 0310 	bic.w	r3, r3, #16
 8000eec:	6013      	str	r3, [r2, #0]
 8000eee:	617b      	str	r3, [r7, #20]
		USART_ApplicationEventCallback(pUSARTHandle,USART_EVENT_IDLE);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	2102      	movs	r1, #2
 8000ef4:	f000 f9ea 	bl	80012cc <USART_ApplicationEventCallback>
	}
/*************************Check for OverRun detection flag ********************************************/
	//Check the status of ORE flag in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_ORE;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0303 	and.w	r3, r3, #3
 8000f02:	617b      	str	r3, [r7, #20]
	//Check the status of RXNEIE  bit in the CR1 // ORE is handled by RXNEIE :)
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_RXNEIE;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	68db      	ldr	r3, [r3, #12]
 8000f0a:	f003 0305 	and.w	r3, r3, #5
 8000f0e:	613b      	str	r3, [r7, #16]

	if(temp1  && temp2){//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00f      	beq.n	8000f36 <USART_IRQHandling+0x2fe>
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d00c      	beq.n	8000f36 <USART_IRQHandling+0x2fe>
		//this interrupt is because of Overrun error
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_ORE);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 0308 	bic.w	r3, r3, #8
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	617b      	str	r3, [r7, #20]
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	2107      	movs	r1, #7
 8000f32:	f000 f9cb 	bl	80012cc <USART_ApplicationEventCallback>
	}
/*************************Check for Parity Error flag ********************************************/
	//Check the status of PE flag in the SR
	temp1 = pUSARTHandle->pUSARTx->SR & USART_SR_PE;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	617b      	str	r3, [r7, #20]
	//Check the status of PEIE  bit in the CR1
	temp2 = pUSARTHandle->pUSARTx->CR1 & USART_CR1_PEIE;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	f003 0308 	and.w	r3, r3, #8
 8000f4a:	613b      	str	r3, [r7, #16]

	if(temp1  && temp2){//Need not to clear the ORE flag here, instead give an api for the application to clear the ORE flag .
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d00f      	beq.n	8000f72 <USART_IRQHandling+0x33a>
 8000f52:	693b      	ldr	r3, [r7, #16]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00c      	beq.n	8000f72 <USART_IRQHandling+0x33a>
		//this interrupt is because of Overrun error
		temp1 = pUSARTHandle->pUSARTx->SR &= ~(1 << USART_SR_PE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f023 0301 	bic.w	r3, r3, #1
 8000f66:	6013      	str	r3, [r2, #0]
 8000f68:	617b      	str	r3, [r7, #20]
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	2107      	movs	r1, #7
 8000f6e:	f000 f9ad 	bl	80012cc <USART_ApplicationEventCallback>
	}
/*************************Check for Error Flag ********************************************/
//Noise Flag, Overrun error and Framing Error in multibuffer communication
//We dont discuss multibuffer communication in this course. please refer to the RM
//The blow code will get executed in only if multibuffer mode is used.
	temp2 =  pUSARTHandle->pUSARTx->CR3 & ( 1 << USART_CR3_EIE) ;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	695b      	ldr	r3, [r3, #20]
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	613b      	str	r3, [r7, #16]

	if(temp2){
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d022      	beq.n	8000fca <USART_IRQHandling+0x392>
		USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ANY);
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	2108      	movs	r1, #8
 8000f88:	f000 f9a0 	bl	80012cc <USART_ApplicationEventCallback>
		temp1 = pUSARTHandle->pUSARTx->SR;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	617b      	str	r3, [r7, #20]
		if(temp1 & ( 1 << USART_SR_FE)){
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d003      	beq.n	8000fa6 <USART_IRQHandling+0x36e>
			/*	This bit is set by hardware when a de-synchronization, excessive noise or a break character
				is detected. It is cleared by a software sequence (an read to the USART_SR register
				followed by a read to the USART_DR register). */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_FE);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	2105      	movs	r1, #5
 8000fa2:	f000 f993 	bl	80012cc <USART_ApplicationEventCallback>
		}
		if(temp1 & ( 1 << USART_SR_NF)){
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	f003 0304 	and.w	r3, r3, #4
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <USART_IRQHandling+0x380>
			/* 	This bit is set by hardware when noise is detected on a received frame. It is cleared by a
				software sequence (an read to the USART_SR register followed by a read to the
				USART_DR register). */
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_NE);
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	2106      	movs	r1, #6
 8000fb4:	f000 f98a 	bl	80012cc <USART_ApplicationEventCallback>
		}
		if(temp1 & ( 1 << USART_SR_ORE)){
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f003 0308 	and.w	r3, r3, #8
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d003      	beq.n	8000fca <USART_IRQHandling+0x392>
			USART_ApplicationEventCallback(pUSARTHandle,USART_ERR_ORE);
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	f000 f981 	bl	80012cc <USART_ApplicationEventCallback>
		}
	}
}
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <USART_SetBaudRate>:
 * @brief	- This function sets U(S)ART Baudrate
 *
 * @param[pUSARTx]	- Base address of the U(S)ART peripheral
 * @param[BaudRate]	- Baud rate value
 ********************************************************************/
void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate){
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b088      	sub	sp, #32
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]

	uint32_t usartdiv;
	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

	uint32_t tempreg = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
	//Get the value of APB bus clock in to the variable PCLKx
	if(pUSARTx == USART1 || pUSARTx == USART6 || pUSARTx == UART9 || pUSARTx == UART10)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <USART_SetBaudRate+0xe4>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00b      	beq.n	8000ffe <USART_SetBaudRate+0x2e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a33      	ldr	r2, [pc, #204]	; (80010b8 <USART_SetBaudRate+0xe8>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <USART_SetBaudRate+0x2e>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a32      	ldr	r2, [pc, #200]	; (80010bc <USART_SetBaudRate+0xec>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d003      	beq.n	8000ffe <USART_SetBaudRate+0x2e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a31      	ldr	r2, [pc, #196]	; (80010c0 <USART_SetBaudRate+0xf0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d103      	bne.n	8001006 <USART_SetBaudRate+0x36>
	{//USART1, USART6, UART9 and UART10 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000ffe:	f7ff f995 	bl	800032c <RCC_GetPCLK2Value>
 8001002:	61f8      	str	r0, [r7, #28]
 8001004:	e002      	b.n	800100c <USART_SetBaudRate+0x3c>
	}else{
	   PCLKx = RCC_GetPCLK1Value();
 8001006:	f7ff f939 	bl	800027c <RCC_GetPCLK1Value>
 800100a:	61f8      	str	r0, [r7, #28]
	}
	//Check for OVER8 configuration bit
	if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	68db      	ldr	r3, [r3, #12]
 8001010:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d00b      	beq.n	8001030 <USART_SetBaudRate+0x60>
	{//OVER8 = 1 , over sampling by 8
		usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	4613      	mov	r3, r2
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	4413      	add	r3, r2
 8001020:	009a      	lsls	r2, r3, #2
 8001022:	441a      	add	r2, r3
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fbb2 f3f3 	udiv	r3, r2, r3
 800102c:	61bb      	str	r3, [r7, #24]
 800102e:	e00a      	b.n	8001046 <USART_SetBaudRate+0x76>
	}else{
		usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	4613      	mov	r3, r2
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	4413      	add	r3, r2
 8001038:	009a      	lsls	r2, r3, #2
 800103a:	441a      	add	r2, r3
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	fbb2 f3f3 	udiv	r3, r2, r3
 8001044:	61bb      	str	r3, [r7, #24]
	}
	//Calculate the Mantissa part
	M_part = usartdiv / 100;
 8001046:	69bb      	ldr	r3, [r7, #24]
 8001048:	4a1e      	ldr	r2, [pc, #120]	; (80010c4 <USART_SetBaudRate+0xf4>)
 800104a:	fba2 2303 	umull	r2, r3, r2, r3
 800104e:	095b      	lsrs	r3, r3, #5
 8001050:	60fb      	str	r3, [r7, #12]

	//Place the Mantissa part in appropriate bit position . refer USART_BRR
	tempreg |= M_part << 4;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	011b      	lsls	r3, r3, #4
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

	//Extract the fraction part
	F_part = (usartdiv - (M_part * 100));
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2264      	movs	r2, #100	; 0x64
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	1ad3      	subs	r3, r2, r3
 8001068:	617b      	str	r3, [r7, #20]

	//Calculate the final fractional
	if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001072:	2b00      	cmp	r3, #0
 8001074:	d00a      	beq.n	800108c <USART_SetBaudRate+0xbc>
	{//OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	00db      	lsls	r3, r3, #3
 800107a:	3332      	adds	r3, #50	; 0x32
 800107c:	4a11      	ldr	r2, [pc, #68]	; (80010c4 <USART_SetBaudRate+0xf4>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	f003 0307 	and.w	r3, r3, #7
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	e009      	b.n	80010a0 <USART_SetBaudRate+0xd0>
	}else
	{//over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	011b      	lsls	r3, r3, #4
 8001090:	3332      	adds	r3, #50	; 0x32
 8001092:	4a0c      	ldr	r2, [pc, #48]	; (80010c4 <USART_SetBaudRate+0xf4>)
 8001094:	fba2 2303 	umull	r2, r3, r2, r3
 8001098:	095b      	lsrs	r3, r3, #5
 800109a:	f003 030f 	and.w	r3, r3, #15
 800109e:	617b      	str	r3, [r7, #20]
	}
	//Place the fractional part in appropriate bit position . refer USART_BRR
	tempreg |= F_part;
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	4313      	orrs	r3, r2
 80010a6:	613b      	str	r3, [r7, #16]

	//copy the value of tempreg in to BRR register
	pUSARTx->BRR = tempreg;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	609a      	str	r2, [r3, #8]
}
 80010ae:	3720      	adds	r7, #32
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40011000 	.word	0x40011000
 80010b8:	40011400 	.word	0x40011400
 80010bc:	40011800 	.word	0x40011800
 80010c0:	40011c00 	.word	0x40011c00
 80010c4:	51eb851f 	.word	0x51eb851f

080010c8 <USART_peripheral_control>:
 * @brief	- This function sets USART peripheral control
 *
 * @param[pUSARTx] - Base address of the USART peripheral
 * @param[enable_disable] - Enable or Disable command
 *****************************************************************/
void USART_peripheral_control(USART_RegDef_t *pUSARTx, uint8_t enable_disable){
 80010c8:	b480      	push	{r7}
 80010ca:	b083      	sub	sp, #12
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	460b      	mov	r3, r1
 80010d2:	70fb      	strb	r3, [r7, #3]
	if (enable_disable == ENABLE) {
 80010d4:	78fb      	ldrb	r3, [r7, #3]
 80010d6:	2b01      	cmp	r3, #1
 80010d8:	d106      	bne.n	80010e8 <USART_peripheral_control+0x20>
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	e008      	b.n	80010fa <USART_peripheral_control+0x32>
	}else if (enable_disable == DISABLE) {
 80010e8:	78fb      	ldrb	r3, [r7, #3]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <USART_peripheral_control+0x32>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60da      	str	r2, [r3, #12]
	}
}
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <USART_GetFlagStatus>:
 * @param[pUSARTx] - Base address of the USART peripheral
 * @param[flag] - Name of flag
 *
 * @return	- Flag status (True/False)
 *****************************************************************/
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint32_t flag){
 8001104:	b480      	push	{r7}
 8001106:	b085      	sub	sp, #20
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
	uint8_t tempable = (1 << flag);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	2201      	movs	r2, #1
 8001112:	fa02 f303 	lsl.w	r3, r2, r3
 8001116:	73fb      	strb	r3, [r7, #15]
	if(pUSARTx->SR & (1 << flag)){
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	2101      	movs	r1, #1
 8001120:	fa01 f202 	lsl.w	r2, r1, r2
 8001124:	4013      	ands	r3, r2
 8001126:	2b00      	cmp	r3, #0
 8001128:	d002      	beq.n	8001130 <USART_GetFlagStatus+0x2c>
		tempable = 1;
 800112a:	2301      	movs	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	e001      	b.n	8001134 <USART_GetFlagStatus+0x30>
	}else  tempable = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	73fb      	strb	r3, [r7, #15]
	return tempable;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <USART_ClearFlag>:
 * @brief	- This function clears the flag in the Status register
 *
 * @param[pUSARTx] 	- Base address of the USART peripheral
 * @param[flag] 	- Name of flag
 *****************************************************************/
void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint32_t flag){
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
	pUSARTx->SR &= ~(1 << flag);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	fa01 f202 	lsl.w	r2, r1, r2
 800115a:	43d2      	mvns	r2, r2
 800115c:	401a      	ands	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	601a      	str	r2, [r3, #0]
}
 8001162:	370c      	adds	r7, #12
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <USART6_GPIO_init>:

#define USART6_AF 		(8U)
#define USART6_TX 		(14U)
#define USART6_RX 		(9U)

void USART6_GPIO_init(void){
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART6pins;
	//memset(from string.h): Sets a block of memory to a desired value (0 in this case)
	memset(&USART6pins, 0, sizeof(GPIO_Handle_t));
 8001172:	1d3b      	adds	r3, r7, #4
 8001174:	4618      	mov	r0, r3
 8001176:	2100      	movs	r1, #0
 8001178:	220c      	movs	r2, #12
 800117a:	f000 fee5 	bl	8001f48 <memset>

	USART6pins.pGPIOx = GPIOG;
 800117e:	4b0d      	ldr	r3, [pc, #52]	; (80011b4 <USART6_GPIO_init+0x48>)
 8001180:	607b      	str	r3, [r7, #4]
	USART6pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8001182:	2302      	movs	r3, #2
 8001184:	727b      	strb	r3, [r7, #9]
	USART6pins.GPIO_PinConfig.GPIO_PinAltFunMode = USART6_AF;
 8001186:	2308      	movs	r3, #8
 8001188:	737b      	strb	r3, [r7, #13]
	USART6pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800118a:	2300      	movs	r3, #0
 800118c:	733b      	strb	r3, [r7, #12]
	USART6pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800118e:	2301      	movs	r3, #1
 8001190:	72fb      	strb	r3, [r7, #11]
	USART6pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8001192:	2303      	movs	r3, #3
 8001194:	72bb      	strb	r3, [r7, #10]
	//TX
	USART6pins.GPIO_PinConfig.GPIO_PinNumber = USART6_TX;
 8001196:	230e      	movs	r3, #14
 8001198:	723b      	strb	r3, [r7, #8]
	GPIO_init(&USART6pins);
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	4618      	mov	r0, r3
 800119e:	f000 f987 	bl	80014b0 <GPIO_init>
	//RX
	USART6pins.GPIO_PinConfig.GPIO_PinNumber = USART6_RX;
 80011a2:	2309      	movs	r3, #9
 80011a4:	723b      	strb	r3, [r7, #8]
	GPIO_init(&USART6pins);
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 f981 	bl	80014b0 <GPIO_init>
}
 80011ae:	3710      	adds	r7, #16
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40021800 	.word	0x40021800

080011b8 <USART6_initUSART>:

void USART6_initUSART(void){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
	extern USART_Handle_t USART6Handle;
	//memset(from string.h): Sets a block of memory to a desired value (0 in this case)
	memset(&USART6Handle, 0, sizeof(USART6Handle));
 80011bc:	4817      	ldr	r0, [pc, #92]	; (800121c <USART6_initUSART+0x64>)
 80011be:	2100      	movs	r1, #0
 80011c0:	2224      	movs	r2, #36	; 0x24
 80011c2:	f000 fec1 	bl	8001f48 <memset>

	USART6Handle.pUSARTx = USART6;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <USART6_initUSART+0x64>)
 80011c8:	4a15      	ldr	r2, [pc, #84]	; (8001220 <USART6_initUSART+0x68>)
 80011ca:	601a      	str	r2, [r3, #0]
	USART6Handle.USART_Config.USART_Baud = USART_STD_BAUD_9600;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <USART6_initUSART+0x64>)
 80011ce:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80011d2:	609a      	str	r2, [r3, #8]
	USART6Handle.USART_Config.USART_Mode = USART_MODE_TXRX;
 80011d4:	4b11      	ldr	r3, [pc, #68]	; (800121c <USART6_initUSART+0x64>)
 80011d6:	2202      	movs	r2, #2
 80011d8:	711a      	strb	r2, [r3, #4]
	USART6Handle.USART_Config.USART_Oversampling = 1;
 80011da:	4b10      	ldr	r3, [pc, #64]	; (800121c <USART6_initUSART+0x64>)
 80011dc:	2201      	movs	r2, #1
 80011de:	715a      	strb	r2, [r3, #5]
	USART6Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <USART6_initUSART+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	731a      	strb	r2, [r3, #12]
	USART6Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80011e6:	4b0d      	ldr	r3, [pc, #52]	; (800121c <USART6_initUSART+0x64>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	739a      	strb	r2, [r3, #14]
	USART6Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <USART6_initUSART+0x64>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	735a      	strb	r2, [r3, #13]
	USART6Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80011f2:	4b0a      	ldr	r3, [pc, #40]	; (800121c <USART6_initUSART+0x64>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	73da      	strb	r2, [r3, #15]

	USART_init(&USART6Handle);
 80011f8:	4808      	ldr	r0, [pc, #32]	; (800121c <USART6_initUSART+0x64>)
 80011fa:	f7ff f9f9 	bl	80005f0 <USART_init>

    USART_IRQconfig(IRQ_VPOS_USART6, ENABLE);
 80011fe:	2047      	movs	r0, #71	; 0x47
 8001200:	2101      	movs	r1, #1
 8001202:	f7ff fc33 	bl	8000a6c <USART_IRQconfig>
    USART_IRQpriorityconfig(IRQ_VPOS_USART6, 1);
 8001206:	2047      	movs	r0, #71	; 0x47
 8001208:	2101      	movs	r1, #1
 800120a:	f7ff fceb 	bl	8000be4 <USART_IRQpriorityconfig>
	//This Function initializes the USART6 standard pins
	USART6_GPIO_init();
 800120e:	f7ff ffad 	bl	800116c <USART6_GPIO_init>
	USART_peripheral_control(USART6, ENABLE);
 8001212:	4803      	ldr	r0, [pc, #12]	; (8001220 <USART6_initUSART+0x68>)
 8001214:	2101      	movs	r1, #1
 8001216:	f7ff ff57 	bl	80010c8 <USART_peripheral_control>
}
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200000a8 	.word	0x200000a8
 8001220:	40011400 	.word	0x40011400

08001224 <put_char_usart>:

void put_char_usart(uint8_t data){
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
	while(USART_txIT(&USART6Handle, &data, 1) != USART_READY);
 800122e:	bf00      	nop
 8001230:	1dfb      	adds	r3, r7, #7
 8001232:	4805      	ldr	r0, [pc, #20]	; (8001248 <put_char_usart+0x24>)
 8001234:	4619      	mov	r1, r3
 8001236:	2201      	movs	r2, #1
 8001238:	f7ff fbc4 	bl	80009c4 <USART_txIT>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1f6      	bne.n	8001230 <put_char_usart+0xc>
}
 8001242:	3708      	adds	r7, #8
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	200000a8 	.word	0x200000a8

0800124c <get_char_usart>:
uint8_t get_char_usart(void){
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	static uint8_t rx_char = 0;
	while(USART_rxIT(&USART6Handle, &rx_char, 1) != USART_READY);
 8001250:	bf00      	nop
 8001252:	480a      	ldr	r0, [pc, #40]	; (800127c <get_char_usart+0x30>)
 8001254:	490a      	ldr	r1, [pc, #40]	; (8001280 <get_char_usart+0x34>)
 8001256:	2201      	movs	r2, #1
 8001258:	f7ff fbe2 	bl	8000a20 <USART_rxIT>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d1f7      	bne.n	8001252 <get_char_usart+0x6>

	while(rxComplete != SET);
 8001262:	bf00      	nop
 8001264:	4b07      	ldr	r3, [pc, #28]	; (8001284 <get_char_usart+0x38>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	2b01      	cmp	r3, #1
 800126c:	d1fa      	bne.n	8001264 <get_char_usart+0x18>
	rxComplete = RESET;
 800126e:	4b05      	ldr	r3, [pc, #20]	; (8001284 <get_char_usart+0x38>)
 8001270:	2200      	movs	r2, #0
 8001272:	701a      	strb	r2, [r3, #0]

	return rx_char;
 8001274:	4b02      	ldr	r3, [pc, #8]	; (8001280 <get_char_usart+0x34>)
 8001276:	781b      	ldrb	r3, [r3, #0]
}
 8001278:	4618      	mov	r0, r3
 800127a:	bd80      	pop	{r7, pc}
 800127c:	200000a8 	.word	0x200000a8
 8001280:	20000099 	.word	0x20000099
 8001284:	20000098 	.word	0x20000098

08001288 <setUsartBaud>:
void setUsartBaud(uint32_t newBaud){
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
	USART_peripheral_control(USART6, DISABLE);
 8001290:	4808      	ldr	r0, [pc, #32]	; (80012b4 <setUsartBaud+0x2c>)
 8001292:	2100      	movs	r1, #0
 8001294:	f7ff ff18 	bl	80010c8 <USART_peripheral_control>
	USART6Handle.USART_Config.USART_Baud = newBaud;
 8001298:	4a07      	ldr	r2, [pc, #28]	; (80012b8 <setUsartBaud+0x30>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6093      	str	r3, [r2, #8]
	USART_init(&USART6Handle);
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <setUsartBaud+0x30>)
 80012a0:	f7ff f9a6 	bl	80005f0 <USART_init>
	USART_peripheral_control(USART6, ENABLE);
 80012a4:	4803      	ldr	r0, [pc, #12]	; (80012b4 <setUsartBaud+0x2c>)
 80012a6:	2101      	movs	r1, #1
 80012a8:	f7ff ff0e 	bl	80010c8 <USART_peripheral_control>
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	40011400 	.word	0x40011400
 80012b8:	200000a8 	.word	0x200000a8

080012bc <USART6_IRQHandler>:

void USART6_IRQHandler(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
	USART_IRQHandling(&USART6Handle);
 80012c0:	4801      	ldr	r0, [pc, #4]	; (80012c8 <USART6_IRQHandler+0xc>)
 80012c2:	f7ff fcb9 	bl	8000c38 <USART_IRQHandling>
}
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	200000a8 	.word	0x200000a8

080012cc <USART_ApplicationEventCallback>:


void USART_ApplicationEventCallback( USART_Handle_t *pUSARTHandle, uint8_t AppEvent)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	70fb      	strb	r3, [r7, #3]
   if(AppEvent == USART_EVENT_RX_CMPLT){
 80012d8:	78fb      	ldrb	r3, [r7, #3]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	d103      	bne.n	80012e6 <USART_ApplicationEventCallback+0x1a>
	   rxComplete = SET;
 80012de:	4b09      	ldr	r3, [pc, #36]	; (8001304 <USART_ApplicationEventCallback+0x38>)
 80012e0:	2201      	movs	r2, #1
 80012e2:	701a      	strb	r2, [r3, #0]
 80012e4:	e00b      	b.n	80012fe <USART_ApplicationEventCallback+0x32>
//	   printf(":\tRx Complete\n");

   }else if (AppEvent == USART_EVENT_TX_CMPLT){
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d008      	beq.n	80012fe <USART_ApplicationEventCallback+0x32>
//	   printf(":\tTx Complete\n");

   }else if (AppEvent == USART_EVENT_IDLE) {
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d005      	beq.n	80012fe <USART_ApplicationEventCallback+0x32>
//	   printf("Usart Idle State\n");

   }else if (AppEvent == USART_ERR_ANY) {
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	2b08      	cmp	r3, #8
 80012f6:	d102      	bne.n	80012fe <USART_ApplicationEventCallback+0x32>
	   printf("Error sutil\n");
 80012f8:	4803      	ldr	r0, [pc, #12]	; (8001308 <USART_ApplicationEventCallback+0x3c>)
 80012fa:	f000 fea5 	bl	8002048 <puts>
   }
}
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	20000098 	.word	0x20000098
 8001308:	080028a0 	.word	0x080028a0

0800130c <GPIO_clk>:
 * 			clock for the given GPIO port
 * @param[*pGPIOx] - Pointer to the Register Definition of the Specified GPIO
 * @param[enable_disable] - Macro to ENABLE or DISABLE the Clock (EnorDi)
 ****************************************************************************/
void GPIO_clk(GPIO_RegDef_t *pGPIOx, uint8_t enable_disable)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	70fb      	strb	r3, [r7, #3]
	if (enable_disable == ENABLE) {
 8001318:	78fb      	ldrb	r3, [r7, #3]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d157      	bne.n	80013ce <GPIO_clk+0xc2>
		if(pGPIOx == GPIOA)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a5a      	ldr	r2, [pc, #360]	; (800148c <GPIO_clk+0x180>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d106      	bne.n	8001334 <GPIO_clk+0x28>
		{
			GPIOA_PCLK_EN();
 8001326:	4a5a      	ldr	r2, [pc, #360]	; (8001490 <GPIO_clk+0x184>)
 8001328:	4b59      	ldr	r3, [pc, #356]	; (8001490 <GPIO_clk+0x184>)
 800132a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	; 0x30
 8001332:	e0a6      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOB)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a57      	ldr	r2, [pc, #348]	; (8001494 <GPIO_clk+0x188>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d106      	bne.n	800134a <GPIO_clk+0x3e>
		{
			GPIOB_PCLK_EN();
 800133c:	4a54      	ldr	r2, [pc, #336]	; (8001490 <GPIO_clk+0x184>)
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <GPIO_clk+0x184>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	e09b      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOC)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a52      	ldr	r2, [pc, #328]	; (8001498 <GPIO_clk+0x18c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d106      	bne.n	8001360 <GPIO_clk+0x54>
		{
			GPIOC_PCLK_EN();
 8001352:	4a4f      	ldr	r2, [pc, #316]	; (8001490 <GPIO_clk+0x184>)
 8001354:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <GPIO_clk+0x184>)
 8001356:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	e090      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOD)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a4e      	ldr	r2, [pc, #312]	; (800149c <GPIO_clk+0x190>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d106      	bne.n	8001376 <GPIO_clk+0x6a>
		{
			GPIOD_PCLK_EN();
 8001368:	4a49      	ldr	r2, [pc, #292]	; (8001490 <GPIO_clk+0x184>)
 800136a:	4b49      	ldr	r3, [pc, #292]	; (8001490 <GPIO_clk+0x184>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f043 0308 	orr.w	r3, r3, #8
 8001372:	6313      	str	r3, [r2, #48]	; 0x30
 8001374:	e085      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4a49      	ldr	r2, [pc, #292]	; (80014a0 <GPIO_clk+0x194>)
 800137a:	4293      	cmp	r3, r2
 800137c:	d106      	bne.n	800138c <GPIO_clk+0x80>
		{
			GPIOE_PCLK_EN();
 800137e:	4a44      	ldr	r2, [pc, #272]	; (8001490 <GPIO_clk+0x184>)
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <GPIO_clk+0x184>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001384:	f043 0310 	orr.w	r3, r3, #16
 8001388:	6313      	str	r3, [r2, #48]	; 0x30
 800138a:	e07a      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOF)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a45      	ldr	r2, [pc, #276]	; (80014a4 <GPIO_clk+0x198>)
 8001390:	4293      	cmp	r3, r2
 8001392:	d106      	bne.n	80013a2 <GPIO_clk+0x96>
		{
			GPIOF_PCLK_EN();
 8001394:	4a3e      	ldr	r2, [pc, #248]	; (8001490 <GPIO_clk+0x184>)
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <GPIO_clk+0x184>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f043 0320 	orr.w	r3, r3, #32
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	e06f      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOG)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a40      	ldr	r2, [pc, #256]	; (80014a8 <GPIO_clk+0x19c>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d106      	bne.n	80013b8 <GPIO_clk+0xac>
		{
			GPIOG_PCLK_EN();
 80013aa:	4a39      	ldr	r2, [pc, #228]	; (8001490 <GPIO_clk+0x184>)
 80013ac:	4b38      	ldr	r3, [pc, #224]	; (8001490 <GPIO_clk+0x184>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	e064      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOH)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <GPIO_clk+0x1a0>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d160      	bne.n	8001482 <GPIO_clk+0x176>
		{
			GPIOH_PCLK_EN();
 80013c0:	4a33      	ldr	r2, [pc, #204]	; (8001490 <GPIO_clk+0x184>)
 80013c2:	4b33      	ldr	r3, [pc, #204]	; (8001490 <GPIO_clk+0x184>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ca:	6313      	str	r3, [r2, #48]	; 0x30
 80013cc:	e059      	b.n	8001482 <GPIO_clk+0x176>
		}
	}else if(enable_disable == DISABLE){
 80013ce:	78fb      	ldrb	r3, [r7, #3]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d156      	bne.n	8001482 <GPIO_clk+0x176>
		if(pGPIOx == GPIOA)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4a2d      	ldr	r2, [pc, #180]	; (800148c <GPIO_clk+0x180>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d106      	bne.n	80013ea <GPIO_clk+0xde>
		{
			GPIOA_PCLK_DI();
 80013dc:	4a2c      	ldr	r2, [pc, #176]	; (8001490 <GPIO_clk+0x184>)
 80013de:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <GPIO_clk+0x184>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f023 0301 	bic.w	r3, r3, #1
 80013e6:	6313      	str	r3, [r2, #48]	; 0x30
 80013e8:	e04b      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOB)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a29      	ldr	r2, [pc, #164]	; (8001494 <GPIO_clk+0x188>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d106      	bne.n	8001400 <GPIO_clk+0xf4>
		{
			GPIOB_PCLK_DI();
 80013f2:	4a27      	ldr	r2, [pc, #156]	; (8001490 <GPIO_clk+0x184>)
 80013f4:	4b26      	ldr	r3, [pc, #152]	; (8001490 <GPIO_clk+0x184>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f023 0302 	bic.w	r3, r3, #2
 80013fc:	6313      	str	r3, [r2, #48]	; 0x30
 80013fe:	e040      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOC)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a25      	ldr	r2, [pc, #148]	; (8001498 <GPIO_clk+0x18c>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d106      	bne.n	8001416 <GPIO_clk+0x10a>
		{
			GPIOC_PCLK_DI();
 8001408:	4a21      	ldr	r2, [pc, #132]	; (8001490 <GPIO_clk+0x184>)
 800140a:	4b21      	ldr	r3, [pc, #132]	; (8001490 <GPIO_clk+0x184>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	f023 0304 	bic.w	r3, r3, #4
 8001412:	6313      	str	r3, [r2, #48]	; 0x30
 8001414:	e035      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOD)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a20      	ldr	r2, [pc, #128]	; (800149c <GPIO_clk+0x190>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d106      	bne.n	800142c <GPIO_clk+0x120>
		{
			GPIOD_PCLK_DI();
 800141e:	4a1c      	ldr	r2, [pc, #112]	; (8001490 <GPIO_clk+0x184>)
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <GPIO_clk+0x184>)
 8001422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001424:	f023 0308 	bic.w	r3, r3, #8
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	e02a      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOE)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a1c      	ldr	r2, [pc, #112]	; (80014a0 <GPIO_clk+0x194>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d106      	bne.n	8001442 <GPIO_clk+0x136>
		{
			GPIOE_PCLK_DI();
 8001434:	4a16      	ldr	r2, [pc, #88]	; (8001490 <GPIO_clk+0x184>)
 8001436:	4b16      	ldr	r3, [pc, #88]	; (8001490 <GPIO_clk+0x184>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f023 0310 	bic.w	r3, r3, #16
 800143e:	6313      	str	r3, [r2, #48]	; 0x30
 8001440:	e01f      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOF)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a17      	ldr	r2, [pc, #92]	; (80014a4 <GPIO_clk+0x198>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d106      	bne.n	8001458 <GPIO_clk+0x14c>
		{
			GPIOF_PCLK_DI();
 800144a:	4a11      	ldr	r2, [pc, #68]	; (8001490 <GPIO_clk+0x184>)
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <GPIO_clk+0x184>)
 800144e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001450:	f023 0320 	bic.w	r3, r3, #32
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	e014      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOG)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <GPIO_clk+0x19c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d106      	bne.n	800146e <GPIO_clk+0x162>
		{
			GPIOG_PCLK_DI();
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <GPIO_clk+0x184>)
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <GPIO_clk+0x184>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	e009      	b.n	8001482 <GPIO_clk+0x176>
		}else if (pGPIOx == GPIOH)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a0e      	ldr	r2, [pc, #56]	; (80014ac <GPIO_clk+0x1a0>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d105      	bne.n	8001482 <GPIO_clk+0x176>
		{
			GPIOH_PCLK_DI();
 8001476:	4a06      	ldr	r2, [pc, #24]	; (8001490 <GPIO_clk+0x184>)
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <GPIO_clk+0x184>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
		}
	}
}
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40020000 	.word	0x40020000
 8001490:	40023800 	.word	0x40023800
 8001494:	40020400 	.word	0x40020400
 8001498:	40020800 	.word	0x40020800
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021000 	.word	0x40021000
 80014a4:	40021400 	.word	0x40021400
 80014a8:	40021800 	.word	0x40021800
 80014ac:	40021c00 	.word	0x40021c00

080014b0 <GPIO_init>:
 * @brief	- This function initializes the given GPIO pin structure
 *
 * @param[pGPIOHandle] - Pointer to GPIO Handle structure
 *****************************************************************/
void GPIO_init(GPIO_Handle_t *pGPIOHandle)
{
 80014b0:	b590      	push	{r4, r7, lr}
 80014b2:	b087      	sub	sp, #28
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
	//START THE CLOCK, DONT LEAVE IT UN-INITIALIZED
	GPIO_clk(pGPIOHandle->pGPIOx, ENABLE);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	2101      	movs	r1, #1
 80014c0:	f7ff ff24 	bl	800130c <GPIO_clk>

	uint32_t temp = 0; //Temporal register for allocations
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
	//1.Configure the mode of the pin	(MODER)
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	795b      	ldrb	r3, [r3, #5]
 80014cc:	2b03      	cmp	r3, #3
 80014ce:	d81f      	bhi.n	8001510 <GPIO_init+0x60>
	{ //get normal modes "¿Qué dijiste de mi MODER?"
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	795b      	ldrb	r3, [r3, #5]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80014d4:	461a      	mov	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	791b      	ldrb	r3, [r3, #4]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3

	uint32_t temp = 0; //Temporal register for allocations
	//1.Configure the mode of the pin	(MODER)
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{ //get normal modes "¿Qué dijiste de mi MODER?"
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
 80014e0:	617b      	str	r3, [r7, #20]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	687a      	ldr	r2, [r7, #4]
 80014e8:	6812      	ldr	r2, [r2, #0]
 80014ea:	6812      	ldr	r2, [r2, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	7909      	ldrb	r1, [r1, #4]
 80014f0:	0049      	lsls	r1, r1, #1
 80014f2:	2003      	movs	r0, #3
 80014f4:	fa00 f101 	lsl.w	r1, r0, r1
	//1.Configure the mode of the pin	(MODER)
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
	{ //get normal modes "¿Qué dijiste de mi MODER?"
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3
 80014f8:	43c9      	mvns	r1, r1
 80014fa:	400a      	ands	r2, r1
 80014fc:	601a      	str	r2, [r3, #0]
				<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		pGPIOHandle->pGPIOx->MODER |= temp;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	6811      	ldr	r1, [r2, #0]
 8001508:	697a      	ldr	r2, [r7, #20]
 800150a:	430a      	orrs	r2, r1
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	e0c9      	b.n	80016a4 <GPIO_init+0x1f4>

	}else{//it is an interrupt mode

		//0.Set pin in Input mode configuration
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6812      	ldr	r2, [r2, #0]
 8001518:	6812      	ldr	r2, [r2, #0]
						<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	7909      	ldrb	r1, [r1, #4]
 800151e:	0049      	lsls	r1, r1, #1
 8001520:	2003      	movs	r0, #3
 8001522:	fa00 f101 	lsl.w	r1, r0, r1
		pGPIOHandle->pGPIOx->MODER |= temp;

	}else{//it is an interrupt mode

		//0.Set pin in Input mode configuration
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3
 8001526:	43c9      	mvns	r1, r1
 8001528:	400a      	ands	r2, r1
 800152a:	601a      	str	r2, [r3, #0]
						<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
		//1.Configure the Trigger Selection Register
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	795b      	ldrb	r3, [r3, #5]
 8001530:	2b04      	cmp	r3, #4
 8001532:	d115      	bne.n	8001560 <GPIO_init+0xb0>
		{//Configure the FTSR (Falling Trigger Selection Register)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001534:	4944      	ldr	r1, [pc, #272]	; (8001648 <GPIO_init+0x198>)
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <GPIO_init+0x198>)
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	687a      	ldr	r2, [r7, #4]
 800153c:	7912      	ldrb	r2, [r2, #4]
 800153e:	4610      	mov	r0, r2
 8001540:	2201      	movs	r2, #1
 8001542:	4082      	lsls	r2, r0
 8001544:	4313      	orrs	r3, r2
 8001546:	60cb      	str	r3, [r1, #12]
			//clear the corresponding RTSR
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001548:	493f      	ldr	r1, [pc, #252]	; (8001648 <GPIO_init+0x198>)
 800154a:	4b3f      	ldr	r3, [pc, #252]	; (8001648 <GPIO_init+0x198>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	7912      	ldrb	r2, [r2, #4]
 8001552:	4610      	mov	r0, r2
 8001554:	2201      	movs	r2, #1
 8001556:	4082      	lsls	r2, r0
 8001558:	43d2      	mvns	r2, r2
 800155a:	4013      	ands	r3, r2
 800155c:	608b      	str	r3, [r1, #8]
 800155e:	e031      	b.n	80015c4 <GPIO_init+0x114>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	795b      	ldrb	r3, [r3, #5]
 8001564:	2b05      	cmp	r3, #5
 8001566:	d115      	bne.n	8001594 <GPIO_init+0xe4>
		{//Configure the RTSR (Rising Trigger Selection Register)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001568:	4937      	ldr	r1, [pc, #220]	; (8001648 <GPIO_init+0x198>)
 800156a:	4b37      	ldr	r3, [pc, #220]	; (8001648 <GPIO_init+0x198>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	687a      	ldr	r2, [r7, #4]
 8001570:	7912      	ldrb	r2, [r2, #4]
 8001572:	4610      	mov	r0, r2
 8001574:	2201      	movs	r2, #1
 8001576:	4082      	lsls	r2, r0
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]
			//clear the corresponding FTSR
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800157c:	4932      	ldr	r1, [pc, #200]	; (8001648 <GPIO_init+0x198>)
 800157e:	4b32      	ldr	r3, [pc, #200]	; (8001648 <GPIO_init+0x198>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	7912      	ldrb	r2, [r2, #4]
 8001586:	4610      	mov	r0, r2
 8001588:	2201      	movs	r2, #1
 800158a:	4082      	lsls	r2, r0
 800158c:	43d2      	mvns	r2, r2
 800158e:	4013      	ands	r3, r2
 8001590:	60cb      	str	r3, [r1, #12]
 8001592:	e017      	b.n	80015c4 <GPIO_init+0x114>

		} else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	795b      	ldrb	r3, [r3, #5]
 8001598:	2b06      	cmp	r3, #6
 800159a:	d113      	bne.n	80015c4 <GPIO_init+0x114>
		{//Configure both RTSR and FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800159c:	492a      	ldr	r1, [pc, #168]	; (8001648 <GPIO_init+0x198>)
 800159e:	4b2a      	ldr	r3, [pc, #168]	; (8001648 <GPIO_init+0x198>)
 80015a0:	68db      	ldr	r3, [r3, #12]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	7912      	ldrb	r2, [r2, #4]
 80015a6:	4610      	mov	r0, r2
 80015a8:	2201      	movs	r2, #1
 80015aa:	4082      	lsls	r2, r0
 80015ac:	4313      	orrs	r3, r2
 80015ae:	60cb      	str	r3, [r1, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80015b0:	4925      	ldr	r1, [pc, #148]	; (8001648 <GPIO_init+0x198>)
 80015b2:	4b25      	ldr	r3, [pc, #148]	; (8001648 <GPIO_init+0x198>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	687a      	ldr	r2, [r7, #4]
 80015b8:	7912      	ldrb	r2, [r2, #4]
 80015ba:	4610      	mov	r0, r2
 80015bc:	2201      	movs	r2, #1
 80015be:	4082      	lsls	r2, r0
 80015c0:	4313      	orrs	r3, r2
 80015c2:	608b      	str	r3, [r1, #8]
		}

		//2.Configure the GPIO port selection in SYSCFG_EXTI Control Register
		uint32_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	791b      	ldrb	r3, [r3, #4]
 80015c8:	089b      	lsrs	r3, r3, #2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	613b      	str	r3, [r7, #16]
		uint32_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4 ;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	791b      	ldrb	r3, [r3, #4]
 80015d2:	f003 0303 	and.w	r3, r3, #3
 80015d6:	60fb      	str	r3, [r7, #12]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1b      	ldr	r2, [pc, #108]	; (800164c <GPIO_init+0x19c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d044      	beq.n	800166c <GPIO_init+0x1bc>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1a      	ldr	r2, [pc, #104]	; (8001650 <GPIO_init+0x1a0>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d02b      	beq.n	8001644 <GPIO_init+0x194>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <GPIO_init+0x1a4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d024      	beq.n	8001640 <GPIO_init+0x190>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a17      	ldr	r2, [pc, #92]	; (8001658 <GPIO_init+0x1a8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d01d      	beq.n	800163c <GPIO_init+0x18c>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a15      	ldr	r2, [pc, #84]	; (800165c <GPIO_init+0x1ac>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d016      	beq.n	8001638 <GPIO_init+0x188>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a14      	ldr	r2, [pc, #80]	; (8001660 <GPIO_init+0x1b0>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d00f      	beq.n	8001634 <GPIO_init+0x184>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a12      	ldr	r2, [pc, #72]	; (8001664 <GPIO_init+0x1b4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d008      	beq.n	8001630 <GPIO_init+0x180>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a11      	ldr	r2, [pc, #68]	; (8001668 <GPIO_init+0x1b8>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d101      	bne.n	800162c <GPIO_init+0x17c>
 8001628:	2307      	movs	r3, #7
 800162a:	e020      	b.n	800166e <GPIO_init+0x1be>
 800162c:	2300      	movs	r3, #0
 800162e:	e01e      	b.n	800166e <GPIO_init+0x1be>
 8001630:	2306      	movs	r3, #6
 8001632:	e01c      	b.n	800166e <GPIO_init+0x1be>
 8001634:	2305      	movs	r3, #5
 8001636:	e01a      	b.n	800166e <GPIO_init+0x1be>
 8001638:	2304      	movs	r3, #4
 800163a:	e018      	b.n	800166e <GPIO_init+0x1be>
 800163c:	2303      	movs	r3, #3
 800163e:	e016      	b.n	800166e <GPIO_init+0x1be>
 8001640:	2302      	movs	r3, #2
 8001642:	e014      	b.n	800166e <GPIO_init+0x1be>
 8001644:	2301      	movs	r3, #1
 8001646:	e012      	b.n	800166e <GPIO_init+0x1be>
 8001648:	40013c00 	.word	0x40013c00
 800164c:	40020000 	.word	0x40020000
 8001650:	40020400 	.word	0x40020400
 8001654:	40020800 	.word	0x40020800
 8001658:	40020c00 	.word	0x40020c00
 800165c:	40021000 	.word	0x40021000
 8001660:	40021400 	.word	0x40021400
 8001664:	40021800 	.word	0x40021800
 8001668:	40021c00 	.word	0x40021c00
 800166c:	2300      	movs	r3, #0
 800166e:	72fb      	strb	r3, [r7, #11]
		SYSCFG_PCLK_EN();
 8001670:	4a59      	ldr	r2, [pc, #356]	; (80017d8 <GPIO_init+0x328>)
 8001672:	4b59      	ldr	r3, [pc, #356]	; (80017d8 <GPIO_init+0x328>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800167a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = (portcode << (temp2 * 4));
 800167c:	4957      	ldr	r1, [pc, #348]	; (80017dc <GPIO_init+0x32c>)
 800167e:	7afb      	ldrb	r3, [r7, #11]
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	0092      	lsls	r2, r2, #2
 8001684:	4093      	lsls	r3, r2
 8001686:	461a      	mov	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	3302      	adds	r3, #2
 800168c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


		//3.Enable the EXTI interrupt delivery using IMR(Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8001690:	4953      	ldr	r1, [pc, #332]	; (80017e0 <GPIO_init+0x330>)
 8001692:	4b53      	ldr	r3, [pc, #332]	; (80017e0 <GPIO_init+0x330>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	7912      	ldrb	r2, [r2, #4]
 800169a:	4610      	mov	r0, r2
 800169c:	2201      	movs	r2, #1
 800169e:	4082      	lsls	r2, r0
 80016a0:	4313      	orrs	r3, r2
 80016a2:	600b      	str	r3, [r1, #0]
	}
	temp = 0;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
	//2.Configure the output speed				(OSPEEDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	799b      	ldrb	r3, [r3, #6]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	791b      	ldrb	r3, [r3, #4]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
		//3.Enable the EXTI interrupt delivery using IMR(Interrupt Mask Register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
	}
	temp = 0;
	//2.Configure the output speed				(OSPEEDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
 80016b8:	617b      	str	r3, [r7, #20]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	6812      	ldr	r2, [r2, #0]
 80016c2:	6892      	ldr	r2, [r2, #8]
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	7909      	ldrb	r1, [r1, #4]
 80016c8:	0049      	lsls	r1, r1, #1
 80016ca:	2003      	movs	r0, #3
 80016cc:	fa00 f101 	lsl.w	r1, r0, r1
	}
	temp = 0;
	//2.Configure the output speed				(OSPEEDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3
 80016d0:	43c9      	mvns	r1, r1
 80016d2:	400a      	ands	r2, r1
 80016d4:	609a      	str	r2, [r3, #8]
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	6812      	ldr	r2, [r2, #0]
 80016de:	6891      	ldr	r1, [r2, #8]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	430a      	orrs	r2, r1
 80016e4:	609a      	str	r2, [r3, #8]
	temp = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]

	//3.Configure the pU-pD settings	(PUPDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	79db      	ldrb	r3, [r3, #7]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	791b      	ldrb	r3, [r3, #4]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
	temp = 0;

	//3.Configure the pU-pD settings	(PUPDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
 80016fa:	617b      	str	r3, [r7, #20]
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6812      	ldr	r2, [r2, #0]
 8001704:	68d2      	ldr	r2, [r2, #12]
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	7909      	ldrb	r1, [r1, #4]
 800170a:	0049      	lsls	r1, r1, #1
 800170c:	2003      	movs	r0, #3
 800170e:	fa00 f101 	lsl.w	r1, r0, r1
	temp = 0;

	//3.Configure the pU-pD settings	(PUPDR)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl
			<< (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3
 8001712:	43c9      	mvns	r1, r1
 8001714:	400a      	ands	r2, r1
 8001716:	60da      	str	r2, [r3, #12]
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	68d1      	ldr	r1, [r2, #12]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	430a      	orrs	r2, r1
 8001726:	60da      	str	r2, [r3, #12]
	temp = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]

	//4.Configure the Output Type		(OTYPER)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	7a1b      	ldrb	r3, [r3, #8]
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	791b      	ldrb	r3, [r3, #4]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
			<< ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
	pGPIOHandle->pGPIOx->PUPDR |= temp;
	temp = 0;

	//4.Configure the Output Type		(OTYPER)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
 800173a:	617b      	str	r3, [r7, #20]
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	687a      	ldr	r2, [r7, #4]
 8001742:	6812      	ldr	r2, [r2, #0]
 8001744:	6852      	ldr	r2, [r2, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	7909      	ldrb	r1, [r1, #4]
 800174a:	4608      	mov	r0, r1
 800174c:	2101      	movs	r1, #1
 800174e:	4081      	lsls	r1, r0
	temp = 0;

	//4.Configure the Output Type		(OTYPER)
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType
			<< (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1
 8001750:	43c9      	mvns	r1, r1
 8001752:	400a      	ands	r2, r1
 8001754:	605a      	str	r2, [r3, #4]
			<< pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	687a      	ldr	r2, [r7, #4]
 800175c:	6812      	ldr	r2, [r2, #0]
 800175e:	6851      	ldr	r1, [r2, #4]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	430a      	orrs	r2, r1
 8001764:	605a      	str	r2, [r3, #4]
	temp = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]

	//5.Configure the Alt Functionality	(AFR[2])
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	795b      	ldrb	r3, [r3, #5]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d12f      	bne.n	80017d2 <GPIO_init+0x322>
	{//configure the Alternate function modes
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	791b      	ldrb	r3, [r3, #4]
 8001776:	08db      	lsrs	r3, r3, #3
 8001778:	72bb      	strb	r3, [r7, #10]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	791b      	ldrb	r3, [r3, #4]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	727b      	strb	r3, [r7, #9]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	7aba      	ldrb	r2, [r7, #10]
 800178a:	6879      	ldr	r1, [r7, #4]
 800178c:	6809      	ldr	r1, [r1, #0]
 800178e:	7ab8      	ldrb	r0, [r7, #10]
 8001790:	3008      	adds	r0, #8
 8001792:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8001796:	7a78      	ldrb	r0, [r7, #9]
 8001798:	0080      	lsls	r0, r0, #2
 800179a:	240f      	movs	r4, #15
 800179c:	fa04 f000 	lsl.w	r0, r4, r0
 80017a0:	43c0      	mvns	r0, r0
 80017a2:	4001      	ands	r1, r0
 80017a4:	3208      	adds	r2, #8
 80017a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	7aba      	ldrb	r2, [r7, #10]
 80017b0:	6879      	ldr	r1, [r7, #4]
 80017b2:	6809      	ldr	r1, [r1, #0]
 80017b4:	7ab8      	ldrb	r0, [r7, #10]
 80017b6:	3008      	adds	r0, #8
 80017b8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	7a40      	ldrb	r0, [r0, #9]
 80017c0:	4604      	mov	r4, r0
 80017c2:	7a78      	ldrb	r0, [r7, #9]
 80017c4:	0080      	lsls	r0, r0, #2
 80017c6:	fa04 f000 	lsl.w	r0, r4, r0
	{//configure the Alternate function modes
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
		pGPIOHandle->pGPIOx->AFR[temp1] |=
 80017ca:	4301      	orrs	r1, r0
 80017cc:	3208      	adds	r2, #8
 80017ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
				(pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
	}
}
 80017d2:	371c      	adds	r7, #28
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40013800 	.word	0x40013800
 80017e0:	40013c00 	.word	0x40013c00

080017e4 <GPIO_deinit>:
 * @brief	- This function de-initialize the given GPIO peripheral
 *
 * @param[pGPIOx] - Base address of the GPIO peripheral
 *****************************************************************/
void GPIO_deinit(GPIO_RegDef_t *pGPIOx)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
	if(pGPIOx == GPIOA)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a45      	ldr	r2, [pc, #276]	; (8001904 <GPIO_deinit+0x120>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d10c      	bne.n	800180e <GPIO_deinit+0x2a>
	{
		GPIOA_REG_RESET();
 80017f4:	4a44      	ldr	r2, [pc, #272]	; (8001908 <GPIO_deinit+0x124>)
 80017f6:	4b44      	ldr	r3, [pc, #272]	; (8001908 <GPIO_deinit+0x124>)
 80017f8:	691b      	ldr	r3, [r3, #16]
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6113      	str	r3, [r2, #16]
 8001800:	4a41      	ldr	r2, [pc, #260]	; (8001908 <GPIO_deinit+0x124>)
 8001802:	4b41      	ldr	r3, [pc, #260]	; (8001908 <GPIO_deinit+0x124>)
 8001804:	691b      	ldr	r3, [r3, #16]
 8001806:	f023 0301 	bic.w	r3, r3, #1
 800180a:	6113      	str	r3, [r2, #16]
 800180c:	e075      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOB)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a3e      	ldr	r2, [pc, #248]	; (800190c <GPIO_deinit+0x128>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d10c      	bne.n	8001830 <GPIO_deinit+0x4c>
	{
		GPIOB_REG_RESET();
 8001816:	4a3c      	ldr	r2, [pc, #240]	; (8001908 <GPIO_deinit+0x124>)
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <GPIO_deinit+0x124>)
 800181a:	691b      	ldr	r3, [r3, #16]
 800181c:	f043 0302 	orr.w	r3, r3, #2
 8001820:	6113      	str	r3, [r2, #16]
 8001822:	4a39      	ldr	r2, [pc, #228]	; (8001908 <GPIO_deinit+0x124>)
 8001824:	4b38      	ldr	r3, [pc, #224]	; (8001908 <GPIO_deinit+0x124>)
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	f023 0302 	bic.w	r3, r3, #2
 800182c:	6113      	str	r3, [r2, #16]
 800182e:	e064      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOC)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a37      	ldr	r2, [pc, #220]	; (8001910 <GPIO_deinit+0x12c>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d10c      	bne.n	8001852 <GPIO_deinit+0x6e>
	{
		GPIOC_REG_RESET();
 8001838:	4a33      	ldr	r2, [pc, #204]	; (8001908 <GPIO_deinit+0x124>)
 800183a:	4b33      	ldr	r3, [pc, #204]	; (8001908 <GPIO_deinit+0x124>)
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	f043 0304 	orr.w	r3, r3, #4
 8001842:	6113      	str	r3, [r2, #16]
 8001844:	4a30      	ldr	r2, [pc, #192]	; (8001908 <GPIO_deinit+0x124>)
 8001846:	4b30      	ldr	r3, [pc, #192]	; (8001908 <GPIO_deinit+0x124>)
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	f023 0304 	bic.w	r3, r3, #4
 800184e:	6113      	str	r3, [r2, #16]
 8001850:	e053      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOD)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a2f      	ldr	r2, [pc, #188]	; (8001914 <GPIO_deinit+0x130>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d10c      	bne.n	8001874 <GPIO_deinit+0x90>
	{
		GPIOD_REG_RESET();
 800185a:	4a2b      	ldr	r2, [pc, #172]	; (8001908 <GPIO_deinit+0x124>)
 800185c:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <GPIO_deinit+0x124>)
 800185e:	691b      	ldr	r3, [r3, #16]
 8001860:	f043 0308 	orr.w	r3, r3, #8
 8001864:	6113      	str	r3, [r2, #16]
 8001866:	4a28      	ldr	r2, [pc, #160]	; (8001908 <GPIO_deinit+0x124>)
 8001868:	4b27      	ldr	r3, [pc, #156]	; (8001908 <GPIO_deinit+0x124>)
 800186a:	691b      	ldr	r3, [r3, #16]
 800186c:	f023 0308 	bic.w	r3, r3, #8
 8001870:	6113      	str	r3, [r2, #16]
 8001872:	e042      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOE)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a28      	ldr	r2, [pc, #160]	; (8001918 <GPIO_deinit+0x134>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d10c      	bne.n	8001896 <GPIO_deinit+0xb2>
	{
		GPIOE_REG_RESET();
 800187c:	4a22      	ldr	r2, [pc, #136]	; (8001908 <GPIO_deinit+0x124>)
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <GPIO_deinit+0x124>)
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f043 0310 	orr.w	r3, r3, #16
 8001886:	6113      	str	r3, [r2, #16]
 8001888:	4a1f      	ldr	r2, [pc, #124]	; (8001908 <GPIO_deinit+0x124>)
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <GPIO_deinit+0x124>)
 800188c:	691b      	ldr	r3, [r3, #16]
 800188e:	f023 0310 	bic.w	r3, r3, #16
 8001892:	6113      	str	r3, [r2, #16]
 8001894:	e031      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOF)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a20      	ldr	r2, [pc, #128]	; (800191c <GPIO_deinit+0x138>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d10c      	bne.n	80018b8 <GPIO_deinit+0xd4>
	{
		GPIOF_REG_RESET();
 800189e:	4a1a      	ldr	r2, [pc, #104]	; (8001908 <GPIO_deinit+0x124>)
 80018a0:	4b19      	ldr	r3, [pc, #100]	; (8001908 <GPIO_deinit+0x124>)
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	f043 0320 	orr.w	r3, r3, #32
 80018a8:	6113      	str	r3, [r2, #16]
 80018aa:	4a17      	ldr	r2, [pc, #92]	; (8001908 <GPIO_deinit+0x124>)
 80018ac:	4b16      	ldr	r3, [pc, #88]	; (8001908 <GPIO_deinit+0x124>)
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	f023 0320 	bic.w	r3, r3, #32
 80018b4:	6113      	str	r3, [r2, #16]
 80018b6:	e020      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOG)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	4a19      	ldr	r2, [pc, #100]	; (8001920 <GPIO_deinit+0x13c>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d10c      	bne.n	80018da <GPIO_deinit+0xf6>
	{
		GPIOG_REG_RESET();
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <GPIO_deinit+0x124>)
 80018c2:	4b11      	ldr	r3, [pc, #68]	; (8001908 <GPIO_deinit+0x124>)
 80018c4:	691b      	ldr	r3, [r3, #16]
 80018c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018ca:	6113      	str	r3, [r2, #16]
 80018cc:	4a0e      	ldr	r2, [pc, #56]	; (8001908 <GPIO_deinit+0x124>)
 80018ce:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <GPIO_deinit+0x124>)
 80018d0:	691b      	ldr	r3, [r3, #16]
 80018d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80018d6:	6113      	str	r3, [r2, #16]
 80018d8:	e00f      	b.n	80018fa <GPIO_deinit+0x116>
	}else if (pGPIOx == GPIOH)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a11      	ldr	r2, [pc, #68]	; (8001924 <GPIO_deinit+0x140>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10b      	bne.n	80018fa <GPIO_deinit+0x116>
	{
		GPIOH_REG_RESET();
 80018e2:	4a09      	ldr	r2, [pc, #36]	; (8001908 <GPIO_deinit+0x124>)
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <GPIO_deinit+0x124>)
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018ec:	6113      	str	r3, [r2, #16]
 80018ee:	4a06      	ldr	r2, [pc, #24]	; (8001908 <GPIO_deinit+0x124>)
 80018f0:	4b05      	ldr	r3, [pc, #20]	; (8001908 <GPIO_deinit+0x124>)
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80018f8:	6113      	str	r3, [r2, #16]
	}
}
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	40020000 	.word	0x40020000
 8001908:	40023800 	.word	0x40023800
 800190c:	40020400 	.word	0x40020400
 8001910:	40020800 	.word	0x40020800
 8001914:	40020c00 	.word	0x40020c00
 8001918:	40021000 	.word	0x40021000
 800191c:	40021400 	.word	0x40021400
 8001920:	40021800 	.word	0x40021800
 8001924:	40021c00 	.word	0x40021c00

08001928 <GPIO_readpin>:
 * @param[pin_number]	- Pin number
 *
 * @return	- Digital value of the pin
 *****************************************************************/
uint8_t GPIO_readpin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 8001928:	b480      	push	{r7}
 800192a:	b085      	sub	sp, #20
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
	uint8_t value = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]
	value = (uint8_t)(pGPIOx->IDR >> pin_number) & 0x1;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691a      	ldr	r2, [r3, #16]
 800193c:	78fb      	ldrb	r3, [r7, #3]
 800193e:	fa22 f303 	lsr.w	r3, r2, r3
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 0301 	and.w	r3, r3, #1
 8001948:	73fb      	strb	r3, [r7, #15]
	return value;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <GPIO_readport>:
 * @param[pGPIOx] - Base address of the GPIO peripheral
 *
 * @return	- Value read from the selected port
 *****************************************************************/
uint16_t GPIO_readport(GPIO_RegDef_t *pGPIOx)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
	uint16_t value = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	81fb      	strh	r3, [r7, #14]
	value = (uint16_t)(pGPIOx->IDR);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	81fb      	strh	r3, [r7, #14]
	return value;
 800196a:	89fb      	ldrh	r3, [r7, #14]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3714      	adds	r7, #20
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <GPIO_writepin>:
 * @param[pGPIOx]		- Base address of the GPIO peripheral
 * @param[pin_number]	- Pin number
 * @param[value]		- Digital Value (Set/Reset)
 *****************************************************************/
void GPIO_writepin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number, uint8_t value)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	460b      	mov	r3, r1
 8001982:	70fb      	strb	r3, [r7, #3]
 8001984:	4613      	mov	r3, r2
 8001986:	70bb      	strb	r3, [r7, #2]
	if (value == SET)
 8001988:	78bb      	ldrb	r3, [r7, #2]
 800198a:	2b01      	cmp	r3, #1
 800198c:	d109      	bne.n	80019a2 <GPIO_writepin+0x2a>
	{//write 1 to the Output Data Register at the bit field of the pin
		pGPIOx->ODR |= (1 << pin_number);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	2101      	movs	r1, #1
 8001996:	fa01 f202 	lsl.w	r2, r1, r2
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	615a      	str	r2, [r3, #20]
 80019a0:	e00c      	b.n	80019bc <GPIO_writepin+0x44>
	} else if (value == RESET){
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d109      	bne.n	80019bc <GPIO_writepin+0x44>
		pGPIOx->ODR &= ~(1 << pin_number);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	78fa      	ldrb	r2, [r7, #3]
 80019ae:	2101      	movs	r1, #1
 80019b0:	fa01 f202 	lsl.w	r2, r1, r2
 80019b4:	43d2      	mvns	r2, r2
 80019b6:	401a      	ands	r2, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	615a      	str	r2, [r3, #20]
	}
}
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop

080019c8 <GPIO_writeport>:
 *
 * @param[pGPIOx]	- Base address of the GPIO peripheral
 * @param[value]	- 16 bit value
 *****************************************************************/
void GPIO_writeport(GPIO_RegDef_t *pGPIOx, uint16_t value)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	460b      	mov	r3, r1
 80019d2:	807b      	strh	r3, [r7, #2]
	pGPIOx->ODR = value;
 80019d4:	887a      	ldrh	r2, [r7, #2]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	615a      	str	r2, [r3, #20]
}
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <GPIO_togglepin>:
 *
 * @param[pGPIOx]		- Base address of the GPIO peripheral
 * @param[pin_number]	- Pin number
 *****************************************************************/
void GPIO_togglepin(GPIO_RegDef_t *pGPIOx, uint8_t pin_number)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR  ^= ( 1 << pin_number);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	78fa      	ldrb	r2, [r7, #3]
 80019f6:	2101      	movs	r1, #1
 80019f8:	fa01 f202 	lsl.w	r2, r1, r2
 80019fc:	405a      	eors	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	615a      	str	r2, [r3, #20]
}
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <GPIO_toggleport>:
 * @brief	- This function toggles the current value in a
 * 				specific output port
 *
 * @param[pGPIOx] - Base address of the GPIO peripheral
 *****************************************************************/
void GPIO_toggleport(GPIO_RegDef_t *pGPIOx){
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
	pGPIOx->ODR ^= 0xFFFFFFFF;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	615a      	str	r2, [r3, #20]
}
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <GPIO_IRQconfig>:
 *
 * @param[IRQnumber] 		- IRQ Interrupt number
 * @param[enable_disable]	- Macro: Enable/Disable
 *****************************************************************/
void GPIO_IRQconfig(uint8_t IRQnumber, uint8_t enable_disable)
{
 8001a28:	b490      	push	{r4, r7}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	460a      	mov	r2, r1
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71bb      	strb	r3, [r7, #6]
	if (enable_disable == ENABLE)
 8001a38:	79bb      	ldrb	r3, [r7, #6]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d14c      	bne.n	8001ad8 <GPIO_IRQconfig+0xb0>
	{//Configure ISERx (Interrupt Set-Enable Registers)
		if (IRQnumber < 32) {//ISER0 register
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	2b1f      	cmp	r3, #31
 8001a42:	d809      	bhi.n	8001a58 <GPIO_IRQconfig+0x30>
			*NVIC_ISER0 |= (1 << IRQnumber);
 8001a44:	494d      	ldr	r1, [pc, #308]	; (8001b7c <GPIO_IRQconfig+0x154>)
 8001a46:	4b4d      	ldr	r3, [pc, #308]	; (8001b7c <GPIO_IRQconfig+0x154>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	79fa      	ldrb	r2, [r7, #7]
 8001a4c:	2001      	movs	r0, #1
 8001a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a52:	4313      	orrs	r3, r2
 8001a54:	600b      	str	r3, [r1, #0]
 8001a56:	e08d      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
		}else if (IRQnumber >= 32 && IRQnumber < 64) {//ISER1 register
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	2b1f      	cmp	r3, #31
 8001a5c:	d90e      	bls.n	8001a7c <GPIO_IRQconfig+0x54>
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b3f      	cmp	r3, #63	; 0x3f
 8001a62:	d80b      	bhi.n	8001a7c <GPIO_IRQconfig+0x54>
			*NVIC_ISER1 |= (1 << IRQnumber%32);
 8001a64:	4946      	ldr	r1, [pc, #280]	; (8001b80 <GPIO_IRQconfig+0x158>)
 8001a66:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <GPIO_IRQconfig+0x158>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	79fa      	ldrb	r2, [r7, #7]
 8001a6c:	f002 021f 	and.w	r2, r2, #31
 8001a70:	2001      	movs	r0, #1
 8001a72:	fa00 f202 	lsl.w	r2, r0, r2
 8001a76:	4313      	orrs	r3, r2
 8001a78:	600b      	str	r3, [r1, #0]
 8001a7a:	e02c      	b.n	8001ad6 <GPIO_IRQconfig+0xae>
		}else if (IRQnumber >= 64 && IRQnumber < 96) {//ISER2 register
 8001a7c:	79fb      	ldrb	r3, [r7, #7]
 8001a7e:	2b3f      	cmp	r3, #63	; 0x3f
 8001a80:	d90e      	bls.n	8001aa0 <GPIO_IRQconfig+0x78>
 8001a82:	79fb      	ldrb	r3, [r7, #7]
 8001a84:	2b5f      	cmp	r3, #95	; 0x5f
 8001a86:	d80b      	bhi.n	8001aa0 <GPIO_IRQconfig+0x78>
			*NVIC_ISER2 |= (1 << IRQnumber%64);
 8001a88:	493e      	ldr	r1, [pc, #248]	; (8001b84 <GPIO_IRQconfig+0x15c>)
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <GPIO_IRQconfig+0x15c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	79fa      	ldrb	r2, [r7, #7]
 8001a90:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001a94:	2001      	movs	r0, #1
 8001a96:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]
 8001a9e:	e01a      	b.n	8001ad6 <GPIO_IRQconfig+0xae>
		}else if (IRQnumber >= 96 && IRQnumber < 128) {//ISER3 register
 8001aa0:	79fb      	ldrb	r3, [r7, #7]
 8001aa2:	2b5f      	cmp	r3, #95	; 0x5f
 8001aa4:	d966      	bls.n	8001b74 <GPIO_IRQconfig+0x14c>
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	db62      	blt.n	8001b74 <GPIO_IRQconfig+0x14c>
			*NVIC_ISER3 |= (1 << IRQnumber%96);
 8001aae:	4c36      	ldr	r4, [pc, #216]	; (8001b88 <GPIO_IRQconfig+0x160>)
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <GPIO_IRQconfig+0x160>)
 8001ab2:	6818      	ldr	r0, [r3, #0]
 8001ab4:	79fa      	ldrb	r2, [r7, #7]
 8001ab6:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <GPIO_IRQconfig+0x164>)
 8001ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8001abc:	0999      	lsrs	r1, r3, #6
 8001abe:	460b      	mov	r3, r1
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	440b      	add	r3, r1
 8001ac4:	015b      	lsls	r3, r3, #5
 8001ac6:	1ad3      	subs	r3, r2, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	461a      	mov	r2, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	4093      	lsls	r3, r2
 8001ad0:	4303      	orrs	r3, r0
 8001ad2:	6023      	str	r3, [r4, #0]
 8001ad4:	e04e      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
 8001ad6:	e04d      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
		}
	}else if (enable_disable == DISABLE)
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d14a      	bne.n	8001b74 <GPIO_IRQconfig+0x14c>
	{//Configure ICERx (Interrupt Clear-Enable Registers)
		if (IRQnumber < 32) {//ICER0 register
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	2b1f      	cmp	r3, #31
 8001ae2:	d809      	bhi.n	8001af8 <GPIO_IRQconfig+0xd0>
			*NVIC_ICER0 |= (1 << IRQnumber);
 8001ae4:	492a      	ldr	r1, [pc, #168]	; (8001b90 <GPIO_IRQconfig+0x168>)
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <GPIO_IRQconfig+0x168>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	79fa      	ldrb	r2, [r7, #7]
 8001aec:	2001      	movs	r0, #1
 8001aee:	fa00 f202 	lsl.w	r2, r0, r2
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]
 8001af6:	e03d      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
		}else if (IRQnumber >= 32 && IRQnumber < 64) {//ICER1 register
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	2b1f      	cmp	r3, #31
 8001afc:	d90e      	bls.n	8001b1c <GPIO_IRQconfig+0xf4>
 8001afe:	79fb      	ldrb	r3, [r7, #7]
 8001b00:	2b3f      	cmp	r3, #63	; 0x3f
 8001b02:	d80b      	bhi.n	8001b1c <GPIO_IRQconfig+0xf4>
			*NVIC_ICER1 |= (1 << IRQnumber%32);
 8001b04:	4923      	ldr	r1, [pc, #140]	; (8001b94 <GPIO_IRQconfig+0x16c>)
 8001b06:	4b23      	ldr	r3, [pc, #140]	; (8001b94 <GPIO_IRQconfig+0x16c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	79fa      	ldrb	r2, [r7, #7]
 8001b0c:	f002 021f 	and.w	r2, r2, #31
 8001b10:	2001      	movs	r0, #1
 8001b12:	fa00 f202 	lsl.w	r2, r0, r2
 8001b16:	4313      	orrs	r3, r2
 8001b18:	600b      	str	r3, [r1, #0]
 8001b1a:	e02b      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
		}else if (IRQnumber >= 64 && IRQnumber < 96) {//ICER2 register
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b20:	d90e      	bls.n	8001b40 <GPIO_IRQconfig+0x118>
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b5f      	cmp	r3, #95	; 0x5f
 8001b26:	d80b      	bhi.n	8001b40 <GPIO_IRQconfig+0x118>
			*NVIC_ICER2 |= (1 << IRQnumber%64);
 8001b28:	491b      	ldr	r1, [pc, #108]	; (8001b98 <GPIO_IRQconfig+0x170>)
 8001b2a:	4b1b      	ldr	r3, [pc, #108]	; (8001b98 <GPIO_IRQconfig+0x170>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	79fa      	ldrb	r2, [r7, #7]
 8001b30:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8001b34:	2001      	movs	r0, #1
 8001b36:	fa00 f202 	lsl.w	r2, r0, r2
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	600b      	str	r3, [r1, #0]
 8001b3e:	e019      	b.n	8001b74 <GPIO_IRQconfig+0x14c>
		}else if (IRQnumber >= 96 && IRQnumber < 128) {//ICER3 register
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	2b5f      	cmp	r3, #95	; 0x5f
 8001b44:	d916      	bls.n	8001b74 <GPIO_IRQconfig+0x14c>
 8001b46:	79fb      	ldrb	r3, [r7, #7]
 8001b48:	b25b      	sxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	db12      	blt.n	8001b74 <GPIO_IRQconfig+0x14c>
			*NVIC_ICER3 |= (1 << IRQnumber%96);
 8001b4e:	4c13      	ldr	r4, [pc, #76]	; (8001b9c <GPIO_IRQconfig+0x174>)
 8001b50:	4b12      	ldr	r3, [pc, #72]	; (8001b9c <GPIO_IRQconfig+0x174>)
 8001b52:	6818      	ldr	r0, [r3, #0]
 8001b54:	79fa      	ldrb	r2, [r7, #7]
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <GPIO_IRQconfig+0x164>)
 8001b58:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5c:	0999      	lsrs	r1, r3, #6
 8001b5e:	460b      	mov	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	440b      	add	r3, r1
 8001b64:	015b      	lsls	r3, r3, #5
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	b2db      	uxtb	r3, r3
 8001b6a:	461a      	mov	r2, r3
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	4093      	lsls	r3, r2
 8001b70:	4303      	orrs	r3, r0
 8001b72:	6023      	str	r3, [r4, #0]
		}
	}
}
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc90      	pop	{r4, r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000e104 	.word	0xe000e104
 8001b84:	e000e108 	.word	0xe000e108
 8001b88:	e000e10c 	.word	0xe000e10c
 8001b8c:	aaaaaaab 	.word	0xaaaaaaab
 8001b90:	e000e180 	.word	0xe000e180
 8001b94:	e000e184 	.word	0xe000e184
 8001b98:	e000e188 	.word	0xe000e188
 8001b9c:	e000e18c 	.word	0xe000e18c

08001ba0 <GPIO_IRQpriorityconfig>:
 *
 * @param[IRQNumber]	- IRQ Interrupt number
 * @param[IRQPriority]	- IRQ interrupt priority
 *****************************************************************/
void GPIO_IRQpriorityconfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b085      	sub	sp, #20
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	6039      	str	r1, [r7, #0]
 8001baa:	71fb      	strb	r3, [r7, #7]
	//1. Find the Interrupt Priority Register
	uint8_t iprx = IRQNumber / 4;
 8001bac:	79fb      	ldrb	r3, [r7, #7]
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	73fb      	strb	r3, [r7, #15]
	uint8_t iprx_section = IRQNumber % 4;
 8001bb2:	79fb      	ldrb	r3, [r7, #7]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	73bb      	strb	r3, [r7, #14]
	uint8_t shift_priority =  (8*iprx_section) + (8-IMPLEMENTED_PR_BITS);
 8001bba:	7bbb      	ldrb	r3, [r7, #14]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	3304      	adds	r3, #4
 8001bc2:	737b      	strb	r3, [r7, #13]
	*(NVIC_IPR_BASEADDR + iprx) |= (IRQPriority << shift_priority );
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8001bcc:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001bd0:	7bfa      	ldrb	r2, [r7, #15]
 8001bd2:	0092      	lsls	r2, r2, #2
 8001bd4:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
 8001bd8:	f502 4264 	add.w	r2, r2, #58368	; 0xe400
 8001bdc:	6811      	ldr	r1, [r2, #0]
 8001bde:	7b7a      	ldrb	r2, [r7, #13]
 8001be0:	6838      	ldr	r0, [r7, #0]
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	430a      	orrs	r2, r1
 8001be8:	601a      	str	r2, [r3, #0]
}
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <GPIO_IRQhandling>:
 * @brief	- This function handles the interrupt in a pin
 *
 * @param[pin_number] - Pin number
 *****************************************************************/
void GPIO_IRQhandling(uint8_t pin_number)
{//clear the EXTI Priority register corresponding to the pin number
 8001bf4:	b480      	push	{r7}
 8001bf6:	b083      	sub	sp, #12
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	71fb      	strb	r3, [r7, #7]
	if (EXTI->PR & (1 << pin_number)) //clear
 8001bfe:	4b0b      	ldr	r3, [pc, #44]	; (8001c2c <GPIO_IRQhandling+0x38>)
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	79fa      	ldrb	r2, [r7, #7]
 8001c04:	2101      	movs	r1, #1
 8001c06:	fa01 f202 	lsl.w	r2, r1, r2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d008      	beq.n	8001c22 <GPIO_IRQhandling+0x2e>
		EXTI->PR |= (1 << pin_number);
 8001c10:	4906      	ldr	r1, [pc, #24]	; (8001c2c <GPIO_IRQhandling+0x38>)
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <GPIO_IRQhandling+0x38>)
 8001c14:	695b      	ldr	r3, [r3, #20]
 8001c16:	79fa      	ldrb	r2, [r7, #7]
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	614b      	str	r3, [r1, #20]
}
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	40013c00 	.word	0x40013c00

08001c30 <GPIO_BoardLEDSInit>:
 * @fn		- GPIO_BoardLEDSInit
 *
 * @brief	- This function initializes the LEDs in the NUCLEO-144 board
 * 				Also intializes the D13 pin for the SmartGPU2
 *****************************************************************/
void GPIO_BoardLEDSInit(void){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	; 0x30
 8001c34:	af00      	add	r7, sp, #0
	GPIO_Handle_t led_07;//central blue led,PB7
	GPIO_Handle_t led_14;//right red led,	PB14
	GPIO_Handle_t pin_D13;//digital 13, 	PA5

	//memset(from string.h): Sets a block of memory to a desired value (0 in this case)
	memset(&led_00, 0, sizeof(GPIO_Handle_t));
 8001c36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	220c      	movs	r2, #12
 8001c40:	f000 f982 	bl	8001f48 <memset>
	memset(&led_07, 0, sizeof(GPIO_Handle_t));
 8001c44:	f107 0318 	add.w	r3, r7, #24
 8001c48:	4618      	mov	r0, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	220c      	movs	r2, #12
 8001c4e:	f000 f97b 	bl	8001f48 <memset>
	memset(&led_14, 0, sizeof(GPIO_Handle_t));
 8001c52:	f107 030c 	add.w	r3, r7, #12
 8001c56:	4618      	mov	r0, r3
 8001c58:	2100      	movs	r1, #0
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	f000 f974 	bl	8001f48 <memset>
	memset(&pin_D13, 0, sizeof(GPIO_Handle_t));
 8001c60:	463b      	mov	r3, r7
 8001c62:	4618      	mov	r0, r3
 8001c64:	2100      	movs	r1, #0
 8001c66:	220c      	movs	r2, #12
 8001c68:	f000 f96e 	bl	8001f48 <memset>

	//PB0
	led_00.pGPIOx = GPIOB;
 8001c6c:	4b17      	ldr	r3, [pc, #92]	; (8001ccc <GPIO_BoardLEDSInit+0x9c>)
 8001c6e:	627b      	str	r3, [r7, #36]	; 0x24
	led_00.GPIO_PinConfig.GPIO_PinNumber = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	led_00.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001c76:	2301      	movs	r3, #1
 8001c78:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	led_00.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	led_00.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001c82:	2301      	movs	r3, #1
 8001c84:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	led_00.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	GPIO_init(&led_00);
 8001c8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fc0c 	bl	80014b0 <GPIO_init>

	//PB7
	led_07.GPIO_PinConfig.GPIO_PinNumber = 7;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	773b      	strb	r3, [r7, #28]
	GPIO_init(&led_07);
 8001c9c:	f107 0318 	add.w	r3, r7, #24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fc05 	bl	80014b0 <GPIO_init>

	//PB14
	led_14.GPIO_PinConfig.GPIO_PinNumber = 14;
 8001ca6:	230e      	movs	r3, #14
 8001ca8:	743b      	strb	r3, [r7, #16]
	GPIO_init(&led_14);
 8001caa:	f107 030c 	add.w	r3, r7, #12
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fbfe 	bl	80014b0 <GPIO_init>

	//PA5
	pin_D13.pGPIOx = GPIOA;
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <GPIO_BoardLEDSInit+0xa0>)
 8001cb6:	603b      	str	r3, [r7, #0]
	pin_D13.GPIO_PinConfig.GPIO_PinNumber = 5;
 8001cb8:	2305      	movs	r3, #5
 8001cba:	713b      	strb	r3, [r7, #4]
	GPIO_init(&pin_D13);
 8001cbc:	463b      	mov	r3, r7
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fbf6 	bl	80014b0 <GPIO_init>
}
 8001cc4:	3730      	adds	r7, #48	; 0x30
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40020400 	.word	0x40020400
 8001cd0:	40020000 	.word	0x40020000

08001cd4 <GPIO_BoardButtonInit>:
/*****************************************************************
 * @fn		- GPIO_BoardButtonInit
 *
 * @brief	- This function initializes the User Button in the NUCLEO-144 board
 *****************************************************************/
void GPIO_BoardButtonInit(void){
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
	GPIO_Handle_t board_button;
	memset(&board_button, 0, sizeof(GPIO_Handle_t));
 8001cda:	1d3b      	adds	r3, r7, #4
 8001cdc:	4618      	mov	r0, r3
 8001cde:	2100      	movs	r1, #0
 8001ce0:	220c      	movs	r2, #12
 8001ce2:	f000 f931 	bl	8001f48 <memset>

	board_button.pGPIOx = GPIOC;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <GPIO_BoardButtonInit+0x44>)
 8001ce8:	607b      	str	r3, [r7, #4]
	board_button.GPIO_PinConfig.GPIO_PinNumber = 13;
 8001cea:	230d      	movs	r3, #13
 8001cec:	723b      	strb	r3, [r7, #8]
	board_button.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	727b      	strb	r3, [r7, #9]
	board_button.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_LOW;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	72bb      	strb	r3, [r7, #10]
	//Not an output board_button.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
	board_button.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PD;
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	72fb      	strb	r3, [r7, #11]
	GPIO_init(&board_button);
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff fbd7 	bl	80014b0 <GPIO_init>
	//IRQ configuration
	GPIO_IRQpriorityconfig(IRQ_VPOS_EXTI15_10, 15);
 8001d02:	2028      	movs	r0, #40	; 0x28
 8001d04:	210f      	movs	r1, #15
 8001d06:	f7ff ff4b 	bl	8001ba0 <GPIO_IRQpriorityconfig>
	GPIO_IRQconfig(IRQ_VPOS_EXTI15_10, ENABLE);
 8001d0a:	2028      	movs	r0, #40	; 0x28
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	f7ff fe8b 	bl	8001a28 <GPIO_IRQconfig>
}
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40020800 	.word	0x40020800

08001d1c <delay>:

/*
 * SmartGPU2/arduino special functions
 */

void delay(uint32_t value) {
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
	for (uint32_t i = 0; i < (value * 2500); ++i);
 8001d24:	2300      	movs	r3, #0
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	e002      	b.n	8001d30 <delay+0x14>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001d36:	fb02 f203 	mul.w	r2, r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d8f4      	bhi.n	8001d2a <delay+0xe>
}
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop

08001d4c <delay_debounce>:

uint8_t delay_debounce(enum ButtonStates button_state) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
    if (GPIO_readpin(GPIOC, 13)){                      /* if pressed     */
 8001d56:	481e      	ldr	r0, [pc, #120]	; (8001dd0 <delay_debounce+0x84>)
 8001d58:	210d      	movs	r1, #13
 8001d5a:	f7ff fde5 	bl	8001928 <GPIO_readpin>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d014      	beq.n	8001d8e <delay_debounce+0x42>
        if (button_state == PRESS){
 8001d64:	79fb      	ldrb	r3, [r7, #7]
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d101      	bne.n	8001d6e <delay_debounce+0x22>
            button_state = DOWN;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	71fb      	strb	r3, [r7, #7]
        }
        if (button_state == UP){
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d127      	bne.n	8001dc4 <delay_debounce+0x78>
            delay(100);
 8001d74:	2064      	movs	r0, #100	; 0x64
 8001d76:	f7ff ffd1 	bl	8001d1c <delay>
            if (GPIO_readpin(GPIOC, 13) == 1){
 8001d7a:	4815      	ldr	r0, [pc, #84]	; (8001dd0 <delay_debounce+0x84>)
 8001d7c:	210d      	movs	r1, #13
 8001d7e:	f7ff fdd3 	bl	8001928 <GPIO_readpin>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d11d      	bne.n	8001dc4 <delay_debounce+0x78>
                button_state = PRESS;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	71fb      	strb	r3, [r7, #7]
 8001d8c:	e01a      	b.n	8001dc4 <delay_debounce+0x78>
            }
        }
    } else {                                 /* if not pressed */
        if (button_state == RELEASE){
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d101      	bne.n	8001d98 <delay_debounce+0x4c>
            button_state = UP;
 8001d94:	2300      	movs	r3, #0
 8001d96:	71fb      	strb	r3, [r7, #7]
        }
        if (button_state == DOWN){
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d112      	bne.n	8001dc4 <delay_debounce+0x78>
            if (GPIO_readpin(GPIOC, 13) == 0){
 8001d9e:	480c      	ldr	r0, [pc, #48]	; (8001dd0 <delay_debounce+0x84>)
 8001da0:	210d      	movs	r1, #13
 8001da2:	f7ff fdc1 	bl	8001928 <GPIO_readpin>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d10b      	bne.n	8001dc4 <delay_debounce+0x78>
               delay(100);
 8001dac:	2064      	movs	r0, #100	; 0x64
 8001dae:	f7ff ffb5 	bl	8001d1c <delay>
                if (GPIO_readpin(GPIOC, 13) == 0){
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <delay_debounce+0x84>)
 8001db4:	210d      	movs	r1, #13
 8001db6:	f7ff fdb7 	bl	8001928 <GPIO_readpin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d101      	bne.n	8001dc4 <delay_debounce+0x78>
                    button_state = RELEASE;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	71fb      	strb	r3, [r7, #7]
                }
            }
        }
    }
    return button_state;
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	40020800 	.word	0x40020800

08001dd4 <digitalWrite>:

void digitalWrite(uint8_t pin_number, uint8_t value){
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	4603      	mov	r3, r0
 8001ddc:	460a      	mov	r2, r1
 8001dde:	71fb      	strb	r3, [r7, #7]
 8001de0:	4613      	mov	r3, r2
 8001de2:	71bb      	strb	r3, [r7, #6]
	GPIO_writepin(GPIOA, pin_number, value);
 8001de4:	79fa      	ldrb	r2, [r7, #7]
 8001de6:	79bb      	ldrb	r3, [r7, #6]
 8001de8:	4806      	ldr	r0, [pc, #24]	; (8001e04 <digitalWrite+0x30>)
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	f7ff fdc3 	bl	8001978 <GPIO_writepin>

	//to visualize it, watch it from the blue led on-board
	GPIO_writepin(GPIOB, 7, value);
 8001df2:	79bb      	ldrb	r3, [r7, #6]
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <digitalWrite+0x34>)
 8001df6:	2107      	movs	r1, #7
 8001df8:	461a      	mov	r2, r3
 8001dfa:	f7ff fdbd 	bl	8001978 <GPIO_writepin>
}
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40020000 	.word	0x40020000
 8001e08:	40020400 	.word	0x40020400

08001e0c <main>:
 *  Created on: 22 mar. 2020
 *      Author: Alexander Gomez
 */
#include "./inc/stm32f413xx.h"

int main(void) {
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
	GPIO_Handle_t led0;
	GPIO_Handle_t led7;
	GPIO_Handle_t led14;
	GPIO_clk(GPIOB, ENABLE);
 8001e12:	4824      	ldr	r0, [pc, #144]	; (8001ea4 <main+0x98>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	f7ff fa79 	bl	800130c <GPIO_clk>
	led0.pGPIOx = GPIOB;
 8001e1a:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <main+0x98>)
 8001e1c:	61fb      	str	r3, [r7, #28]
	led0.GPIO_PinConfig.GPIO_PinNumber = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f887 3020 	strb.w	r3, [r7, #32]
	led0.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001e24:	2301      	movs	r3, #1
 8001e26:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	led0.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8001e2a:	2302      	movs	r3, #2
 8001e2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	led0.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	led0.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8001e36:	2301      	movs	r3, #1
 8001e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	GPIO_init(&led0);
 8001e3c:	f107 031c 	add.w	r3, r7, #28
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fb35 	bl	80014b0 <GPIO_init>

	led7.pGPIOx = GPIOB;
 8001e46:	4b17      	ldr	r3, [pc, #92]	; (8001ea4 <main+0x98>)
 8001e48:	613b      	str	r3, [r7, #16]
	led7.GPIO_PinConfig.GPIO_PinNumber = 7;
 8001e4a:	2307      	movs	r3, #7
 8001e4c:	753b      	strb	r3, [r7, #20]
	led7.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	757b      	strb	r3, [r7, #21]
	led7.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001e52:	2300      	movs	r3, #0
 8001e54:	763b      	strb	r3, [r7, #24]
	GPIO_init(&led7);
 8001e56:	f107 0310 	add.w	r3, r7, #16
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f7ff fb28 	bl	80014b0 <GPIO_init>


	led14.pGPIOx = GPIOB;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <main+0x98>)
 8001e62:	607b      	str	r3, [r7, #4]
	led14.GPIO_PinConfig.GPIO_PinNumber = 14;
 8001e64:	230e      	movs	r3, #14
 8001e66:	723b      	strb	r3, [r7, #8]
	led14.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	727b      	strb	r3, [r7, #9]
	led14.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	733b      	strb	r3, [r7, #12]
	GPIO_init(&led14);
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7ff fb1c 	bl	80014b0 <GPIO_init>


	while(TRUE){
		GPIO_togglepin(GPIOB, 0);
 8001e78:	480a      	ldr	r0, [pc, #40]	; (8001ea4 <main+0x98>)
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	f7ff fdb2 	bl	80019e4 <GPIO_togglepin>
		delay(10);
 8001e80:	200a      	movs	r0, #10
 8001e82:	f7ff ff4b 	bl	8001d1c <delay>
		GPIO_togglepin(GPIOB, 7);
 8001e86:	4807      	ldr	r0, [pc, #28]	; (8001ea4 <main+0x98>)
 8001e88:	2107      	movs	r1, #7
 8001e8a:	f7ff fdab 	bl	80019e4 <GPIO_togglepin>
		delay(20);
 8001e8e:	2014      	movs	r0, #20
 8001e90:	f7ff ff44 	bl	8001d1c <delay>
		GPIO_togglepin(GPIOB, 14);
 8001e94:	4803      	ldr	r0, [pc, #12]	; (8001ea4 <main+0x98>)
 8001e96:	210e      	movs	r1, #14
 8001e98:	f7ff fda4 	bl	80019e4 <GPIO_togglepin>
		delay(30);
 8001e9c:	201e      	movs	r0, #30
 8001e9e:	f7ff ff3d 	bl	8001d1c <delay>
	}
 8001ea2:	e7e9      	b.n	8001e78 <main+0x6c>
 8001ea4:	40020400 	.word	0x40020400

08001ea8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ea8:	480d      	ldr	r0, [pc, #52]	; (8001ee0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001eaa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eac:	480d      	ldr	r0, [pc, #52]	; (8001ee4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001eae:	490e      	ldr	r1, [pc, #56]	; (8001ee8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001eb0:	4a0e      	ldr	r2, [pc, #56]	; (8001eec <LoopForever+0xe>)
  movs r3, #0
 8001eb2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eb4:	e002      	b.n	8001ebc <LoopCopyDataInit>

08001eb6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eb6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eb8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eba:	3304      	adds	r3, #4

08001ebc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ebc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ebe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ec0:	d3f9      	bcc.n	8001eb6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ec2:	4a0b      	ldr	r2, [pc, #44]	; (8001ef0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ec4:	4c0b      	ldr	r4, [pc, #44]	; (8001ef4 <LoopForever+0x16>)
  movs r3, #0
 8001ec6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ec8:	e001      	b.n	8001ece <LoopFillZerobss>

08001eca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ecc:	3204      	adds	r2, #4

08001ece <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ece:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ed0:	d3fb      	bcc.n	8001eca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001ed2:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8001ed6:	f000 f811 	bl	8001efc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001eda:	f7ff ff97 	bl	8001e0c <main>

08001ede <LoopForever>:

LoopForever:
    b LoopForever
 8001ede:	e7fe      	b.n	8001ede <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001ee0:	20050000 	.word	0x20050000
  mov   sp, r0          /* set stack pointer */

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ee8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001eec:	0800291c 	.word	0x0800291c
  adds r4, r0, r3
  cmp r4, r1
  bcc CopyDataInit

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001ef4:	200000d0 	.word	0x200000d0

08001ef8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ef8:	e7fe      	b.n	8001ef8 <ADC_IRQHandler>
	...

08001efc <__libc_init_array>:
 8001efc:	b570      	push	{r4, r5, r6, lr}
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <__libc_init_array+0x3c>)
 8001f00:	4c0e      	ldr	r4, [pc, #56]	; (8001f3c <__libc_init_array+0x40>)
 8001f02:	1ae4      	subs	r4, r4, r3
 8001f04:	10a4      	asrs	r4, r4, #2
 8001f06:	2500      	movs	r5, #0
 8001f08:	461e      	mov	r6, r3
 8001f0a:	42a5      	cmp	r5, r4
 8001f0c:	d004      	beq.n	8001f18 <__libc_init_array+0x1c>
 8001f0e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f12:	4798      	blx	r3
 8001f14:	3501      	adds	r5, #1
 8001f16:	e7f8      	b.n	8001f0a <__libc_init_array+0xe>
 8001f18:	f000 fcb6 	bl	8002888 <_init>
 8001f1c:	4c08      	ldr	r4, [pc, #32]	; (8001f40 <__libc_init_array+0x44>)
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <__libc_init_array+0x48>)
 8001f20:	1ae4      	subs	r4, r4, r3
 8001f22:	10a4      	asrs	r4, r4, #2
 8001f24:	2500      	movs	r5, #0
 8001f26:	461e      	mov	r6, r3
 8001f28:	42a5      	cmp	r5, r4
 8001f2a:	d004      	beq.n	8001f36 <__libc_init_array+0x3a>
 8001f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f30:	4798      	blx	r3
 8001f32:	3501      	adds	r5, #1
 8001f34:	e7f8      	b.n	8001f28 <__libc_init_array+0x2c>
 8001f36:	bd70      	pop	{r4, r5, r6, pc}
 8001f38:	08002914 	.word	0x08002914
 8001f3c:	08002914 	.word	0x08002914
 8001f40:	08002918 	.word	0x08002918
 8001f44:	08002914 	.word	0x08002914

08001f48 <memset>:
 8001f48:	4402      	add	r2, r0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d002      	beq.n	8001f56 <memset+0xe>
 8001f50:	f803 1b01 	strb.w	r1, [r3], #1
 8001f54:	e7fa      	b.n	8001f4c <memset+0x4>
 8001f56:	4770      	bx	lr

08001f58 <_puts_r>:
 8001f58:	b570      	push	{r4, r5, r6, lr}
 8001f5a:	460e      	mov	r6, r1
 8001f5c:	4605      	mov	r5, r0
 8001f5e:	b118      	cbz	r0, 8001f68 <_puts_r+0x10>
 8001f60:	6983      	ldr	r3, [r0, #24]
 8001f62:	b90b      	cbnz	r3, 8001f68 <_puts_r+0x10>
 8001f64:	f000 fa26 	bl	80023b4 <__sinit>
 8001f68:	69ab      	ldr	r3, [r5, #24]
 8001f6a:	68ac      	ldr	r4, [r5, #8]
 8001f6c:	b913      	cbnz	r3, 8001f74 <_puts_r+0x1c>
 8001f6e:	4628      	mov	r0, r5
 8001f70:	f000 fa20 	bl	80023b4 <__sinit>
 8001f74:	4b31      	ldr	r3, [pc, #196]	; (800203c <_puts_r+0xe4>)
 8001f76:	429c      	cmp	r4, r3
 8001f78:	d101      	bne.n	8001f7e <_puts_r+0x26>
 8001f7a:	686c      	ldr	r4, [r5, #4]
 8001f7c:	e008      	b.n	8001f90 <_puts_r+0x38>
 8001f7e:	4b30      	ldr	r3, [pc, #192]	; (8002040 <_puts_r+0xe8>)
 8001f80:	429c      	cmp	r4, r3
 8001f82:	d101      	bne.n	8001f88 <_puts_r+0x30>
 8001f84:	68ac      	ldr	r4, [r5, #8]
 8001f86:	e003      	b.n	8001f90 <_puts_r+0x38>
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <_puts_r+0xec>)
 8001f8a:	429c      	cmp	r4, r3
 8001f8c:	bf08      	it	eq
 8001f8e:	68ec      	ldreq	r4, [r5, #12]
 8001f90:	89a3      	ldrh	r3, [r4, #12]
 8001f92:	0719      	lsls	r1, r3, #28
 8001f94:	d501      	bpl.n	8001f9a <_puts_r+0x42>
 8001f96:	6923      	ldr	r3, [r4, #16]
 8001f98:	b983      	cbnz	r3, 8001fbc <_puts_r+0x64>
 8001f9a:	4628      	mov	r0, r5
 8001f9c:	4621      	mov	r1, r4
 8001f9e:	f000 f8af 	bl	8002100 <__swsetup_r>
 8001fa2:	b158      	cbz	r0, 8001fbc <_puts_r+0x64>
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001fa8:	bd70      	pop	{r4, r5, r6, pc}
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	db0e      	blt.n	8001fcc <_puts_r+0x74>
 8001fae:	6823      	ldr	r3, [r4, #0]
 8001fb0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8001fb4:	701a      	strb	r2, [r3, #0]
 8001fb6:	6823      	ldr	r3, [r4, #0]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	6023      	str	r3, [r4, #0]
 8001fbc:	68a3      	ldr	r3, [r4, #8]
 8001fbe:	f816 2b01 	ldrb.w	r2, [r6], #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60a3      	str	r3, [r4, #8]
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d1ef      	bne.n	8001faa <_puts_r+0x52>
 8001fca:	e016      	b.n	8001ffa <_puts_r+0xa2>
 8001fcc:	69a2      	ldr	r2, [r4, #24]
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	db09      	blt.n	8001fe6 <_puts_r+0x8e>
 8001fd2:	6823      	ldr	r3, [r4, #0]
 8001fd4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8001fd8:	701a      	strb	r2, [r3, #0]
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	7819      	ldrb	r1, [r3, #0]
 8001fde:	290a      	cmp	r1, #10
 8001fe0:	d1ea      	bne.n	8001fb8 <_puts_r+0x60>
 8001fe2:	4628      	mov	r0, r5
 8001fe4:	e002      	b.n	8001fec <_puts_r+0x94>
 8001fe6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8001fea:	4628      	mov	r0, r5
 8001fec:	4622      	mov	r2, r4
 8001fee:	f000 f833 	bl	8002058 <__swbuf_r>
 8001ff2:	1c42      	adds	r2, r0, #1
 8001ff4:	4250      	negs	r0, r2
 8001ff6:	4150      	adcs	r0, r2
 8001ff8:	e7d3      	b.n	8001fa2 <_puts_r+0x4a>
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	da15      	bge.n	800202a <_puts_r+0xd2>
 8001ffe:	69a2      	ldr	r2, [r4, #24]
 8002000:	4293      	cmp	r3, r2
 8002002:	db08      	blt.n	8002016 <_puts_r+0xbe>
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	220a      	movs	r2, #10
 8002008:	701a      	strb	r2, [r3, #0]
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	7819      	ldrb	r1, [r3, #0]
 800200e:	4291      	cmp	r1, r2
 8002010:	d10f      	bne.n	8002032 <_puts_r+0xda>
 8002012:	4628      	mov	r0, r5
 8002014:	e001      	b.n	800201a <_puts_r+0xc2>
 8002016:	4628      	mov	r0, r5
 8002018:	210a      	movs	r1, #10
 800201a:	4622      	mov	r2, r4
 800201c:	f000 f81c 	bl	8002058 <__swbuf_r>
 8002020:	1c43      	adds	r3, r0, #1
 8002022:	4258      	negs	r0, r3
 8002024:	4158      	adcs	r0, r3
 8002026:	b130      	cbz	r0, 8002036 <_puts_r+0xde>
 8002028:	e7bc      	b.n	8001fa4 <_puts_r+0x4c>
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	220a      	movs	r2, #10
 800202e:	701a      	strb	r2, [r3, #0]
 8002030:	6823      	ldr	r3, [r4, #0]
 8002032:	3301      	adds	r3, #1
 8002034:	6023      	str	r3, [r4, #0]
 8002036:	200a      	movs	r0, #10
 8002038:	bd70      	pop	{r4, r5, r6, pc}
 800203a:	bf00      	nop
 800203c:	080028b4 	.word	0x080028b4
 8002040:	080028d4 	.word	0x080028d4
 8002044:	080028f4 	.word	0x080028f4

08002048 <puts>:
 8002048:	4b02      	ldr	r3, [pc, #8]	; (8002054 <puts+0xc>)
 800204a:	4601      	mov	r1, r0
 800204c:	6818      	ldr	r0, [r3, #0]
 800204e:	f7ff bf83 	b.w	8001f58 <_puts_r>
 8002052:	bf00      	nop
 8002054:	20000078 	.word	0x20000078

08002058 <__swbuf_r>:
 8002058:	b570      	push	{r4, r5, r6, lr}
 800205a:	460d      	mov	r5, r1
 800205c:	4614      	mov	r4, r2
 800205e:	4606      	mov	r6, r0
 8002060:	b118      	cbz	r0, 800206a <__swbuf_r+0x12>
 8002062:	6983      	ldr	r3, [r0, #24]
 8002064:	b90b      	cbnz	r3, 800206a <__swbuf_r+0x12>
 8002066:	f000 f9a5 	bl	80023b4 <__sinit>
 800206a:	4b22      	ldr	r3, [pc, #136]	; (80020f4 <__swbuf_r+0x9c>)
 800206c:	429c      	cmp	r4, r3
 800206e:	d101      	bne.n	8002074 <__swbuf_r+0x1c>
 8002070:	6874      	ldr	r4, [r6, #4]
 8002072:	e008      	b.n	8002086 <__swbuf_r+0x2e>
 8002074:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <__swbuf_r+0xa0>)
 8002076:	429c      	cmp	r4, r3
 8002078:	d101      	bne.n	800207e <__swbuf_r+0x26>
 800207a:	68b4      	ldr	r4, [r6, #8]
 800207c:	e003      	b.n	8002086 <__swbuf_r+0x2e>
 800207e:	4b1f      	ldr	r3, [pc, #124]	; (80020fc <__swbuf_r+0xa4>)
 8002080:	429c      	cmp	r4, r3
 8002082:	bf08      	it	eq
 8002084:	68f4      	ldreq	r4, [r6, #12]
 8002086:	69a3      	ldr	r3, [r4, #24]
 8002088:	60a3      	str	r3, [r4, #8]
 800208a:	89a3      	ldrh	r3, [r4, #12]
 800208c:	071a      	lsls	r2, r3, #28
 800208e:	d509      	bpl.n	80020a4 <__swbuf_r+0x4c>
 8002090:	6923      	ldr	r3, [r4, #16]
 8002092:	b13b      	cbz	r3, 80020a4 <__swbuf_r+0x4c>
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	6920      	ldr	r0, [r4, #16]
 8002098:	1a18      	subs	r0, r3, r0
 800209a:	6963      	ldr	r3, [r4, #20]
 800209c:	4298      	cmp	r0, r3
 800209e:	b2ed      	uxtb	r5, r5
 80020a0:	db0f      	blt.n	80020c2 <__swbuf_r+0x6a>
 80020a2:	e008      	b.n	80020b6 <__swbuf_r+0x5e>
 80020a4:	4630      	mov	r0, r6
 80020a6:	4621      	mov	r1, r4
 80020a8:	f000 f82a 	bl	8002100 <__swsetup_r>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	d0f1      	beq.n	8002094 <__swbuf_r+0x3c>
 80020b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020b4:	bd70      	pop	{r4, r5, r6, pc}
 80020b6:	4630      	mov	r0, r6
 80020b8:	4621      	mov	r1, r4
 80020ba:	f000 f911 	bl	80022e0 <_fflush_r>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d1f6      	bne.n	80020b0 <__swbuf_r+0x58>
 80020c2:	68a3      	ldr	r3, [r4, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60a3      	str	r3, [r4, #8]
 80020c8:	6823      	ldr	r3, [r4, #0]
 80020ca:	1c5a      	adds	r2, r3, #1
 80020cc:	6022      	str	r2, [r4, #0]
 80020ce:	701d      	strb	r5, [r3, #0]
 80020d0:	6963      	ldr	r3, [r4, #20]
 80020d2:	3001      	adds	r0, #1
 80020d4:	4298      	cmp	r0, r3
 80020d6:	d004      	beq.n	80020e2 <__swbuf_r+0x8a>
 80020d8:	89a3      	ldrh	r3, [r4, #12]
 80020da:	07db      	lsls	r3, r3, #31
 80020dc:	d507      	bpl.n	80020ee <__swbuf_r+0x96>
 80020de:	2d0a      	cmp	r5, #10
 80020e0:	d105      	bne.n	80020ee <__swbuf_r+0x96>
 80020e2:	4630      	mov	r0, r6
 80020e4:	4621      	mov	r1, r4
 80020e6:	f000 f8fb 	bl	80022e0 <_fflush_r>
 80020ea:	2800      	cmp	r0, #0
 80020ec:	d1e0      	bne.n	80020b0 <__swbuf_r+0x58>
 80020ee:	4628      	mov	r0, r5
 80020f0:	bd70      	pop	{r4, r5, r6, pc}
 80020f2:	bf00      	nop
 80020f4:	080028b4 	.word	0x080028b4
 80020f8:	080028d4 	.word	0x080028d4
 80020fc:	080028f4 	.word	0x080028f4

08002100 <__swsetup_r>:
 8002100:	4b31      	ldr	r3, [pc, #196]	; (80021c8 <__swsetup_r+0xc8>)
 8002102:	b570      	push	{r4, r5, r6, lr}
 8002104:	681d      	ldr	r5, [r3, #0]
 8002106:	4606      	mov	r6, r0
 8002108:	460c      	mov	r4, r1
 800210a:	b125      	cbz	r5, 8002116 <__swsetup_r+0x16>
 800210c:	69ab      	ldr	r3, [r5, #24]
 800210e:	b913      	cbnz	r3, 8002116 <__swsetup_r+0x16>
 8002110:	4628      	mov	r0, r5
 8002112:	f000 f94f 	bl	80023b4 <__sinit>
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <__swsetup_r+0xcc>)
 8002118:	429c      	cmp	r4, r3
 800211a:	d101      	bne.n	8002120 <__swsetup_r+0x20>
 800211c:	686c      	ldr	r4, [r5, #4]
 800211e:	e008      	b.n	8002132 <__swsetup_r+0x32>
 8002120:	4b2b      	ldr	r3, [pc, #172]	; (80021d0 <__swsetup_r+0xd0>)
 8002122:	429c      	cmp	r4, r3
 8002124:	d101      	bne.n	800212a <__swsetup_r+0x2a>
 8002126:	68ac      	ldr	r4, [r5, #8]
 8002128:	e003      	b.n	8002132 <__swsetup_r+0x32>
 800212a:	4b2a      	ldr	r3, [pc, #168]	; (80021d4 <__swsetup_r+0xd4>)
 800212c:	429c      	cmp	r4, r3
 800212e:	bf08      	it	eq
 8002130:	68ec      	ldreq	r4, [r5, #12]
 8002132:	89a3      	ldrh	r3, [r4, #12]
 8002134:	b29a      	uxth	r2, r3
 8002136:	0711      	lsls	r1, r2, #28
 8002138:	d41d      	bmi.n	8002176 <__swsetup_r+0x76>
 800213a:	06d5      	lsls	r5, r2, #27
 800213c:	d402      	bmi.n	8002144 <__swsetup_r+0x44>
 800213e:	2209      	movs	r2, #9
 8002140:	6032      	str	r2, [r6, #0]
 8002142:	e038      	b.n	80021b6 <__swsetup_r+0xb6>
 8002144:	0750      	lsls	r0, r2, #29
 8002146:	d512      	bpl.n	800216e <__swsetup_r+0x6e>
 8002148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800214a:	b141      	cbz	r1, 800215e <__swsetup_r+0x5e>
 800214c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002150:	4299      	cmp	r1, r3
 8002152:	d002      	beq.n	800215a <__swsetup_r+0x5a>
 8002154:	4630      	mov	r0, r6
 8002156:	f000 fa03 	bl	8002560 <_free_r>
 800215a:	2300      	movs	r3, #0
 800215c:	6363      	str	r3, [r4, #52]	; 0x34
 800215e:	89a3      	ldrh	r3, [r4, #12]
 8002160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002164:	81a3      	strh	r3, [r4, #12]
 8002166:	2300      	movs	r3, #0
 8002168:	6063      	str	r3, [r4, #4]
 800216a:	6923      	ldr	r3, [r4, #16]
 800216c:	6023      	str	r3, [r4, #0]
 800216e:	89a3      	ldrh	r3, [r4, #12]
 8002170:	f043 0308 	orr.w	r3, r3, #8
 8002174:	81a3      	strh	r3, [r4, #12]
 8002176:	6923      	ldr	r3, [r4, #16]
 8002178:	b94b      	cbnz	r3, 800218e <__swsetup_r+0x8e>
 800217a:	89a3      	ldrh	r3, [r4, #12]
 800217c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d003      	beq.n	800218e <__swsetup_r+0x8e>
 8002186:	4630      	mov	r0, r6
 8002188:	4621      	mov	r1, r4
 800218a:	f000 f99b 	bl	80024c4 <__smakebuf_r>
 800218e:	89a3      	ldrh	r3, [r4, #12]
 8002190:	f013 0201 	ands.w	r2, r3, #1
 8002194:	d005      	beq.n	80021a2 <__swsetup_r+0xa2>
 8002196:	2200      	movs	r2, #0
 8002198:	60a2      	str	r2, [r4, #8]
 800219a:	6962      	ldr	r2, [r4, #20]
 800219c:	4252      	negs	r2, r2
 800219e:	61a2      	str	r2, [r4, #24]
 80021a0:	e003      	b.n	80021aa <__swsetup_r+0xaa>
 80021a2:	0799      	lsls	r1, r3, #30
 80021a4:	bf58      	it	pl
 80021a6:	6962      	ldrpl	r2, [r4, #20]
 80021a8:	60a2      	str	r2, [r4, #8]
 80021aa:	6922      	ldr	r2, [r4, #16]
 80021ac:	b94a      	cbnz	r2, 80021c2 <__swsetup_r+0xc2>
 80021ae:	f003 0080 	and.w	r0, r3, #128	; 0x80
 80021b2:	b280      	uxth	r0, r0
 80021b4:	b130      	cbz	r0, 80021c4 <__swsetup_r+0xc4>
 80021b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021ba:	81a3      	strh	r3, [r4, #12]
 80021bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c0:	bd70      	pop	{r4, r5, r6, pc}
 80021c2:	2000      	movs	r0, #0
 80021c4:	bd70      	pop	{r4, r5, r6, pc}
 80021c6:	bf00      	nop
 80021c8:	20000078 	.word	0x20000078
 80021cc:	080028b4 	.word	0x080028b4
 80021d0:	080028d4 	.word	0x080028d4
 80021d4:	080028f4 	.word	0x080028f4

080021d8 <__sflush_r>:
 80021d8:	898a      	ldrh	r2, [r1, #12]
 80021da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021de:	4605      	mov	r5, r0
 80021e0:	0710      	lsls	r0, r2, #28
 80021e2:	460c      	mov	r4, r1
 80021e4:	d457      	bmi.n	8002296 <__sflush_r+0xbe>
 80021e6:	684b      	ldr	r3, [r1, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	dc02      	bgt.n	80021f2 <__sflush_r+0x1a>
 80021ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	dd18      	ble.n	8002224 <__sflush_r+0x4c>
 80021f2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80021f4:	b1b6      	cbz	r6, 8002224 <__sflush_r+0x4c>
 80021f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80021fa:	2300      	movs	r3, #0
 80021fc:	b292      	uxth	r2, r2
 80021fe:	682f      	ldr	r7, [r5, #0]
 8002200:	602b      	str	r3, [r5, #0]
 8002202:	b10a      	cbz	r2, 8002208 <__sflush_r+0x30>
 8002204:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002206:	e010      	b.n	800222a <__sflush_r+0x52>
 8002208:	6a21      	ldr	r1, [r4, #32]
 800220a:	4628      	mov	r0, r5
 800220c:	2301      	movs	r3, #1
 800220e:	47b0      	blx	r6
 8002210:	1c41      	adds	r1, r0, #1
 8002212:	4602      	mov	r2, r0
 8002214:	d109      	bne.n	800222a <__sflush_r+0x52>
 8002216:	682b      	ldr	r3, [r5, #0]
 8002218:	b13b      	cbz	r3, 800222a <__sflush_r+0x52>
 800221a:	2b1d      	cmp	r3, #29
 800221c:	d001      	beq.n	8002222 <__sflush_r+0x4a>
 800221e:	2b16      	cmp	r3, #22
 8002220:	d147      	bne.n	80022b2 <__sflush_r+0xda>
 8002222:	602f      	str	r7, [r5, #0]
 8002224:	2000      	movs	r0, #0
 8002226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800222a:	89a3      	ldrh	r3, [r4, #12]
 800222c:	075b      	lsls	r3, r3, #29
 800222e:	d505      	bpl.n	800223c <__sflush_r+0x64>
 8002230:	6863      	ldr	r3, [r4, #4]
 8002232:	1ad2      	subs	r2, r2, r3
 8002234:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002236:	b10b      	cbz	r3, 800223c <__sflush_r+0x64>
 8002238:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800223a:	1ad2      	subs	r2, r2, r3
 800223c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800223e:	6a21      	ldr	r1, [r4, #32]
 8002240:	2300      	movs	r3, #0
 8002242:	4628      	mov	r0, r5
 8002244:	47b0      	blx	r6
 8002246:	1c46      	adds	r6, r0, #1
 8002248:	89a3      	ldrh	r3, [r4, #12]
 800224a:	d105      	bne.n	8002258 <__sflush_r+0x80>
 800224c:	682a      	ldr	r2, [r5, #0]
 800224e:	b11a      	cbz	r2, 8002258 <__sflush_r+0x80>
 8002250:	2a1d      	cmp	r2, #29
 8002252:	d001      	beq.n	8002258 <__sflush_r+0x80>
 8002254:	2a16      	cmp	r2, #22
 8002256:	d119      	bne.n	800228c <__sflush_r+0xb4>
 8002258:	2200      	movs	r2, #0
 800225a:	6062      	str	r2, [r4, #4]
 800225c:	04d9      	lsls	r1, r3, #19
 800225e:	6922      	ldr	r2, [r4, #16]
 8002260:	6022      	str	r2, [r4, #0]
 8002262:	d504      	bpl.n	800226e <__sflush_r+0x96>
 8002264:	1c42      	adds	r2, r0, #1
 8002266:	d101      	bne.n	800226c <__sflush_r+0x94>
 8002268:	682b      	ldr	r3, [r5, #0]
 800226a:	b903      	cbnz	r3, 800226e <__sflush_r+0x96>
 800226c:	6560      	str	r0, [r4, #84]	; 0x54
 800226e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002270:	602f      	str	r7, [r5, #0]
 8002272:	2900      	cmp	r1, #0
 8002274:	d0d6      	beq.n	8002224 <__sflush_r+0x4c>
 8002276:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800227a:	4299      	cmp	r1, r3
 800227c:	d002      	beq.n	8002284 <__sflush_r+0xac>
 800227e:	4628      	mov	r0, r5
 8002280:	f000 f96e 	bl	8002560 <_free_r>
 8002284:	2000      	movs	r0, #0
 8002286:	6360      	str	r0, [r4, #52]	; 0x34
 8002288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800228c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002290:	81a3      	strh	r3, [r4, #12]
 8002292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002296:	690f      	ldr	r7, [r1, #16]
 8002298:	2f00      	cmp	r7, #0
 800229a:	d0c3      	beq.n	8002224 <__sflush_r+0x4c>
 800229c:	0793      	lsls	r3, r2, #30
 800229e:	680e      	ldr	r6, [r1, #0]
 80022a0:	bf08      	it	eq
 80022a2:	694b      	ldreq	r3, [r1, #20]
 80022a4:	600f      	str	r7, [r1, #0]
 80022a6:	bf18      	it	ne
 80022a8:	2300      	movne	r3, #0
 80022aa:	ebc7 0806 	rsb	r8, r7, r6
 80022ae:	608b      	str	r3, [r1, #8]
 80022b0:	e012      	b.n	80022d8 <__sflush_r+0x100>
 80022b2:	89a3      	ldrh	r3, [r4, #12]
 80022b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022b8:	81a3      	strh	r3, [r4, #12]
 80022ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80022c2:	4628      	mov	r0, r5
 80022c4:	6a21      	ldr	r1, [r4, #32]
 80022c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80022c8:	463a      	mov	r2, r7
 80022ca:	4643      	mov	r3, r8
 80022cc:	47b0      	blx	r6
 80022ce:	2800      	cmp	r0, #0
 80022d0:	ddef      	ble.n	80022b2 <__sflush_r+0xda>
 80022d2:	4407      	add	r7, r0
 80022d4:	ebc0 0808 	rsb	r8, r0, r8
 80022d8:	f1b8 0f00 	cmp.w	r8, #0
 80022dc:	dcf1      	bgt.n	80022c2 <__sflush_r+0xea>
 80022de:	e7a1      	b.n	8002224 <__sflush_r+0x4c>

080022e0 <_fflush_r>:
 80022e0:	b538      	push	{r3, r4, r5, lr}
 80022e2:	690b      	ldr	r3, [r1, #16]
 80022e4:	4605      	mov	r5, r0
 80022e6:	460c      	mov	r4, r1
 80022e8:	b1db      	cbz	r3, 8002322 <_fflush_r+0x42>
 80022ea:	b118      	cbz	r0, 80022f4 <_fflush_r+0x14>
 80022ec:	6983      	ldr	r3, [r0, #24]
 80022ee:	b90b      	cbnz	r3, 80022f4 <_fflush_r+0x14>
 80022f0:	f000 f860 	bl	80023b4 <__sinit>
 80022f4:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <_fflush_r+0x48>)
 80022f6:	429c      	cmp	r4, r3
 80022f8:	d101      	bne.n	80022fe <_fflush_r+0x1e>
 80022fa:	686c      	ldr	r4, [r5, #4]
 80022fc:	e008      	b.n	8002310 <_fflush_r+0x30>
 80022fe:	4b0b      	ldr	r3, [pc, #44]	; (800232c <_fflush_r+0x4c>)
 8002300:	429c      	cmp	r4, r3
 8002302:	d101      	bne.n	8002308 <_fflush_r+0x28>
 8002304:	68ac      	ldr	r4, [r5, #8]
 8002306:	e003      	b.n	8002310 <_fflush_r+0x30>
 8002308:	4b09      	ldr	r3, [pc, #36]	; (8002330 <_fflush_r+0x50>)
 800230a:	429c      	cmp	r4, r3
 800230c:	bf08      	it	eq
 800230e:	68ec      	ldreq	r4, [r5, #12]
 8002310:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002314:	b12b      	cbz	r3, 8002322 <_fflush_r+0x42>
 8002316:	4628      	mov	r0, r5
 8002318:	4621      	mov	r1, r4
 800231a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800231e:	f7ff bf5b 	b.w	80021d8 <__sflush_r>
 8002322:	2000      	movs	r0, #0
 8002324:	bd38      	pop	{r3, r4, r5, pc}
 8002326:	bf00      	nop
 8002328:	080028b4 	.word	0x080028b4
 800232c:	080028d4 	.word	0x080028d4
 8002330:	080028f4 	.word	0x080028f4

08002334 <_cleanup_r>:
 8002334:	4901      	ldr	r1, [pc, #4]	; (800233c <_cleanup_r+0x8>)
 8002336:	f000 b8a7 	b.w	8002488 <_fwalk_reent>
 800233a:	bf00      	nop
 800233c:	080022e1 	.word	0x080022e1

08002340 <std.isra.0>:
 8002340:	2300      	movs	r3, #0
 8002342:	b510      	push	{r4, lr}
 8002344:	4604      	mov	r4, r0
 8002346:	6003      	str	r3, [r0, #0]
 8002348:	6043      	str	r3, [r0, #4]
 800234a:	6083      	str	r3, [r0, #8]
 800234c:	8181      	strh	r1, [r0, #12]
 800234e:	6643      	str	r3, [r0, #100]	; 0x64
 8002350:	81c2      	strh	r2, [r0, #14]
 8002352:	6103      	str	r3, [r0, #16]
 8002354:	6143      	str	r3, [r0, #20]
 8002356:	6183      	str	r3, [r0, #24]
 8002358:	4619      	mov	r1, r3
 800235a:	305c      	adds	r0, #92	; 0x5c
 800235c:	2208      	movs	r2, #8
 800235e:	f7ff fdf3 	bl	8001f48 <memset>
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <std.isra.0+0x38>)
 8002364:	6263      	str	r3, [r4, #36]	; 0x24
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <std.isra.0+0x3c>)
 8002368:	62a3      	str	r3, [r4, #40]	; 0x28
 800236a:	4b05      	ldr	r3, [pc, #20]	; (8002380 <std.isra.0+0x40>)
 800236c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800236e:	4b05      	ldr	r3, [pc, #20]	; (8002384 <std.isra.0+0x44>)
 8002370:	6224      	str	r4, [r4, #32]
 8002372:	6323      	str	r3, [r4, #48]	; 0x30
 8002374:	bd10      	pop	{r4, pc}
 8002376:	bf00      	nop
 8002378:	080026b5 	.word	0x080026b5
 800237c:	080026d7 	.word	0x080026d7
 8002380:	0800270f 	.word	0x0800270f
 8002384:	08002733 	.word	0x08002733

08002388 <__sfmoreglue>:
 8002388:	b570      	push	{r4, r5, r6, lr}
 800238a:	2368      	movs	r3, #104	; 0x68
 800238c:	1e4d      	subs	r5, r1, #1
 800238e:	435d      	muls	r5, r3
 8002390:	460e      	mov	r6, r1
 8002392:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002396:	f000 f927 	bl	80025e8 <_malloc_r>
 800239a:	4604      	mov	r4, r0
 800239c:	b140      	cbz	r0, 80023b0 <__sfmoreglue+0x28>
 800239e:	2100      	movs	r1, #0
 80023a0:	e880 0042 	stmia.w	r0, {r1, r6}
 80023a4:	300c      	adds	r0, #12
 80023a6:	60a0      	str	r0, [r4, #8]
 80023a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80023ac:	f7ff fdcc 	bl	8001f48 <memset>
 80023b0:	4620      	mov	r0, r4
 80023b2:	bd70      	pop	{r4, r5, r6, pc}

080023b4 <__sinit>:
 80023b4:	6983      	ldr	r3, [r0, #24]
 80023b6:	b510      	push	{r4, lr}
 80023b8:	4604      	mov	r4, r0
 80023ba:	bb33      	cbnz	r3, 800240a <__sinit+0x56>
 80023bc:	6483      	str	r3, [r0, #72]	; 0x48
 80023be:	64c3      	str	r3, [r0, #76]	; 0x4c
 80023c0:	6503      	str	r3, [r0, #80]	; 0x50
 80023c2:	4b12      	ldr	r3, [pc, #72]	; (800240c <__sinit+0x58>)
 80023c4:	4a12      	ldr	r2, [pc, #72]	; (8002410 <__sinit+0x5c>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6282      	str	r2, [r0, #40]	; 0x28
 80023ca:	4298      	cmp	r0, r3
 80023cc:	bf04      	itt	eq
 80023ce:	2301      	moveq	r3, #1
 80023d0:	6183      	streq	r3, [r0, #24]
 80023d2:	f000 f81f 	bl	8002414 <__sfp>
 80023d6:	6060      	str	r0, [r4, #4]
 80023d8:	4620      	mov	r0, r4
 80023da:	f000 f81b 	bl	8002414 <__sfp>
 80023de:	60a0      	str	r0, [r4, #8]
 80023e0:	4620      	mov	r0, r4
 80023e2:	f000 f817 	bl	8002414 <__sfp>
 80023e6:	2104      	movs	r1, #4
 80023e8:	60e0      	str	r0, [r4, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	6860      	ldr	r0, [r4, #4]
 80023ee:	f7ff ffa7 	bl	8002340 <std.isra.0>
 80023f2:	68a0      	ldr	r0, [r4, #8]
 80023f4:	2109      	movs	r1, #9
 80023f6:	2201      	movs	r2, #1
 80023f8:	f7ff ffa2 	bl	8002340 <std.isra.0>
 80023fc:	68e0      	ldr	r0, [r4, #12]
 80023fe:	2112      	movs	r1, #18
 8002400:	2202      	movs	r2, #2
 8002402:	f7ff ff9d 	bl	8002340 <std.isra.0>
 8002406:	2301      	movs	r3, #1
 8002408:	61a3      	str	r3, [r4, #24]
 800240a:	bd10      	pop	{r4, pc}
 800240c:	080028b0 	.word	0x080028b0
 8002410:	08002335 	.word	0x08002335

08002414 <__sfp>:
 8002414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002416:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <__sfp+0x70>)
 8002418:	681e      	ldr	r6, [r3, #0]
 800241a:	69b3      	ldr	r3, [r6, #24]
 800241c:	4607      	mov	r7, r0
 800241e:	b913      	cbnz	r3, 8002426 <__sfp+0x12>
 8002420:	4630      	mov	r0, r6
 8002422:	f7ff ffc7 	bl	80023b4 <__sinit>
 8002426:	3648      	adds	r6, #72	; 0x48
 8002428:	68b4      	ldr	r4, [r6, #8]
 800242a:	6873      	ldr	r3, [r6, #4]
 800242c:	3b01      	subs	r3, #1
 800242e:	d404      	bmi.n	800243a <__sfp+0x26>
 8002430:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002434:	b175      	cbz	r5, 8002454 <__sfp+0x40>
 8002436:	3468      	adds	r4, #104	; 0x68
 8002438:	e7f8      	b.n	800242c <__sfp+0x18>
 800243a:	6833      	ldr	r3, [r6, #0]
 800243c:	b92b      	cbnz	r3, 800244a <__sfp+0x36>
 800243e:	4638      	mov	r0, r7
 8002440:	2104      	movs	r1, #4
 8002442:	f7ff ffa1 	bl	8002388 <__sfmoreglue>
 8002446:	6030      	str	r0, [r6, #0]
 8002448:	b108      	cbz	r0, 800244e <__sfp+0x3a>
 800244a:	6836      	ldr	r6, [r6, #0]
 800244c:	e7ec      	b.n	8002428 <__sfp+0x14>
 800244e:	230c      	movs	r3, #12
 8002450:	603b      	str	r3, [r7, #0]
 8002452:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002458:	81e3      	strh	r3, [r4, #14]
 800245a:	2301      	movs	r3, #1
 800245c:	81a3      	strh	r3, [r4, #12]
 800245e:	6665      	str	r5, [r4, #100]	; 0x64
 8002460:	6025      	str	r5, [r4, #0]
 8002462:	60a5      	str	r5, [r4, #8]
 8002464:	6065      	str	r5, [r4, #4]
 8002466:	6125      	str	r5, [r4, #16]
 8002468:	6165      	str	r5, [r4, #20]
 800246a:	61a5      	str	r5, [r4, #24]
 800246c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002470:	4629      	mov	r1, r5
 8002472:	2208      	movs	r2, #8
 8002474:	f7ff fd68 	bl	8001f48 <memset>
 8002478:	6365      	str	r5, [r4, #52]	; 0x34
 800247a:	63a5      	str	r5, [r4, #56]	; 0x38
 800247c:	64a5      	str	r5, [r4, #72]	; 0x48
 800247e:	64e5      	str	r5, [r4, #76]	; 0x4c
 8002480:	4620      	mov	r0, r4
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002484:	080028b0 	.word	0x080028b0

08002488 <_fwalk_reent>:
 8002488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800248c:	4680      	mov	r8, r0
 800248e:	4689      	mov	r9, r1
 8002490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002494:	2600      	movs	r6, #0
 8002496:	b194      	cbz	r4, 80024be <_fwalk_reent+0x36>
 8002498:	68a5      	ldr	r5, [r4, #8]
 800249a:	6867      	ldr	r7, [r4, #4]
 800249c:	3f01      	subs	r7, #1
 800249e:	d40c      	bmi.n	80024ba <_fwalk_reent+0x32>
 80024a0:	89ab      	ldrh	r3, [r5, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d907      	bls.n	80024b6 <_fwalk_reent+0x2e>
 80024a6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80024aa:	3301      	adds	r3, #1
 80024ac:	d003      	beq.n	80024b6 <_fwalk_reent+0x2e>
 80024ae:	4640      	mov	r0, r8
 80024b0:	4629      	mov	r1, r5
 80024b2:	47c8      	blx	r9
 80024b4:	4306      	orrs	r6, r0
 80024b6:	3568      	adds	r5, #104	; 0x68
 80024b8:	e7f0      	b.n	800249c <_fwalk_reent+0x14>
 80024ba:	6824      	ldr	r4, [r4, #0]
 80024bc:	e7eb      	b.n	8002496 <_fwalk_reent+0xe>
 80024be:	4630      	mov	r0, r6
 80024c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080024c4 <__smakebuf_r>:
 80024c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024c6:	898b      	ldrh	r3, [r1, #12]
 80024c8:	079d      	lsls	r5, r3, #30
 80024ca:	b091      	sub	sp, #68	; 0x44
 80024cc:	4606      	mov	r6, r0
 80024ce:	460c      	mov	r4, r1
 80024d0:	d426      	bmi.n	8002520 <__smakebuf_r+0x5c>
 80024d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024d6:	2900      	cmp	r1, #0
 80024d8:	da09      	bge.n	80024ee <__smakebuf_r+0x2a>
 80024da:	89a3      	ldrh	r3, [r4, #12]
 80024dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80024e0:	f04f 0500 	mov.w	r5, #0
 80024e4:	bf14      	ite	ne
 80024e6:	2740      	movne	r7, #64	; 0x40
 80024e8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
 80024ec:	e00d      	b.n	800250a <__smakebuf_r+0x46>
 80024ee:	aa01      	add	r2, sp, #4
 80024f0:	f000 f946 	bl	8002780 <_fstat_r>
 80024f4:	2800      	cmp	r0, #0
 80024f6:	dbf0      	blt.n	80024da <__smakebuf_r+0x16>
 80024f8:	9d02      	ldr	r5, [sp, #8]
 80024fa:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
 80024fe:	f5a5 5100 	sub.w	r1, r5, #8192	; 0x2000
 8002502:	424d      	negs	r5, r1
 8002504:	414d      	adcs	r5, r1
 8002506:	f44f 6780 	mov.w	r7, #1024	; 0x400
 800250a:	4630      	mov	r0, r6
 800250c:	4639      	mov	r1, r7
 800250e:	f000 f86b 	bl	80025e8 <_malloc_r>
 8002512:	b960      	cbnz	r0, 800252e <__smakebuf_r+0x6a>
 8002514:	89a3      	ldrh	r3, [r4, #12]
 8002516:	059a      	lsls	r2, r3, #22
 8002518:	d41d      	bmi.n	8002556 <__smakebuf_r+0x92>
 800251a:	f043 0302 	orr.w	r3, r3, #2
 800251e:	81a3      	strh	r3, [r4, #12]
 8002520:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	6123      	str	r3, [r4, #16]
 8002528:	2301      	movs	r3, #1
 800252a:	6163      	str	r3, [r4, #20]
 800252c:	e013      	b.n	8002556 <__smakebuf_r+0x92>
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <__smakebuf_r+0x98>)
 8002530:	62b3      	str	r3, [r6, #40]	; 0x28
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	6020      	str	r0, [r4, #0]
 8002536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253a:	81a3      	strh	r3, [r4, #12]
 800253c:	6120      	str	r0, [r4, #16]
 800253e:	6167      	str	r7, [r4, #20]
 8002540:	b14d      	cbz	r5, 8002556 <__smakebuf_r+0x92>
 8002542:	4630      	mov	r0, r6
 8002544:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002548:	f000 f92c 	bl	80027a4 <_isatty_r>
 800254c:	b118      	cbz	r0, 8002556 <__smakebuf_r+0x92>
 800254e:	89a3      	ldrh	r3, [r4, #12]
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	81a3      	strh	r3, [r4, #12]
 8002556:	b011      	add	sp, #68	; 0x44
 8002558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800255a:	bf00      	nop
 800255c:	08002335 	.word	0x08002335

08002560 <_free_r>:
 8002560:	b530      	push	{r4, r5, lr}
 8002562:	2900      	cmp	r1, #0
 8002564:	d03d      	beq.n	80025e2 <_free_r+0x82>
 8002566:	f851 2c04 	ldr.w	r2, [r1, #-4]
 800256a:	1f0b      	subs	r3, r1, #4
 800256c:	491d      	ldr	r1, [pc, #116]	; (80025e4 <_free_r+0x84>)
 800256e:	2a00      	cmp	r2, #0
 8002570:	bfb8      	it	lt
 8002572:	189b      	addlt	r3, r3, r2
 8002574:	680a      	ldr	r2, [r1, #0]
 8002576:	460c      	mov	r4, r1
 8002578:	b912      	cbnz	r2, 8002580 <_free_r+0x20>
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	600b      	str	r3, [r1, #0]
 800257e:	bd30      	pop	{r4, r5, pc}
 8002580:	4293      	cmp	r3, r2
 8002582:	d20d      	bcs.n	80025a0 <_free_r+0x40>
 8002584:	6819      	ldr	r1, [r3, #0]
 8002586:	1858      	adds	r0, r3, r1
 8002588:	4290      	cmp	r0, r2
 800258a:	bf01      	itttt	eq
 800258c:	585a      	ldreq	r2, [r3, r1]
 800258e:	1852      	addeq	r2, r2, r1
 8002590:	601a      	streq	r2, [r3, #0]
 8002592:	6842      	ldreq	r2, [r0, #4]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	6023      	str	r3, [r4, #0]
 8002598:	bd30      	pop	{r4, r5, pc}
 800259a:	4299      	cmp	r1, r3
 800259c:	d803      	bhi.n	80025a6 <_free_r+0x46>
 800259e:	460a      	mov	r2, r1
 80025a0:	6851      	ldr	r1, [r2, #4]
 80025a2:	2900      	cmp	r1, #0
 80025a4:	d1f9      	bne.n	800259a <_free_r+0x3a>
 80025a6:	6814      	ldr	r4, [r2, #0]
 80025a8:	1915      	adds	r5, r2, r4
 80025aa:	429d      	cmp	r5, r3
 80025ac:	d10a      	bne.n	80025c4 <_free_r+0x64>
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4423      	add	r3, r4
 80025b2:	18d0      	adds	r0, r2, r3
 80025b4:	4288      	cmp	r0, r1
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	d113      	bne.n	80025e2 <_free_r+0x82>
 80025ba:	6808      	ldr	r0, [r1, #0]
 80025bc:	4403      	add	r3, r0
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	684b      	ldr	r3, [r1, #4]
 80025c2:	e00d      	b.n	80025e0 <_free_r+0x80>
 80025c4:	d902      	bls.n	80025cc <_free_r+0x6c>
 80025c6:	230c      	movs	r3, #12
 80025c8:	6003      	str	r3, [r0, #0]
 80025ca:	bd30      	pop	{r4, r5, pc}
 80025cc:	681c      	ldr	r4, [r3, #0]
 80025ce:	1918      	adds	r0, r3, r4
 80025d0:	4288      	cmp	r0, r1
 80025d2:	bf04      	itt	eq
 80025d4:	6808      	ldreq	r0, [r1, #0]
 80025d6:	6849      	ldreq	r1, [r1, #4]
 80025d8:	6059      	str	r1, [r3, #4]
 80025da:	bf04      	itt	eq
 80025dc:	1900      	addeq	r0, r0, r4
 80025de:	6018      	streq	r0, [r3, #0]
 80025e0:	6053      	str	r3, [r2, #4]
 80025e2:	bd30      	pop	{r4, r5, pc}
 80025e4:	200000a0 	.word	0x200000a0

080025e8 <_malloc_r>:
 80025e8:	b570      	push	{r4, r5, r6, lr}
 80025ea:	1ccc      	adds	r4, r1, #3
 80025ec:	f024 0403 	bic.w	r4, r4, #3
 80025f0:	3408      	adds	r4, #8
 80025f2:	2c0c      	cmp	r4, #12
 80025f4:	bf38      	it	cc
 80025f6:	240c      	movcc	r4, #12
 80025f8:	2c00      	cmp	r4, #0
 80025fa:	4606      	mov	r6, r0
 80025fc:	da03      	bge.n	8002606 <_malloc_r+0x1e>
 80025fe:	230c      	movs	r3, #12
 8002600:	6033      	str	r3, [r6, #0]
 8002602:	2000      	movs	r0, #0
 8002604:	bd70      	pop	{r4, r5, r6, pc}
 8002606:	428c      	cmp	r4, r1
 8002608:	d3f9      	bcc.n	80025fe <_malloc_r+0x16>
 800260a:	4a20      	ldr	r2, [pc, #128]	; (800268c <_malloc_r+0xa4>)
 800260c:	6813      	ldr	r3, [r2, #0]
 800260e:	4610      	mov	r0, r2
 8002610:	4619      	mov	r1, r3
 8002612:	b1a1      	cbz	r1, 800263e <_malloc_r+0x56>
 8002614:	680a      	ldr	r2, [r1, #0]
 8002616:	1b12      	subs	r2, r2, r4
 8002618:	d40e      	bmi.n	8002638 <_malloc_r+0x50>
 800261a:	2a0b      	cmp	r2, #11
 800261c:	d903      	bls.n	8002626 <_malloc_r+0x3e>
 800261e:	600a      	str	r2, [r1, #0]
 8002620:	188b      	adds	r3, r1, r2
 8002622:	508c      	str	r4, [r1, r2]
 8002624:	e01f      	b.n	8002666 <_malloc_r+0x7e>
 8002626:	428b      	cmp	r3, r1
 8002628:	bf0d      	iteet	eq
 800262a:	685a      	ldreq	r2, [r3, #4]
 800262c:	684a      	ldrne	r2, [r1, #4]
 800262e:	605a      	strne	r2, [r3, #4]
 8002630:	6002      	streq	r2, [r0, #0]
 8002632:	bf18      	it	ne
 8002634:	460b      	movne	r3, r1
 8002636:	e016      	b.n	8002666 <_malloc_r+0x7e>
 8002638:	460b      	mov	r3, r1
 800263a:	6849      	ldr	r1, [r1, #4]
 800263c:	e7e9      	b.n	8002612 <_malloc_r+0x2a>
 800263e:	4d14      	ldr	r5, [pc, #80]	; (8002690 <_malloc_r+0xa8>)
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b91b      	cbnz	r3, 800264c <_malloc_r+0x64>
 8002644:	4630      	mov	r0, r6
 8002646:	f000 f825 	bl	8002694 <_sbrk_r>
 800264a:	6028      	str	r0, [r5, #0]
 800264c:	4630      	mov	r0, r6
 800264e:	4621      	mov	r1, r4
 8002650:	f000 f820 	bl	8002694 <_sbrk_r>
 8002654:	1c42      	adds	r2, r0, #1
 8002656:	4603      	mov	r3, r0
 8002658:	d0d1      	beq.n	80025fe <_malloc_r+0x16>
 800265a:	1cc5      	adds	r5, r0, #3
 800265c:	f025 0503 	bic.w	r5, r5, #3
 8002660:	4285      	cmp	r5, r0
 8002662:	d10a      	bne.n	800267a <_malloc_r+0x92>
 8002664:	601c      	str	r4, [r3, #0]
 8002666:	f103 000b 	add.w	r0, r3, #11
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	f020 0007 	bic.w	r0, r0, #7
 8002670:	1a82      	subs	r2, r0, r2
 8002672:	d00a      	beq.n	800268a <_malloc_r+0xa2>
 8002674:	4251      	negs	r1, r2
 8002676:	5099      	str	r1, [r3, r2]
 8002678:	bd70      	pop	{r4, r5, r6, pc}
 800267a:	4630      	mov	r0, r6
 800267c:	1ae9      	subs	r1, r5, r3
 800267e:	f000 f809 	bl	8002694 <_sbrk_r>
 8002682:	3001      	adds	r0, #1
 8002684:	d0bb      	beq.n	80025fe <_malloc_r+0x16>
 8002686:	462b      	mov	r3, r5
 8002688:	e7ec      	b.n	8002664 <_malloc_r+0x7c>
 800268a:	bd70      	pop	{r4, r5, r6, pc}
 800268c:	200000a0 	.word	0x200000a0
 8002690:	2000009c 	.word	0x2000009c

08002694 <_sbrk_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	4c06      	ldr	r4, [pc, #24]	; (80026b0 <_sbrk_r+0x1c>)
 8002698:	2300      	movs	r3, #0
 800269a:	4605      	mov	r5, r0
 800269c:	4608      	mov	r0, r1
 800269e:	6023      	str	r3, [r4, #0]
 80026a0:	f000 f8dc 	bl	800285c <_sbrk>
 80026a4:	1c43      	adds	r3, r0, #1
 80026a6:	d102      	bne.n	80026ae <_sbrk_r+0x1a>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	b103      	cbz	r3, 80026ae <_sbrk_r+0x1a>
 80026ac:	602b      	str	r3, [r5, #0]
 80026ae:	bd38      	pop	{r3, r4, r5, pc}
 80026b0:	200000cc 	.word	0x200000cc

080026b4 <__sread>:
 80026b4:	b510      	push	{r4, lr}
 80026b6:	460c      	mov	r4, r1
 80026b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026bc:	f000 f894 	bl	80027e8 <_read_r>
 80026c0:	2800      	cmp	r0, #0
 80026c2:	bfab      	itete	ge
 80026c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80026c6:	89a3      	ldrhlt	r3, [r4, #12]
 80026c8:	181b      	addge	r3, r3, r0
 80026ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80026ce:	bfac      	ite	ge
 80026d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80026d2:	81a3      	strhlt	r3, [r4, #12]
 80026d4:	bd10      	pop	{r4, pc}

080026d6 <__swrite>:
 80026d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026da:	461d      	mov	r5, r3
 80026dc:	898b      	ldrh	r3, [r1, #12]
 80026de:	05db      	lsls	r3, r3, #23
 80026e0:	4607      	mov	r7, r0
 80026e2:	460c      	mov	r4, r1
 80026e4:	4616      	mov	r6, r2
 80026e6:	d505      	bpl.n	80026f4 <__swrite+0x1e>
 80026e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ec:	2200      	movs	r2, #0
 80026ee:	2302      	movs	r3, #2
 80026f0:	f000 f868 	bl	80027c4 <_lseek_r>
 80026f4:	89a3      	ldrh	r3, [r4, #12]
 80026f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026fe:	81a3      	strh	r3, [r4, #12]
 8002700:	4638      	mov	r0, r7
 8002702:	4632      	mov	r2, r6
 8002704:	462b      	mov	r3, r5
 8002706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800270a:	f000 b817 	b.w	800273c <_write_r>

0800270e <__sseek>:
 800270e:	b510      	push	{r4, lr}
 8002710:	460c      	mov	r4, r1
 8002712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002716:	f000 f855 	bl	80027c4 <_lseek_r>
 800271a:	1c43      	adds	r3, r0, #1
 800271c:	89a3      	ldrh	r3, [r4, #12]
 800271e:	bf15      	itete	ne
 8002720:	6560      	strne	r0, [r4, #84]	; 0x54
 8002722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800272a:	81a3      	strheq	r3, [r4, #12]
 800272c:	bf18      	it	ne
 800272e:	81a3      	strhne	r3, [r4, #12]
 8002730:	bd10      	pop	{r4, pc}

08002732 <__sclose>:
 8002732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002736:	f000 b813 	b.w	8002760 <_close_r>
	...

0800273c <_write_r>:
 800273c:	b538      	push	{r3, r4, r5, lr}
 800273e:	4c07      	ldr	r4, [pc, #28]	; (800275c <_write_r+0x20>)
 8002740:	4605      	mov	r5, r0
 8002742:	2000      	movs	r0, #0
 8002744:	6020      	str	r0, [r4, #0]
 8002746:	4608      	mov	r0, r1
 8002748:	4611      	mov	r1, r2
 800274a:	461a      	mov	r2, r3
 800274c:	f000 f894 	bl	8002878 <_write>
 8002750:	1c43      	adds	r3, r0, #1
 8002752:	d102      	bne.n	800275a <_write_r+0x1e>
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	b103      	cbz	r3, 800275a <_write_r+0x1e>
 8002758:	602b      	str	r3, [r5, #0]
 800275a:	bd38      	pop	{r3, r4, r5, pc}
 800275c:	200000cc 	.word	0x200000cc

08002760 <_close_r>:
 8002760:	b538      	push	{r3, r4, r5, lr}
 8002762:	4c06      	ldr	r4, [pc, #24]	; (800277c <_close_r+0x1c>)
 8002764:	2300      	movs	r3, #0
 8002766:	4605      	mov	r5, r0
 8002768:	4608      	mov	r0, r1
 800276a:	6023      	str	r3, [r4, #0]
 800276c:	f000 f84e 	bl	800280c <_close>
 8002770:	1c43      	adds	r3, r0, #1
 8002772:	d102      	bne.n	800277a <_close_r+0x1a>
 8002774:	6823      	ldr	r3, [r4, #0]
 8002776:	b103      	cbz	r3, 800277a <_close_r+0x1a>
 8002778:	602b      	str	r3, [r5, #0]
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	200000cc 	.word	0x200000cc

08002780 <_fstat_r>:
 8002780:	b538      	push	{r3, r4, r5, lr}
 8002782:	4c07      	ldr	r4, [pc, #28]	; (80027a0 <_fstat_r+0x20>)
 8002784:	2300      	movs	r3, #0
 8002786:	4605      	mov	r5, r0
 8002788:	4608      	mov	r0, r1
 800278a:	4611      	mov	r1, r2
 800278c:	6023      	str	r3, [r4, #0]
 800278e:	f000 f845 	bl	800281c <_fstat>
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	d102      	bne.n	800279c <_fstat_r+0x1c>
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	b103      	cbz	r3, 800279c <_fstat_r+0x1c>
 800279a:	602b      	str	r3, [r5, #0]
 800279c:	bd38      	pop	{r3, r4, r5, pc}
 800279e:	bf00      	nop
 80027a0:	200000cc 	.word	0x200000cc

080027a4 <_isatty_r>:
 80027a4:	b538      	push	{r3, r4, r5, lr}
 80027a6:	4c06      	ldr	r4, [pc, #24]	; (80027c0 <_isatty_r+0x1c>)
 80027a8:	2300      	movs	r3, #0
 80027aa:	4605      	mov	r5, r0
 80027ac:	4608      	mov	r0, r1
 80027ae:	6023      	str	r3, [r4, #0]
 80027b0:	f000 f83c 	bl	800282c <_isatty>
 80027b4:	1c43      	adds	r3, r0, #1
 80027b6:	d102      	bne.n	80027be <_isatty_r+0x1a>
 80027b8:	6823      	ldr	r3, [r4, #0]
 80027ba:	b103      	cbz	r3, 80027be <_isatty_r+0x1a>
 80027bc:	602b      	str	r3, [r5, #0]
 80027be:	bd38      	pop	{r3, r4, r5, pc}
 80027c0:	200000cc 	.word	0x200000cc

080027c4 <_lseek_r>:
 80027c4:	b538      	push	{r3, r4, r5, lr}
 80027c6:	4c07      	ldr	r4, [pc, #28]	; (80027e4 <_lseek_r+0x20>)
 80027c8:	4605      	mov	r5, r0
 80027ca:	2000      	movs	r0, #0
 80027cc:	6020      	str	r0, [r4, #0]
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	f000 f832 	bl	800283c <_lseek>
 80027d8:	1c43      	adds	r3, r0, #1
 80027da:	d102      	bne.n	80027e2 <_lseek_r+0x1e>
 80027dc:	6823      	ldr	r3, [r4, #0]
 80027de:	b103      	cbz	r3, 80027e2 <_lseek_r+0x1e>
 80027e0:	602b      	str	r3, [r5, #0]
 80027e2:	bd38      	pop	{r3, r4, r5, pc}
 80027e4:	200000cc 	.word	0x200000cc

080027e8 <_read_r>:
 80027e8:	b538      	push	{r3, r4, r5, lr}
 80027ea:	4c07      	ldr	r4, [pc, #28]	; (8002808 <_read_r+0x20>)
 80027ec:	4605      	mov	r5, r0
 80027ee:	2000      	movs	r0, #0
 80027f0:	6020      	str	r0, [r4, #0]
 80027f2:	4608      	mov	r0, r1
 80027f4:	4611      	mov	r1, r2
 80027f6:	461a      	mov	r2, r3
 80027f8:	f000 f828 	bl	800284c <_read>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_read_r+0x1e>
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	b103      	cbz	r3, 8002806 <_read_r+0x1e>
 8002804:	602b      	str	r3, [r5, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	200000cc 	.word	0x200000cc

0800280c <_close>:
 800280c:	4b02      	ldr	r3, [pc, #8]	; (8002818 <_close+0xc>)
 800280e:	2258      	movs	r2, #88	; 0x58
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002816:	4770      	bx	lr
 8002818:	200000cc 	.word	0x200000cc

0800281c <_fstat>:
 800281c:	4b02      	ldr	r3, [pc, #8]	; (8002828 <_fstat+0xc>)
 800281e:	2258      	movs	r2, #88	; 0x58
 8002820:	601a      	str	r2, [r3, #0]
 8002822:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002826:	4770      	bx	lr
 8002828:	200000cc 	.word	0x200000cc

0800282c <_isatty>:
 800282c:	4b02      	ldr	r3, [pc, #8]	; (8002838 <_isatty+0xc>)
 800282e:	2258      	movs	r2, #88	; 0x58
 8002830:	601a      	str	r2, [r3, #0]
 8002832:	2000      	movs	r0, #0
 8002834:	4770      	bx	lr
 8002836:	bf00      	nop
 8002838:	200000cc 	.word	0x200000cc

0800283c <_lseek>:
 800283c:	4b02      	ldr	r3, [pc, #8]	; (8002848 <_lseek+0xc>)
 800283e:	2258      	movs	r2, #88	; 0x58
 8002840:	601a      	str	r2, [r3, #0]
 8002842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002846:	4770      	bx	lr
 8002848:	200000cc 	.word	0x200000cc

0800284c <_read>:
 800284c:	4b02      	ldr	r3, [pc, #8]	; (8002858 <_read+0xc>)
 800284e:	2258      	movs	r2, #88	; 0x58
 8002850:	601a      	str	r2, [r3, #0]
 8002852:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002856:	4770      	bx	lr
 8002858:	200000cc 	.word	0x200000cc

0800285c <_sbrk>:
 800285c:	4a04      	ldr	r2, [pc, #16]	; (8002870 <_sbrk+0x14>)
 800285e:	4905      	ldr	r1, [pc, #20]	; (8002874 <_sbrk+0x18>)
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	2b00      	cmp	r3, #0
 8002864:	bf08      	it	eq
 8002866:	460b      	moveq	r3, r1
 8002868:	4418      	add	r0, r3
 800286a:	6010      	str	r0, [r2, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	4770      	bx	lr
 8002870:	200000a4 	.word	0x200000a4
 8002874:	200000d0 	.word	0x200000d0

08002878 <_write>:
 8002878:	4b02      	ldr	r3, [pc, #8]	; (8002884 <_write+0xc>)
 800287a:	2258      	movs	r2, #88	; 0x58
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002882:	4770      	bx	lr
 8002884:	200000cc 	.word	0x200000cc

08002888 <_init>:
 8002888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288a:	bf00      	nop
 800288c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800288e:	bc08      	pop	{r3}
 8002890:	469e      	mov	lr, r3
 8002892:	4770      	bx	lr

08002894 <_fini>:
 8002894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002896:	bf00      	nop
 8002898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800289a:	bc08      	pop	{r3}
 800289c:	469e      	mov	lr, r3
 800289e:	4770      	bx	lr
